# Loading the dataset and everything

install.packages("readxl")
library(readxl)
dataset_20250422 <- read_excel("/Users/mariacamilapantojaruiz/Library/Mobile Documents/com~apple~CloudDocs/Documents/PhD/Incidence 30 years/20250422 dataset.xlsx")
library(dplyr)      # For %>%
library(gt)         # For rendering the tables
library(readxl)
library(dplyr)
library(tidyr)
library(tidyverse)
install.packages("writexl")  
library(writexl)

# View first few rows
head(dataset_20250422)

# Then, set working directory for outputs
setwd("/Users/mariacamilapantojaruiz/Library/Mobile Documents/com~apple~CloudDocs/Documents/R")

# Ward codes (Just for me to read)
southwark95 <- c(
  "Cathedral", "Chaucer", "Bricklayers", "Riverside", 
  "Rotherhithe", Dockyard", "Browning", "Burgees", 
  "Newington", "Faraday", 
  "St Giles", Brunswick", 
)
southwark01 <- c(
  "Cathedrals", "Chaucer", "Grange", "Riverside", "Rotherhithe",
  "Surrey Docks", "Newington", "East Walworth", "South Bermondsey",
  "Faraday", "Camberwell Green"
)
southwark11 <- c(
  "Cathedrals", "Chaucer", "Grange", "Riverside", "Rotherhithe",
  "Surrey Docks", "Newington", "East Walworth", "South Bermondsey",
  "Faraday", "Camberwell Green"
)
southwark21 <- c(
  "Borough & Bankside", "Camberwell Green", "Chaucer", "Faraday",
  "London Bridge & West Bermondsey", "Newington (Southwark)", "North Bermondsey",
  "North Walworth", "Old Kent Road", "Rotherhithe",
  "South Bermondsey", "St George's (Southwark)", "Surrey Docks"
)
lambeth95 <- c("Bishop's", "Town Hall", "Streatham Hill", "Clapham Park", "Clapham Town", "Angell", "Herne Hill", "Ferndale",
               "Larkhall", "Oval", "Prince's", "Stockwell", "Thornton", "Tulse Hill", "Vassall")
lambeth01 <- c(
  "Bishop`s", "Brixton Hill", "Clapham Common", "Clapham Town", "Coldharbour", "Ferndale",
  "Herne Hill", "Larkhall", "Oval", "Prince`s", "Stockwell", "Thornton", "Tulse Hill", "Vassall"
)
lambeth11 <- c(
  "Bishop's", "Brixton Hill", "Clapham Common", "Clapham Town", "Coldharbour", "Ferndale",
  "Herne Hill", "Larkhall", "Oval", "Prince's", "Stockwell", "Thornton", "Tulse Hill", "Vassall"
)
lambeth21 <- c(
  "Waterloo & South Bank", "Vauxhall (Lambeth)", "Kennington (Lambeth)", "Oval",
  "Stockwell West & Larkhall", "Stockwell East", "Myatt's Fields", "Clapham Town",
  "Clapham East", "Clapham Common & Abbeville", "Brixton Acre Lane", "Brixton North",
  "Brixton Rush Common", "Clapham Park", "Brixton Windrush",
  "Herne Hill & Loughborough Junction", "St Martin's (Lambeth)"
)

# Valid LSOAs  (Just for me to read)
valid_lsoas_southwark <- c(
  # Cathedrals
  "E01003927", "E01003929", "E01003934", "E01003935", "E01003928",
  "E01003930", "E01003931", "E01003932", "E01003933",

  # Chaucer
  "E01003939", "E01003938", "E01003940", "E01003941", "E01003942",
  "E01003936", "E01003937", "E01003943", "E01003944",

  # Grange
  "E01003976", "E01003982", "E01003975", "E01003978", "E01003979",
  "E01003981", "E01003977", "E01003980",

  # Riverside
  "E01004025", "E01004026", "E01004027", "E01004022", "E01004023",
  "E01004028", "E01004024",

  # Rotherhithe
  "E01004029", "E01004032", "E01004030", "E01004031", "E01004033",
  "E01004034", "E01004036", "E01004035",

  # Surrey Docks
  "E01004053", "E01004054", "E01004055", "E01004056", "E01004057",
  "E01004058", "E01004059", "E01004060",

  # Newington
  "E01003994", "E01003992", "E01003995", "E01003996", "E01003998",
  "E01003999", "E01003991",

  # East Walworth
  "E01003959", "E01003960", "E01003961", "E01003962", "E01003965",
  "E01003964", "E01003966", "E01003963",

  # South Bermondsey
  "E01004037", "E01004038", "E01004042", "E01004043", "E01004039",
  "E01004040", "E01004041", "E01004044",

  # Faraday
  "E01003968", "E01003971", "E01003974", "E01003967", "E01003970",
  "E01003972", "E01003973", "E01003969",

  # Camberwell Green
  "E01003923", "E01003918", "E01003925", "E01003919", "E01003920",
  "E01003921", "E01003922", "E01003924", "E01003926"
)

valid_lsoas_lambeth <- c(
  # Bishop's
  "E01003012", "E01003013", "E01003014", "E01003016", "E01003017", "E01003015",

  # Brixton Hill
  "E01003019", "E01003020", "E01003018", "E01003021", "E01003022",
  "E01003023", "E01003024", "E01003025",

  # Clapham Common
  "E01003029", "E01003032", "E01003026", "E01003027", "E01003028",
  "E01003030", "E01003033", "E01003031",

  # Clapham Town
  "E01003034", "E01003035", "E01003036", "E01003037", "E01003038",
  "E01003039", "E01003040", "E01003042", "E01003041",

  # Coldharbour
  "E01003046", "E01003048", "E01003045", "E01003047", "E01003049",
  "E01003050", "E01003052", "E01003043", "E01003044", "E01003051",

  # Ferndale
  "E01003059", "E01003060", "E01003061", "E01003053", "E01003054",
  "E01003056", "E01003058", "E01003055", "E01003057",

  # Herne Hill
  "E01003075", "E01003072", "E01003073", "E01003076", "E01003077",
  "E01003078", "E01003071", "E01003074",

  # Larkhall
  "E01003089", "E01003091", "E01003092", "E01003088", "E01003093",
  "E01003094", "E01003096", "E01003090", "E01003095",

  # Oval
  "E01003101", "E01003102", "E01003103", "E01003104", "E01003098",
  "E01003099", "E01003100", "E01003097",

  # Prince's
  "E01003108", "E01003110", "E01003111", "E01003112", "E01003105",
  "E01003106", "E01003107", "E01003109",

  # Stockwell
  "E01003122", "E01003129", "E01003121", "E01003123", "E01003124",
  "E01003125", "E01003126", "E01003128", "E01003127",

  # Thornton
  "E01003159", "E01003160", "E01003162", "E01003156", "E01003157",
  "E01003158", "E01003161", "E01003163",

  # Tulse Hill
  "E01003176", "E01003171", "E01003173", "E01003177", "E01003178",
  "E01003172", "E01003174", "E01003175", "E01003179",

  # Vassall
  "E01003180", "E01003183", "E01003181", "E01003184", "E01003185",
  "E01003186", "E01003187", "E01003182", "E01003188"
)

# Actual code to put in R for creating the filter
valid_lsoas <- c(
  "E01003927", "E01003929", "E01003934", "E01003935", "E01003928", "E01003930", "E01003931", "E01003932", "E01003933",
  "E01003939", "E01003938", "E01003940", "E01003941", "E01003942", "E01003936", "E01003937", "E01003943", "E01003944",
  "E01003976", "E01003982", "E01003975", "E01003978", "E01003979", "E01003981", "E01003977", "E01003980",
  "E01004025", "E01004026", "E01004027", "E01004022", "E01004023", "E01004028", "E01004024",
  "E01004029", "E01004032", "E01004030", "E01004031", "E01004033", "E01004034", "E01004036", "E01004035",
  "E01004053", "E01004054", "E01004055", "E01004056", "E01004057", "E01004058", "E01004059", "E01004060",
  "E01003994", "E01003992", "E01003995", "E01003996", "E01003998", "E01003999", "E01003991",
  "E01003959", "E01003960", "E01003961", "E01003962", "E01003965", "E01003964", "E01003966", "E01003963",
  "E01004037", "E01004038", "E01004042", "E01004043", "E01004039", "E01004040", "E01004041", "E01004044",
  "E01003968", "E01003971", "E01003974", "E01003967", "E01003970", "E01003972", "E01003973", "E01003969",
  "E01003923", "E01003918", "E01003925", "E01003919", "E01003920", "E01003921", "E01003922", "E01003924", "E01003926",
  "E01003012", "E01003013", "E01003014", "E01003016", "E01003017", "E01003015",
  "E01003019", "E01003020", "E01003018", "E01003021", "E01003022", "E01003023", "E01003024", "E01003025",
  "E01003029", "E01003032", "E01003026", "E01003027", "E01003028", "E01003030", "E01003033", "E01003031",
  "E01003034", "E01003035", "E01003036", "E01003037", "E01003038", "E01003039", "E01003040", "E01003042", "E01003041",
  "E01003046", "E01003048", "E01003045", "E01003047", "E01003049", "E01003050", "E01003052", "E01003043", "E01003044", "E01003051",
  "E01003059", "E01003060", "E01003061", "E01003053", "E01003054", "E01003056", "E01003058", "E01003055", "E01003057",
  "E01003075", "E01003072", "E01003073", "E01003076", "E01003077", "E01003078", "E01003071", "E01003074",
  "E01003089", "E01003091", "E01003092", "E01003088", "E01003093", "E01003094", "E01003096", "E01003090", "E01003095",
  "E01003101", "E01003102", "E01003103", "E01003104", "E01003098", "E01003099", "E01003100", "E01003097",
  "E01003108", "E01003110", "E01003111", "E01003112", "E01003105", "E01003106", "E01003107", "E01003109",
  "E01003122", "E01003129", "E01003121", "E01003123", "E01003124", "E01003125", "E01003126", "E01003128", "E01003127",
  "E01003159", "E01003160", "E01003162", "E01003156", "E01003157", "E01003158", "E01003161", "E01003163",
  "E01003176", "E01003171", "E01003173", "E01003177", "E01003178", "E01003172", "E01003174", "E01003175", "E01003179",
  "E01003180", "E01003183", "E01003181", "E01003184", "E01003185", "E01003186", "E01003187", "E01003182", "E01003188"
)

# Filter dataset excluding <18y and unplausible years like >200 and exclusing if date is within STOP STROKE period *and* not in a valid LSOA 
slsr_clean <- dataset_20250422 %>%
  filter(!is.na(strk_d), !is.na(strk_m), !is.na(strk_y)) %>%
  mutate(
    dtstrk = as.Date(paste(strk_y, strk_m, strk_d, sep = "-"), format = "%Y-%m-%d"),
    year = year(dtstrk)
  ) %>%
  filter(
    !is.na(sex),
    !is.na(age),
    age >= 18 & age <= 200,  
    !(dtstrk >= as.Date("2004-11-15") & dtstrk <= as.Date("2007-12-31") &
      !(lsoa11 %in% valid_lsoas))
  )


# Make sure they are all ICD-10 strokes

# Load the new dataset
symdur_data <- read_csv("/Users/mariacamilapantojaruiz/Library/Mobile Documents/com~apple~CloudDocs/Documents/PhD/Incidence 30 years/symdur.csv")


# Make sure IDs are character to match
symdur_data <- symdur_data %>% mutate(id = as.character(id))
slsr_clean <- slsr_clean %>% mutate(id = as.character(id))

# Step 1: Filter only ICD-10 strokes from 2022 onwards
ids_icd10 <- symdur_data %>%
  filter(symdur == 3) %>%
  pull(id)

# Step 2: Keep all cases before 2022, but apply filter from 2022 onwards
slsr_clean_icd10 <- slsr_clean %>%
  filter(
    year < 2022 | (year >= 2022 & id %in% ids_icd10)
  )


# Identify stroke_type in ischaemic, PICH and SAH
slsr_clean_icd10 <- slsr_clean_icd10 %>%
  mutate(
    stroke_type = case_when(
      # Primary: OCSP classification
      subtype %in% 1:5 ~ "Ischaemic",
      subtype == 6 ~ "PICH",
      subtype == 7 ~ "SAH",

      # Fallback 1: stroke subtype
      is.na(subtype) & strksub == 1 ~ "Ischaemic",
      is.na(subtype) & strksub == 2 ~ "PICH",
      is.na(subtype) & strksub == 3 ~ "SAH",

      # Fallback 2: infarct/haemorrhage
      is.na(subtype) & is.na(strksub) & stroke == 1 ~ "Ischaemic",

      # Still unknown
      TRUE ~ "Unknown"
    )
  )

# Extract ethnicity from the cleaned dataset
slsr_clean_icd10 <- slsr_clean_icd10 %>%
  mutate(
    ethnicity = case_when(
      eth6cat == 1 ~ "White",
      eth6cat == 2 ~ "Black Caribbean",
      eth6cat == 3 ~ "Black African",
      eth6cat == 4 ~ "Black Other",
      eth6cat == 5 ~ "Other",
      TRUE ~ NA_character_
    )
  ) %>%
  filter(!is.na(ethnicity))

## ==== Fixing the "Others" problem ===
## Import Eva's Dataset
SES_inequality_Dec_24 <- read_dta("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/PhD/Incidence 30 years/SES inequality Dec 24.dta"

library(dplyr)
# Counting
slsr_clean_icd10 %>%
    filter(strk_y >= 1995, strk_y <= 1995, eth6cat == 5) %>%
    summarise(n_other = n())

ids_others_1995_old <- slsr_clean_icd10 %>%
  filter(strk_y == 1995, eth6cat == 5) %>%
  pull(id)
ids_others_1995_new <- SES_inequality_Dec_24 %>%
  filter(strk_y == 1995, eth6cat == 5) %>%
  pull(id)

# Find mismatches (those in old dataset but not in new "Others")
mismatched_ids <- setdiff(ids_others_1995_old, ids_others_1995_new)

# Check their new eth6cat values in SES_inequality_Dec_24
SES_inequality_Dec_24 %>%
  filter(id %in% mismatched_ids) %>%
  count(eth6cat)

library(dplyr)

# Create a lookup table with id and the corrected eth6cat
eth6cat_lookup <- SES_inequality_Dec_24 %>%
  select(id, corrected_eth6cat = eth6cat)

# Join the corrected values into slsr_clean and replace eth6cat
slsr_clean_icd10 <- slsr_clean_icd10 %>%
  mutate(id = as.numeric(id))

slsr_clean_icd10 <- slsr_clean_icd10 %>%
  left_join(eth6cat_lookup, by = "id") %>%
  mutate(
    eth6cat = if_else(!is.na(corrected_eth6cat), corrected_eth6cat, eth6cat)
  ) %>%
  select(-corrected_eth6cat)  # Remove the temporary column

# Now lets check White people
# Standarise Id format
slsr_clean_icd10 <- slsr_clean_icd10 %>%
  mutate(id = as.character(id))

SES_inequality_Dec_24 <- SES_inequality_Dec_24 %>%
  mutate(id = as.character(id))

# Extract IDs labeled White in both
ids_white_old <- slsr_clean_icd10 %>%
  filter(strk_y == 1995, eth6cat == 1) %>%
  pull(id)

ids_white_new <- SES_inequality_Dec_24 %>%
  filter(strk_y == 1995, eth6cat == 1) %>%
  pull(id)

# Compare them
setdiff(ids_white_old, ids_white_new)
setdiff(ids_white_new, ids_white_old)

# I'm re-writing the eth6cat of my dataset with Eva's
# Check IDs match
slsr_clean_icd10 <- slsr_clean_icd10 %>%
  mutate(id = as.character(id))
SES_inequality_Dec_24 <- SES_inequality_Dec_24 %>%
  mutate(id = as.character(id))

# Join and overwrite
slsr_clean_icd10 <- slsr_clean_icd10 %>%
  left_join(SES_inequality_Dec_24 %>% select(id, corrected_eth6cat = eth6cat), by = "id") %>%
  mutate(
    eth6cat = if_else(!is.na(corrected_eth6cat), corrected_eth6cat, eth6cat)
  ) %>%
  select(-corrected_eth6cat)

# There are some patients that have no stroke classification on my dataset, so lets check if they have classification on Eva's
slsr_clean_icd10 %>%
  count(stroke_type) %>%
  filter(!stroke_type %in% c("Ischaemic", "PICH", "SAH"))

# Identify the 632 stroke cases from the dataset
unknown_ids <- slsr_clean_icd10 %>%
  filter(stroke_type == "Unknown") %>%
  pull(id)

# Filter Eva's dataset for matching IDs
eva_classified <- SES_inequality_Dec_24 %>%
  filter(id %in% unknown_ids) %>%
  mutate(
    resolved_stroke_type = case_when(
      strksub == 1 ~ "Ischaemic",
      strksub == 2 ~ "PICH",
      strksub == 3 ~ "SAH",
      TRUE ~ "Unknown"
    )
  )

# Count how many can be resolved
eva_classified %>%
  count(resolved_stroke_type)

# Lets resolve these:
# Keep only the resolved cases (not Unknown)
resolved_updates <- eva_classified %>%
  filter(resolved_stroke_type != "Unknown") %>%
  select(id, resolved_stroke_type)

# Update stroke_type in slsr_clean_icd10
slsr_clean_icd10 <- slsr_clean_icd10 %>%
  left_join(resolved_updates, by = "id") %>%
  mutate(
    stroke_type = if_else(!is.na(resolved_stroke_type), resolved_stroke_type, stroke_type)
  ) %>%
  select(-resolved_stroke_type)  # clean up temporary column

# Count how many unknown
slsr_clean_icd10 %>%
  count(stroke_type) %>%
  filter(!stroke_type %in% c("Ischaemic", "PICH", "SAH"))

# Lets try solving them
slsr_clean_icd10 <- slsr_clean_icd10 %>%
  mutate(
    stroke_type = case_when(
      stroke_type != "Unknown" ~ stroke_type,  # keep existing classifications
      subtype %in% 1:5 ~ "Ischaemic",          # OCSP ischaemic
      subtype == 6     ~ "PICH",
      subtype == 7     ~ "SAH",
      strksub == 1     ~ "Ischaemic",          # strksub = 1: infarction
      strksub == 2     ~ "PICH",               # primary intracerebral
      strksub == 3     ~ "SAH",
      TRUE             ~ "Unknown"             # unresolved stays as Unknown
    )
  )

# ------------------------------------------------------------------
# Table 1
# ------------------------------------------------------------------

# Rebuild the ethnicity in slsr_clean_icd10
slsr_clean_icd10 <- slsr_clean_icd10 %>%
  mutate(ethnicity_group = case_when(
    eth6cat == 1 ~ "White",
    eth6cat == 2 ~ "Black Caribbean",
    eth6cat == 3 ~ "Black African",
    eth6cat %in% c(4, 5) ~ "Other",
    eth6cat == 99 ~ "Unknown",
    TRUE ~ NA_character_
  ))

# Add the population
pop_full_interpolated_with_imd <- read.csv("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/PhD/Incidence 30 years/Census check/IMD checked_v2/pop_full_interpolated_with_imd.csv")
View(pop_full_interpolated_with_imd)

# New pop_summary
# Step 1: Summarise person-years
new_pop_summary <- pop_full_interpolated_with_imd %>%
  filter(year >= 1995 & year <= 2024) %>%
  mutate(ethnicity_group = case_when(
    ethnicity_grouped == "White" ~ "White",
    ethnicity_grouped == "Black Caribbean" ~ "Black Caribbean",
    ethnicity_grouped == "Black African" ~ "Black African",
    ethnicity_grouped %in% c("Black Other", "Other") ~ "Other",
    TRUE ~ NA_character_
  )) %>%
  filter(!is.na(ethnicity_group)) %>%
  group_by(ethnicity_group) %>%
  summarise(person_years = round(sum(pop_count_interp, na.rm = TRUE), 1), .groups = "drop")

# Step 2: Add overall total
overall_py_new <- new_pop_summary %>%
  summarise(person_years = sum(person_years)) %>%
  mutate(ethnicity_group = "All")

# Combine
new_pop_summary <- bind_rows(overall_py_new, new_pop_summary)

# Total strokes per ethnicity
total_strokes <- slsr_clean_icd10 %>%
  mutate(ethnicity_group = case_when(
    eth6cat == 1 ~ "White",
    eth6cat == 2 ~ "Black Caribbean",
    eth6cat == 3 ~ "Black African",
    eth6cat %in% c(4, 5) ~ "Other",
    TRUE ~ NA_character_
  )) %>%
  filter(!is.na(ethnicity_group)) %>%
  count(ethnicity_group, name = "stroke_total")

# Add overall
overall_strokes <- total_strokes %>%
  summarise(stroke_total = sum(stroke_total)) %>%
  mutate(ethnicity_group = "All")

total_strokes <- bind_rows(overall_strokes, total_strokes)

# Stroke subtype distribution
subtype_distribution <- slsr_clean_icd10 %>%
  filter(stroke_type %in% c("Ischaemic", "PICH", "SAH")) %>%
  mutate(ethnicity_group = case_when(
    eth6cat == 1 ~ "White",
    eth6cat == 2 ~ "Black Caribbean",
    eth6cat == 3 ~ "Black African",
    eth6cat %in% c(4, 5) ~ "Other",
    TRUE ~ NA_character_
  )) %>%
  filter(!is.na(ethnicity_group)) %>%
  count(ethnicity_group, stroke_type) %>%
  group_by(ethnicity_group) %>%
  mutate(
    percent = round(100 * n / sum(n), 1),
    label = paste0(percent, "%")
  ) %>%
  ungroup()

# Add overall
overall_subtype <- slsr_clean_icd10 %>%
  filter(stroke_type %in% c("Ischaemic", "PICH", "SAH")) %>%
  count(stroke_type) %>%
  mutate(
    ethnicity_group = "All",
    percent = round(100 * n / sum(n), 1),
    label = paste0(percent, "%")
  )

subtype_distribution <- bind_rows(subtype_distribution, overall_subtype)

# Recalculate incidence rates with new population
incidence_rates_new <- subtype_distribution %>%
  select(ethnicity_group, stroke_type, n) %>%
  left_join(new_pop_summary, by = "ethnicity_group") %>%
  mutate(rate_per_100k = round(n / person_years * 100000, 1)) %>%
  select(ethnicity_group, stroke_type, rate_per_100k)

# Mean age at first stroke
age_summary <- slsr_clean_icd10 %>%
  mutate(ethnicity_group = case_when(
    eth6cat == 1 ~ "White",
    eth6cat == 2 ~ "Black Caribbean",
    eth6cat == 3 ~ "Black African",
    eth6cat %in% c(4, 5) ~ "Other",
    TRUE ~ NA_character_
  )) %>%
  filter(!is.na(ethnicity_group)) %>%
  group_by(ethnicity_group) %>%
  summarise(
    mean_age = round(mean(age, na.rm = TRUE), 1),
    sd_age = round(sd(age, na.rm = TRUE), 1),
    age_label = paste0(mean_age, " (", sd_age, ")"),
    .groups = "drop"
  )

# Add overall
age_all <- slsr_clean_icd10 %>%
  summarise(
    mean_age = round(mean(age, na.rm = TRUE), 1),
    sd_age = round(sd(age, na.rm = TRUE), 1)
  ) %>%
  mutate(
    ethnicity_group = "All",
    age_label = paste0(mean_age, " (", sd_age, ")")
  )

age_summary <- bind_rows(age_all, age_summary) %>%
  select(ethnicity_group, age_label)


## Summarise in a table
library(dplyr)
library(tidyr)

# Person-years
person_years_wide <- new_pop_summary %>%
  pivot_wider(names_from = ethnicity_group, values_from = person_years) %>%
  mutate(Measure = "Source population (person-years)")

# Total strokes by ethnicity group
total_strokes <- slsr_clean_icd10 %>%
  mutate(ethnicity_group = case_when(
    eth6cat == 1 ~ "White",
    eth6cat == 2 ~ "Black Caribbean",
    eth6cat == 3 ~ "Black African",
    eth6cat %in% c(4, 5) ~ "Other",
    TRUE ~ NA_character_
  )) %>%
  filter(!is.na(ethnicity_group)) %>%
  count(ethnicity_group, name = "stroke_total")

# Add overall total
overall_strokes <- total_strokes %>%
  summarise(stroke_total = sum(stroke_total)) %>%
  mutate(ethnicity_group = "All")

# Combine
total_strokes <- bind_rows(overall_strokes, total_strokes)

# Pivot to wide format for the summary table
total_strokes_wide <- total_strokes %>%
  pivot_wider(names_from = ethnicity_group, values_from = stroke_total) %>%
  mutate(Measure = "All strokes") %>%
  select(Measure, All, White, `Black African`, `Black Caribbean`, Other)

# Age at first stroke
age_summary_wide <- age_summary %>%
  pivot_wider(names_from = ethnicity_group, values_from = age_label) %>%
  mutate(Measure = "Age at first stroke (mean ± SD)")

# Stroke subtype n (%)
subtype_formatted <- subtype_distribution %>%
  mutate(label_n = paste0(n, " (", label, ")")) %>%
  select(ethnicity_group, stroke_type, label_n) %>%
  pivot_wider(names_from = ethnicity_group, values_from = label_n) %>%
  mutate(Measure = paste0("Subtype – ", stroke_type)) %>%
  select(-stroke_type)

# Crude incidence
incidence_formatted <- incidence_rates_new %>%
  pivot_wider(names_from = ethnicity_group, values_from = rate_per_100k) %>%
  mutate(Measure = paste0("Incidence – ", stroke_type)) %>%
  select(-stroke_type)

# Combine and order
# Helper: Convert all columns except Measure to character
coerce_to_char <- function(df) {
  df %>%
    mutate(across(-Measure, as.character))
}

# Apply fix and combine
crude_summary_table <- bind_rows(
  coerce_to_char(person_years_wide),
  coerce_to_char(total_strokes_wide),
  coerce_to_char(age_summary_wide),
  coerce_to_char(subtype_formatted),
  coerce_to_char(incidence_formatted)
) %>%
  select(Measure, All, White, `Black African`, `Black Caribbean`, Other)

write_xlsx(crude_summary_table, "crude_summary_table.xlsx")



# ------------------------------------------------------------------
# Table 2
# ------------------------------------------------------------------
library(dplyr)
library(tidyr)
library(readr)
library(tibble)
library(purrr)
library(writexl)
library(officer)
library(flextable)

# Prepare the population ages
assign_age_group <- function(age) {
  case_when(
    age >= 18 & age < 25 ~ "18-24",
    age >= 25 & age < 30 ~ "25-29",
    age >= 30 & age < 35 ~ "30-34",
    age >= 35 & age < 40 ~ "35-39",
    age >= 40 & age < 45 ~ "40-44",
    age >= 45 & age < 50 ~ "45-49",
    age >= 50 & age < 55 ~ "50-54",
    age >= 55 & age < 60 ~ "55-59",
    age >= 60 & age < 65 ~ "60-64",
    age >= 65 & age < 70 ~ "65-69",
    age >= 70 & age < 75 ~ "70-74",
    age >= 75 ~ "75+",
    TRUE ~ NA_character_
  )
}

slsr_clean_icd10_prepped <- slsr_clean_icd10 %>%
  mutate(
    ethnicity_group = case_when(
      eth6cat == 1 ~ "White",
      eth6cat == 2 ~ "Black Caribbean",
      eth6cat == 3 ~ "Black African",
      eth6cat %in% c(4, 5) ~ "Other",
      TRUE ~ NA_character_
    ),
    period = case_when(
      year >= 1995 & year <= 1999 ~ "1995-1999",
      year >= 2000 & year <= 2004 ~ "2000-2004",
      year >= 2005 & year <= 2009 ~ "2005-2009",
      year >= 2010 & year <= 2014 ~ "2010-2014",
      year >= 2015 & year <= 2019 ~ "2015-2019",
      year >= 2020 & year <= 2024 ~ "2020-2024",
      TRUE ~ NA_character_
    ),
    age_group = assign_age_group(age)
  ) %>%
  filter(!is.na(age_group), !is.na(ethnicity_group), !is.na(stroke_type), !is.na(sex))

  # Define ESP
esp2013_collapsed <- tibble::tribble(
  ~age_group, ~sex,     ~esp_count,
  "18-24",    "Male",   8200,
  "25-29",    "Male",   6000,
  "30-34",    "Male",   6500,
  "35-39",    "Male",   7000,
  "40-44",    "Male",   7000,
  "45-49",    "Male",   7000,
  "50-54",    "Male",   7000,
  "55-59",    "Male",   6500,
  "60-64",    "Male",   6000,
  "65-69",    "Male",   5500,
  "70-74",    "Male",   5000,
  "75+",      "Male",   9000,
  "18-24",    "Female", 8200,
  "25-29",    "Female", 6000,
  "30-34",    "Female", 6500,
  "35-39",    "Female", 7000,
  "40-44",    "Female", 7000,
  "45-49",    "Female", 7000,
  "50-54",    "Female", 7000,
  "55-59",    "Female", 6500,
  "60-64",    "Female", 6000,
  "65-69",    "Female", 5500,
  "70-74",    "Female", 5000,
  "75+",      "Female", 9000
)

# Count strokes by period × age_group × sex × ethnicity_group
stroke_counts_total <- slsr_clean_icd10_prepped %>%
  count(period, age_group, sex, ethnicity_group, name = "stroke_n")
write_xlsx(stroke_counts_total, "stroke_counts_total.xlsx")

stroke_counts_total <- slsr_clean_icd10_prepped %>%
  mutate(
    sex = case_when(
      sex == 1 ~ "Male",
      sex == 2 ~ "Female",
      sex == "M" ~ "Male",
      sex == "F" ~ "Female",
      TRUE ~ as.character(sex)  # keeps character if already valid
    )
  ) %>%
  count(period, age_group, sex, ethnicity_group, name = "stroke_n")

# Prepare population person-years -> collapse 18-24 into 1 group and also >75 in 75+
pop_person_years <- pop_full_interpolated_with_imd %>%
  mutate(
    age_group = case_when(
      age_group %in% c("18-19", "20-24") ~ "18-24",
      age_group == "25-29" ~ "25-29",
      age_group == "30-34" ~ "30-34",
      age_group == "35-39" ~ "35-39",
      age_group == "40-44" ~ "40-44",
      age_group == "45-49" ~ "45-49",
      age_group == "50-54" ~ "50-54",
      age_group == "55-59" ~ "55-59",
      age_group == "60-64" ~ "60-64",
      age_group == "65-69" ~ "65-69",
      age_group == "70-74" ~ "70-74",
      age_group %in% c("75-79", "80-84", "85+") ~ "75+",
      TRUE ~ NA_character_
    ),
    ethnicity_group = case_when(
      ethnicity_grouped == "White" ~ "White",
      ethnicity_grouped == "Black Caribbean" ~ "Black Caribbean",
      ethnicity_grouped == "Black African" ~ "Black African",
      ethnicity_grouped %in% c("Black Other", "Other") ~ "Other",
      TRUE ~ NA_character_
    ),
    period = case_when(
      year >= 1995 & year <= 1999 ~ "1995-1999",
      year >= 2000 & year <= 2004 ~ "2000-2004",
      year >= 2005 & year <= 2009 ~ "2005-2009",
      year >= 2010 & year <= 2014 ~ "2010-2014",
      year >= 2015 & year <= 2019 ~ "2015-2019",
      year >= 2020 & year <= 2024 ~ "2020-2024",
      TRUE ~ NA_character_
    )
  ) %>%
  filter(!is.na(age_group), !is.na(ethnicity_group), !is.na(sex), !is.na(period)) %>%
  group_by(period, age_group, sex, ethnicity_group) %>%
  summarise(person_years = sum(pop_count_interp, na.rm = TRUE), .groups = "drop")

# Join
  crude_rates <- left_join(stroke_counts_total, pop_person_years,
                         by = c("period", "age_group", "sex", "ethnicity_group")) %>%
  mutate(
    stroke_n = replace_na(stroke_n, 0),  # fill in 0 for cells with no strokes
    rate_per_100k = (stroke_n / person_years) * 100000
  )

# ASIR
standardised_rates <- crude_rates %>%
  left_join(esp2013_collapsed, by = c("age_group", "sex")) %>%
  mutate(
    weighted_cases = rate_per_100k * esp_count  # expected strokes per ESP population
  ) %>%
  group_by(period, ethnicity_group) %>%
  summarise(
    asir = sum(weighted_cases, na.rm = TRUE) / 200000,  # divide by total ESP
    .groups = "drop"
  ) %>%
  mutate(asir = round(asir, 1))  # optional rounding

# Using gamma distribution method por CIs
standardised_rates_ci <- crude_rates %>%
  left_join(esp2013_collapsed, by = c("age_group", "sex")) %>%
  mutate(
    stroke_n = replace_na(stroke_n, 0),
    weight = esp_count / 200000,
    weighted_rate = rate_per_100k * esp_count,
    weighted_var = (stroke_n * (esp_count^2)) / (person_years^2)
  ) %>%
  group_by(period, ethnicity_group) %>%
  summarise(
    asir = sum(weighted_rate, na.rm = TRUE) / 200000,
    var_asir = sum(weighted_var, na.rm = TRUE) / (200000^2),
    se_asir = sqrt(var_asir),
    lower_ci = asir - 1.96 * se_asir,
    upper_ci = asir + 1.96 * se_asir,
    .groups = "drop"
  ) %>%
  mutate(
    asir = round(asir, 1),
    lower_ci = round(lower_ci, 1),
    upper_ci = round(upper_ci, 1)
  )

  -> these are too narrow

# Get the CIs using a Poisson-based methods
You calculated age- and sex-standardised stroke incidence rates (ASIRs) per ethnic group and 5-year period, using direct standardisation and the European Standard Population 2013 (ESP2013) as the reference population.

Then, to get 95% confidence intervals, you used a Poisson-based method that accounts for uncertainty in the observed stroke counts across age–sex strata.

  esp_adjusted <- crude_rates %>%
  left_join(esp2013_collapsed, by = c("age_group", "sex")) %>%
  mutate(
    stroke_n = replace_na(stroke_n, 0),
    weighted_rate = rate_per_100k * esp_count,
    wi_squared_di = (esp_count^2) * stroke_n
  ) %>%
  group_by(period, ethnicity_group) %>%
  summarise(
    asir = sum(weighted_rate, na.rm = TRUE) / 200000,
    se_asir = sqrt(sum(wi_squared_di, na.rm = TRUE)) / 200000,
    lower_ci = asir - 1.96 * se_asir,
    upper_ci = asir + 1.96 * se_asir,
    .groups = "drop"
  ) %>%
  mutate(
    asir = round(asir, 1),
    lower_ci = round(pmax(0, lower_ci), 1),
    upper_ci = round(upper_ci, 1)
  )


# Still narrow
esp_adjusted_conservative <- crude_rates %>%
  left_join(esp2013_collapsed, by = c("age_group", "sex")) %>%
  filter(!is.na(person_years) & person_years > 0) %>%
  mutate(
    stroke_n = replace_na(stroke_n, 0),
    crude_rate = stroke_n / person_years,  # actual rate, not per 100k
    weighted_rate = crude_rate * esp_count,
    weighted_var = (esp_count^2) * (stroke_n / person_years^2)
  ) %>%
  group_by(period, ethnicity_group) %>%
  summarise(
    asir = sum(weighted_rate) / 200000 * 100000,  # now multiply by 100k here
    se_asir = sqrt(sum(weighted_var)) / 200000 * 100000,
    lower_ci = pmax(0, asir - 1.96 * se_asir),
    upper_ci = asir + 1.96 * se_asir,
    .groups = "drop"
  ) %>%
  mutate(
    asir = round(asir, 1),
    lower_ci = round(lower_ci, 1),
    upper_ci = round(upper_ci, 1)
  )

# Missing calculation for the entire population
# First, collapse all ethnicities for total population ASIR
# First, create complete stroke+population table (including zeros)
crude_rates_all_strata <- pop_person_years %>%
  left_join(stroke_counts_total, by = c("period", "age_group", "sex", "ethnicity_group")) %>%
  mutate(
    stroke_n = replace_na(stroke_n, 0)
  )

# Collapse all ethnicities
crude_rates_total_total <- crude_rates_all_strata %>%
  group_by(period, age_group, sex) %>%
  summarise(
    stroke_n = sum(stroke_n),
    person_years = sum(person_years),
    .groups = "drop"
  ) %>%
  mutate(
    crude_rate = stroke_n / person_years  # not per 100k
  )

# Join with ESP and calculate ASIR + correct 95% CI
standardised_rates_total <- crude_rates_total %>%
  left_join(esp2013_collapsed, by = c("age_group", "sex")) %>%
  filter(!is.na(person_years) & person_years > 0) %>%
  mutate(
    weighted_rate = crude_rate * esp_count,
    weighted_var = (esp_count^2) * (stroke_n / person_years^2)
  ) %>%
  group_by(period) %>%
  summarise(
    asir = sum(weighted_rate) / 200000 * 100000,
    se_asir = sqrt(sum(weighted_var)) / 200000 * 100000,
    lower_ci = pmax(0, asir - 1.96 * se_asir),
    upper_ci = asir + 1.96 * se_asir,
    .groups = "drop"
  ) %>%
  mutate(
    asir = round(asir, 1),
    lower_ci = round(lower_ci, 1),
    upper_ci = round(upper_ci, 1)
  )
  
# Formating a nice table
# Bring them together
all_asir_table <- bind_rows(esp_adjusted, standardised_rates_total_named)

# And clean it
all_asir_table <- all_asir_table %>%
  filter(!is.na(period))

# Now create the labels
formatted_asir_table <- all_asir_table %>%
  mutate(
    `ASIR (95% CI)` = paste0(round(asir, 1), " (", round(lower_ci, 1), "–", round(upper_ci, 1), ")")
  )

  # And pivot wide
  asir_table_wide <- formatted_asir_table %>%
  select(ethnicity_group, period, `ASIR (95% CI)`) %>%
  tidyr::pivot_wider(
    names_from = period,
    values_from = `ASIR (95% CI)`
  ) %>%
  arrange(match(ethnicity_group, c("Total", "White", "Black African", "Black Caribbean", "Other"))) %>%
  rename(Ethnicity = ethnicity_group)

write_xlsx(asir_table_wide, "asir_table_wide.xlsx")

# ========== Ischaemic ===============
# Filter
slsr_isch <- slsr_clean_icd10_prepped %>%
  filter(stroke_type == "Ischaemic")

# Stroke counts
stroke_counts_isch <- slsr_isch %>%
  mutate(
    sex = case_when(
      sex == 1 ~ "Male",
      sex == 2 ~ "Female",
      sex == "M" ~ "Male",
      sex == "F" ~ "Female",
      TRUE ~ as.character(sex)
    )
  ) %>%
  count(period, age_group, sex, ethnicity_group, name = "stroke_n")

  # For pop ill use pop_person_years as before

  # Crude rates
  crude_rates_isch <- left_join(stroke_counts_isch, pop_person_years,
                              by = c("period", "age_group", "sex", "ethnicity_group")) %>%
  mutate(
    stroke_n = replace_na(stroke_n, 0),
    rate_per_100k = (stroke_n / person_years) * 100000
  )

# ASIR
esp_adjusted_isch <- crude_rates_isch %>%
  left_join(esp2013_collapsed, by = c("age_group", "sex")) %>%
  filter(!is.na(person_years) & person_years > 0) %>%
  mutate(
    stroke_n = replace_na(stroke_n, 0),
    crude_rate = stroke_n / person_years,
    weighted_rate = crude_rate * esp_count,
    weighted_var = (esp_count^2) * (stroke_n / person_years^2)
  ) %>%
  group_by(period, ethnicity_group) %>%
  summarise(
    asir = sum(weighted_rate) / 200000 * 100000,
    se_asir = sqrt(sum(weighted_var)) / 200000 * 100000,
    lower_ci = pmax(0, asir - 1.96 * se_asir),
    upper_ci = asir + 1.96 * se_asir,
    .groups = "drop"
  ) %>%
  mutate(
    asir = round(asir, 1),
    lower_ci = round(lower_ci, 1),
    upper_ci = round(upper_ci, 1)
  )

  # Add total population
  crude_rates_all_isch <- pop_person_years %>%
  left_join(stroke_counts_isch, by = c("period", "age_group", "sex", "ethnicity_group")) %>%
  mutate(stroke_n = replace_na(stroke_n, 0))

crude_rates_total_isch <- crude_rates_all_isch %>%
  group_by(period, age_group, sex) %>%
  summarise(
    stroke_n = sum(stroke_n),
    person_years = sum(person_years),
    .groups = "drop"
  ) %>%
  mutate(crude_rate = stroke_n / person_years)

standardised_rates_total_isch <- crude_rates_total_isch %>%
  left_join(esp2013_collapsed, by = c("age_group", "sex")) %>%
  filter(!is.na(person_years) & person_years > 0) %>%
  mutate(
    weighted_rate = crude_rate * esp_count,
    weighted_var = (esp_count^2) * (stroke_n / person_years^2)
  ) %>%
  group_by(period) %>%
  summarise(
    asir = sum(weighted_rate) / 200000 * 100000,
    se_asir = sqrt(sum(weighted_var)) / 200000 * 100000,
    lower_ci = pmax(0, asir - 1.96 * se_asir),
    upper_ci = asir + 1.96 * se_asir,
    .groups = "drop"
  ) %>%
  mutate(
    asir = round(asir, 1),
    lower_ci = round(lower_ci, 1),
    upper_ci = round(upper_ci, 1)
  ) %>%
  mutate(ethnicity_group = "Total")

  # Combine and format
  all_asir_isch <- bind_rows(esp_adjusted_isch, standardised_rates_total_isch) %>%
  filter(!is.na(period)) %>%
  mutate(
    `ASIR (95% CI)` = paste0(round(asir, 1), " (", round(lower_ci, 1), "–", round(upper_ci, 1), ")")
  )

asir_isch_table_wide <- all_asir_isch %>%
  select(ethnicity_group, period, `ASIR (95% CI)`) %>%
  pivot_wider(
    names_from = period,
    values_from = `ASIR (95% CI)`
  ) %>%
  arrange(match(ethnicity_group, c("Total", "White", "Black African", "Black Caribbean", "Other"))) %>%
  rename(Ethnicity = ethnicity_group)
  
# ====== PICH and SAH =========
slsr_pich <- slsr_clean_icd10_prepped %>%
  filter(stroke_type == "PICH")

slsr_sah <- slsr_clean_icd10_prepped %>%
  filter(stroke_type == "SAH")

  # PICH
stroke_counts_pich <- slsr_pich %>%
  mutate(
    sex = case_when(
      sex == 1 ~ "Male",
      sex == 2 ~ "Female",
      sex == "M" ~ "Male",
      sex == "F" ~ "Female",
      TRUE ~ as.character(sex)
    )
  ) %>%
  count(period, age_group, sex, ethnicity_group, name = "stroke_n")

# SAH
stroke_counts_sah <- slsr_sah %>%
  mutate(
    sex = case_when(
      sex == 1 ~ "Male",
      sex == 2 ~ "Female",
      sex == "M" ~ "Male",
      sex == "F" ~ "Female",
      TRUE ~ as.character(sex)
    )
  ) %>%
  count(period, age_group, sex, ethnicity_group, name = "stroke_n")

  # PICH
crude_rates_pich <- left_join(stroke_counts_pich, pop_person_years,
                              by = c("period", "age_group", "sex", "ethnicity_group")) %>%
  mutate(
    stroke_n = replace_na(stroke_n, 0),
    rate_per_100k = (stroke_n / person_years) * 100000
  )

# SAH
crude_rates_sah <- left_join(stroke_counts_sah, pop_person_years,
                             by = c("period", "age_group", "sex", "ethnicity_group")) %>%
  mutate(
    stroke_n = replace_na(stroke_n, 0),
    rate_per_100k = (stroke_n / person_years) * 100000
  )

  # PICH
esp_adjusted_pich <- crude_rates_pich %>%
  left_join(esp2013_collapsed, by = c("age_group", "sex")) %>%
  filter(!is.na(person_years) & person_years > 0) %>%
  mutate(
    stroke_n = replace_na(stroke_n, 0),
    crude_rate = stroke_n / person_years,
    weighted_rate = crude_rate * esp_count,
    weighted_var = (esp_count^2) * (stroke_n / person_years^2)
  ) %>%
  group_by(period, ethnicity_group) %>%
  summarise(
    asir = sum(weighted_rate) / 200000 * 100000,
    se_asir = sqrt(sum(weighted_var)) / 200000 * 100000,
    lower_ci = pmax(0, asir - 1.96 * se_asir),
    upper_ci = asir + 1.96 * se_asir,
    .groups = "drop"
  ) %>%
  mutate(
    asir = round(asir, 1),
    lower_ci = round(lower_ci, 1),
    upper_ci = round(upper_ci, 1)
  )

# SAH
esp_adjusted_sah <- crude_rates_sah %>%
  left_join(esp2013_collapsed, by = c("age_group", "sex")) %>%
  filter(!is.na(person_years) & person_years > 0) %>%
  mutate(
    stroke_n = replace_na(stroke_n, 0),
    crude_rate = stroke_n / person_years,
    weighted_rate = crude_rate * esp_count,
    weighted_var = (esp_count^2) * (stroke_n / person_years^2)
  ) %>%
  group_by(period, ethnicity_group) %>%
  summarise(
    asir = sum(weighted_rate) / 200000 * 100000,
    se_asir = sqrt(sum(weighted_var)) / 200000 * 100000,
    lower_ci = pmax(0, asir - 1.96 * se_asir),
    upper_ci = asir + 1.96 * se_asir,
    .groups = "drop"
  ) %>%
  mutate(
    asir = round(asir, 1),
    lower_ci = round(lower_ci, 1),
    upper_ci = round(upper_ci, 1)
  )

  # 6a. Join stroke counts with full population
crude_rates_all_pich <- pop_person_years %>%
  left_join(stroke_counts_pich, by = c("period", "age_group", "sex", "ethnicity_group")) %>%
  mutate(stroke_n = replace_na(stroke_n, 0))

# 6b. Collapse all ethnicities
crude_rates_total_pich <- crude_rates_all_pich %>%
  group_by(period, age_group, sex) %>%
  summarise(
    stroke_n = sum(stroke_n),
    person_years = sum(person_years),
    .groups = "drop"
  ) %>%
  mutate(crude_rate = stroke_n / person_years)

# 6c. Join ESP and calculate ASIR + 95% CI
standardised_rates_total_pich <- crude_rates_total_pich %>%
  left_join(esp2013_collapsed, by = c("age_group", "sex")) %>%
  filter(!is.na(person_years) & person_years > 0) %>%
  mutate(
    weighted_rate = crude_rate * esp_count,
    weighted_var = (esp_count^2) * (stroke_n / person_years^2)
  ) %>%
  group_by(period) %>%
  summarise(
    asir = sum(weighted_rate) / 200000 * 100000,
    se_asir = sqrt(sum(weighted_var)) / 200000 * 100000,
    lower_ci = pmax(0, asir - 1.96 * se_asir),
    upper_ci = asir + 1.96 * se_asir,
    .groups = "drop"
  ) %>%
  mutate(
    ethnicity_group = "Total",
    asir = round(asir, 1),
    lower_ci = round(lower_ci, 1),
    upper_ci = round(upper_ci, 1)
  )

  # 7a. Join stroke counts with full population
crude_rates_all_sah <- pop_person_years %>%
  left_join(stroke_counts_sah, by = c("period", "age_group", "sex", "ethnicity_group")) %>%
  mutate(stroke_n = replace_na(stroke_n, 0))

# 7b. Collapse all ethnicities
crude_rates_total_sah <- crude_rates_all_sah %>%
  group_by(period, age_group, sex) %>%
  summarise(
    stroke_n = sum(stroke_n),
    person_years = sum(person_years),
    .groups = "drop"
  ) %>%
  mutate(crude_rate = stroke_n / person_years)

# 7c. Join ESP and calculate ASIR + 95% CI
standardised_rates_total_sah <- crude_rates_total_sah %>%
  left_join(esp2013_collapsed, by = c("age_group", "sex")) %>%
  filter(!is.na(person_years) & person_years > 0) %>%
  mutate(
    weighted_rate = crude_rate * esp_count,
    weighted_var = (esp_count^2) * (stroke_n / person_years^2)
  ) %>%
  group_by(period) %>%
  summarise(
    asir = sum(weighted_rate) / 200000 * 100000,
    se_asir = sqrt(sum(weighted_var)) / 200000 * 100000,
    lower_ci = pmax(0, asir - 1.96 * se_asir),
    upper_ci = asir + 1.96 * se_asir,
    .groups = "drop"
  ) %>%
  mutate(
    ethnicity_group = "Total",
    asir = round(asir, 1),
    lower_ci = round(lower_ci, 1),
    upper_ci = round(upper_ci, 1)
  )

  # === formatting all in one table ====
# First: add stroke_type label to each table before binding
esp_adjusted_conservative        <- esp_adjusted_conservative        %>% mutate(stroke_type = "Total")
esp_adjusted_isch   <- esp_adjusted_isch   %>% mutate(stroke_type = "Ischaemic")
esp_adjusted_pich   <- esp_adjusted_pich   %>% mutate(stroke_type = "PICH")
esp_adjusted_sah    <- esp_adjusted_sah    %>% mutate(stroke_type = "SAH")

standardised_rates_total_named        <- standardised_rates_total        %>% mutate(ethnicity_group = "Total", stroke_type = "Total")
standardised_rates_total_isch   <- standardised_rates_total_isch   %>% mutate(ethnicity_group = "Total", stroke_type = "Ischaemic")
standardised_rates_total_pich   <- standardised_rates_total_pich   %>% mutate(ethnicity_group = "Total", stroke_type = "PICH")
standardised_rates_total_sah    <- standardised_rates_total_sah    %>% mutate(ethnicity_group = "Total", stroke_type = "SAH")

# Combine all
all_stroke_asir <- bind_rows(
  esp_adjusted_conservative, esp_adjusted_isch, esp_adjusted_pich, esp_adjusted_sah,
  standardised_rates_total_named,
  standardised_rates_total_isch,
  standardised_rates_total_pich,
  standardised_rates_total_sah
)

# Clean and format
all_stroke_asir <- all_stroke_asir %>%
  filter(!is.na(period)) %>%
  mutate(
    `ASIR (95% CI)` = paste0(round(asir, 1), " (", round(lower_ci, 1), "–", round(upper_ci, 1), ")")
  )

# Pivot wide format
asir_table_wide <- all_stroke_asir %>%
  select(ethnicity_group, stroke_type, period, `ASIR (95% CI)`) %>%
  pivot_wider(
    names_from = period,
    values_from = `ASIR (95% CI)`
  ) %>%
  arrange(
    match(ethnicity_group, c("Total", "White", "Black African", "Black Caribbean", "Other")),
    match(stroke_type, c("Total", "Ischaemic", "PICH", "SAH"))
  ) %>%
  rename(
    Ethnicity = ethnicity_group,
    Stroke_Type = stroke_type
  )

# Optional: write to Excel
writexl::write_xlsx(asir_table_wide, "asir_table_by_subtype.xlsx")


# ======= Plot them =======
# Custom colours (from your screenshot selection)
ethnicity_colours <- c(
  "White" = "#E64173",          # bright pink
  "Black African" = "#984EA3",  # deep purple
  "Black Caribbean" = "#FF7F00",# orange
  "Other" = "#377EB8"           # blue
)

ethnicity_shapes <- c(
  "White" = 16,           # circle
  "Black African" = 17,   # triangle
  "Black Caribbean" = 15, # square
  "Other" = 18            # diamond
)

# Plot function
library(ggplot2)
library(dplyr)

ethnic_groups_to_plot <- c("White", "Black African", "Black Caribbean", "Other")

plot_stroke_asir <- function(df, stroke_subtype) {
  df %>%
    filter(
      stroke_type == stroke_subtype,
      ethnicity_group %in% ethnic_groups_to_plot  # this excludes "Total"
    ) %>%
    ggplot(aes(
      x = period, y = asir,
      colour = ethnicity_group,
      shape = ethnicity_group,
      group = ethnicity_group
    )) +
    geom_point(size = 3) +
    geom_line(linewidth = 1) +
    geom_errorbar(aes(ymin = lower_ci, ymax = upper_ci), width = 0.1) +
    scale_colour_manual(values = ethnicity_colours) +
    scale_shape_manual(values = ethnicity_shapes) +
    labs(
      title = paste("Age- and Sex-Standardised Incidence Rates:", stroke_subtype),
      y = "ASIR per 100,000",
      x = "Period",
      colour = "Ethnicity",
      shape = "Ethnicity"
    ) +
    theme_minimal(base_size = 14) +
    theme(
      panel.grid.minor = element_blank(),
      axis.text.x = element_text(angle = 45, hjust = 1)
    )
}

plot_total     <- plot_stroke_asir(all_stroke_asir, "Total")
plot_ischaemic <- plot_stroke_asir(all_stroke_asir, "Ischaemic")
plot_pich      <- plot_stroke_asir(all_stroke_asir, "PICH")
plot_sah       <- plot_stroke_asir(all_stroke_asir, "SAH")

# Show one plot
plot_total
plot_ischaemic
plot_pich
plot_sah


# === Now lets do sex stratified ======
stroke_counts_sex <- slsr_clean_icd10_prepped %>%
  mutate(
    sex = case_when(
      sex == 1 ~ "Male",
      sex == 2 ~ "Female",
      sex == "M" ~ "Male",
      sex == "F" ~ "Female",
      TRUE ~ as.character(sex)
    )
  ) %>%
  count(period, age_group, sex, ethnicity_group, name = "stroke_n")

# Crude
crude_rates_sex <- pop_person_years %>%
  left_join(stroke_counts_sex, by = c("period", "age_group", "sex", "ethnicity_group")) %>%
  mutate(
    stroke_n = replace_na(stroke_n, 0),
    rate_per_100k = (stroke_n / person_years) * 100000
  )

# ESP
esp_adjusted_sex <- crude_rates_sex %>%
  left_join(esp2013_collapsed, by = c("age_group", "sex")) %>%
  filter(!is.na(person_years) & person_years > 0) %>%
  mutate(
    stroke_n = replace_na(stroke_n, 0),
    crude_rate = stroke_n / person_years,
    weighted_rate = crude_rate * esp_count,
    weighted_var = (esp_count^2) * (stroke_n / person_years^2)
  ) %>%
  group_by(period, sex, ethnicity_group) %>%
  summarise(
    asir = sum(weighted_rate) / 200000 * 100000,
    se_asir = sqrt(sum(weighted_var)) / 200000 * 100000,
    lower_ci = pmax(0, asir - 1.96 * se_asir),
    upper_ci = asir + 1.96 * se_asir,
    .groups = "drop"
  ) %>%
  mutate(
    stroke_type = "Total",
    asir = round(asir, 1),
    lower_ci = round(lower_ci, 1),
    upper_ci = round(upper_ci, 1),
    `ASIR (95% CI)` = paste0(asir, " (", lower_ci, "–", upper_ci, ")")
  )

# === Sex subtypes =====

# Ischaemic
slsr_isch_sex <- slsr_clean_icd10_prepped %>%
  filter(stroke_type == "Ischaemic") %>%
  mutate(
    sex = case_when(
      sex == 1 ~ "Male",
      sex == 2 ~ "Female",
      sex == "M" ~ "Male",
      sex == "F" ~ "Female",
      TRUE ~ as.character(sex)
    )
  )
stroke_counts_isch_sex <- slsr_isch_sex %>%
  count(period, age_group, sex, ethnicity_group, name = "stroke_n")
crude_rates_isch_sex <- pop_person_years %>%
  left_join(stroke_counts_isch_sex, by = c("period", "age_group", "sex", "ethnicity_group")) %>%
  mutate(
    stroke_n = replace_na(stroke_n, 0),
    rate_per_100k = stroke_n / person_years * 100000
  )

esp_adjusted_isch_sex <- crude_rates_isch_sex %>%
  left_join(esp2013_collapsed, by = c("age_group", "sex")) %>%
  filter(!is.na(person_years) & person_years > 0) %>%
  mutate(
    crude_rate = stroke_n / person_years,
    weighted_rate = crude_rate * esp_count,
    weighted_var = (esp_count^2) * (stroke_n / person_years^2)
  ) %>%
  group_by(period, sex, ethnicity_group) %>%
  summarise(
    asir = sum(weighted_rate) / 200000 * 100000,
    se_asir = sqrt(sum(weighted_var)) / 200000 * 100000,
    lower_ci = pmax(0, asir - 1.96 * se_asir),
    upper_ci = asir + 1.96 * se_asir,
    .groups = "drop"
  ) %>%
  mutate(
    stroke_type = "Ischaemic",
    asir = round(asir, 1),
    lower_ci = round(lower_ci, 1),
    upper_ci = round(upper_ci, 1),
    `ASIR (95% CI)` = paste0(asir, " (", lower_ci, "–", upper_ci, ")")
  )

# PICH
slsr_pich_sex <- slsr_clean_icd10_prepped %>%
  filter(stroke_type == "PICH") %>%
  mutate(
    sex = case_when(
      sex == 1 ~ "Male",
      sex == 2 ~ "Female",
      sex == "M" ~ "Male",
      sex == "F" ~ "Female",
      TRUE ~ as.character(sex)
    )
  )
stroke_counts_pich_sex <- slsr_pich_sex %>%
  count(period, age_group, sex, ethnicity_group, name = "stroke_n")
crude_rates_pich_sex <- pop_person_years %>%
  left_join(stroke_counts_pich_sex, by = c("period", "age_group", "sex", "ethnicity_group")) %>%
  mutate(
    stroke_n = replace_na(stroke_n, 0),
    rate_per_100k = stroke_n / person_years * 100000
  )
esp_adjusted_pich_sex <- crude_rates_pich_sex %>%
  left_join(esp2013_collapsed, by = c("age_group", "sex")) %>%
  filter(!is.na(person_years) & person_years > 0) %>%
  mutate(
    crude_rate = stroke_n / person_years,
    weighted_rate = crude_rate * esp_count,
    weighted_var = (esp_count^2) * (stroke_n / person_years^2)
  ) %>%
  group_by(period, sex, ethnicity_group) %>%
  summarise(
    asir = sum(weighted_rate) / 200000 * 100000,
    se_asir = sqrt(sum(weighted_var)) / 200000 * 100000,
    lower_ci = pmax(0, asir - 1.96 * se_asir),
    upper_ci = asir + 1.96 * se_asir,
    .groups = "drop"
  ) %>%
  mutate(
    stroke_type = "PICH",
    asir = round(asir, 1),
    lower_ci = round(lower_ci, 1),
    upper_ci = round(upper_ci, 1),
    `ASIR (95% CI)` = paste0(asir, " (", lower_ci, "–", upper_ci, ")")
  )

# SAH
slsr_sah_sex <- slsr_clean_icd10_prepped %>%
  filter(stroke_type == "SAH") %>%
  mutate(
    sex = case_when(
      sex == 1 ~ "Male",
      sex == 2 ~ "Female",
      sex == "M" ~ "Male",
      sex == "F" ~ "Female",
      TRUE ~ as.character(sex)
    )
  )
stroke_counts_sah_sex <- slsr_sah_sex %>%
  count(period, age_group, sex, ethnicity_group, name = "stroke_n")

# == and create the tables ==
esp_adjusted_isch_sex <- esp_adjusted_isch_sex %>% mutate(stroke_type = "Ischaemic")
esp_adjusted_pich_sex <- esp_adjusted_pich_sex %>% mutate(stroke_type = "PICH")
esp_adjusted_sah_sex  <- esp_adjusted_sah_sex  %>% mutate(stroke_type = "SAH")
esp_adjusted_sex <- esp_adjusted_sex %>% mutate(stroke_type = "Total")


# Combine
sex_stratified_asir <- bind_rows(
  esp_adjusted_sex,
  esp_adjusted_isch_sex,
  esp_adjusted_pich_sex,
  esp_adjusted_sah_sex
)

# Add ASIR (95% CI) column
sex_stratified_asir <- sex_stratified_asir %>%
  filter(!is.na(period)) %>%
  mutate(
    `ASIR (95% CI)` = paste0(asir, " (", lower_ci, "–", upper_ci, ")")
  )

asir_table_female <- sex_stratified_asir %>%
  filter(sex == "Female") %>%
  select(ethnicity_group, stroke_type, period, `ASIR (95% CI)`) %>%
  pivot_wider(
    names_from = period,
    values_from = `ASIR (95% CI)`
  ) %>%
  arrange(
    match(ethnicity_group, c("White", "Black African", "Black Caribbean", "Other")),
    match(stroke_type, c("Total", "Ischaemic", "PICH", "SAH"))
  ) %>%
  rename(
    Ethnicity = ethnicity_group,
    Stroke_Type = stroke_type
  )

asir_table_male <- sex_stratified_asir %>%
  filter(sex == "Male") %>%
  select(ethnicity_group, stroke_type, period, `ASIR (95% CI)`) %>%
  pivot_wider(
    names_from = period,
    values_from = `ASIR (95% CI)`
  ) %>%
  arrange(
    match(ethnicity_group, c("White", "Black African", "Black Caribbean", "Other")),
    match(stroke_type, c("Total", "Ischaemic", "PICH", "SAH"))
  ) %>%
  rename(
    Ethnicity = ethnicity_group,
    Stroke_Type = stroke_type
  )

writexl::write_xlsx(list(
  Female_ASIRs = asir_table_female,
  Male_ASIRs = asir_table_male
), "sex_stratified_asir_by_subtype_incl_total.xlsx")


# === Collapse across ethnicities for total Male and Female ASIRs ===
crude_rates_total_sex <- crude_rates_sex %>%
  group_by(period, age_group, sex) %>%
  summarise(
    stroke_n = sum(stroke_n, na.rm = TRUE),
    person_years = sum(person_years, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  mutate(crude_rate = stroke_n / person_years)

# === Join ESP and calculate ASIR + CI for total males/females ===
standardised_rates_total_sex <- crude_rates_total_sex %>%
  left_join(esp2013_collapsed, by = c("age_group", "sex")) %>%
  filter(!is.na(person_years) & person_years > 0) %>%
  mutate(
    weighted_rate = crude_rate * esp_count,
    weighted_var = (esp_count^2) * (stroke_n / person_years^2)
  ) %>%
  group_by(period, sex) %>%
  summarise(
    asir = sum(weighted_rate) / 200000 * 100000,
    se_asir = sqrt(sum(weighted_var)) / 200000 * 100000,
    lower_ci = pmax(0, asir - 1.96 * se_asir),
    upper_ci = asir + 1.96 * se_asir,
    .groups = "drop"
  ) %>%
  mutate(
    ethnicity_group = "Total",
    stroke_type = "Total",
    asir = round(asir, 1),
    lower_ci = round(lower_ci, 1),
    upper_ci = round(upper_ci, 1),
    `ASIR (95% CI)` = paste0(asir, " (", lower_ci, "–", upper_ci, ")")
  )

crude_rates_total_isch_sex <- crude_rates_isch_sex %>%
  group_by(period, age_group, sex) %>%
  summarise(
    stroke_n = sum(stroke_n, na.rm = TRUE),
    person_years = sum(person_years, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  mutate(crude_rate = stroke_n / person_years)

standardised_rates_total_isch_sex <- crude_rates_total_isch_sex %>%
  left_join(esp2013_collapsed, by = c("age_group", "sex")) %>%
  filter(!is.na(person_years) & person_years > 0) %>%
  mutate(
    weighted_rate = crude_rate * esp_count,
    weighted_var = (esp_count^2) * (stroke_n / person_years^2)
  ) %>%
  group_by(period, sex) %>%
  summarise(
    asir = sum(weighted_rate) / 200000 * 100000,
    se_asir = sqrt(sum(weighted_var)) / 200000 * 100000,
    lower_ci = pmax(0, asir - 1.96 * se_asir),
    upper_ci = asir + 1.96 * se_asir,
    .groups = "drop"
  ) %>%
  mutate(
    ethnicity_group = "Total",
    stroke_type = "Ischaemic",
    asir = round(asir, 1),
    lower_ci = round(lower_ci, 1),
    upper_ci = round(upper_ci, 1),
    `ASIR (95% CI)` = paste0(asir, " (", lower_ci, "–", upper_ci, ")")
  )

crude_rates_total_pich_sex <- crude_rates_pich_sex %>%
  group_by(period, age_group, sex) %>%
  summarise(
    stroke_n = sum(stroke_n, na.rm = TRUE),
    person_years = sum(person_years, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  mutate(crude_rate = stroke_n / person_years)

standardised_rates_total_pich_sex <- crude_rates_total_pich_sex %>%
  left_join(esp2013_collapsed, by = c("age_group", "sex")) %>%
  filter(!is.na(person_years) & person_years > 0) %>%
  mutate(
    weighted_rate = crude_rate * esp_count,
    weighted_var = (esp_count^2) * (stroke_n / person_years^2)
  ) %>%
  group_by(period, sex) %>%
  summarise(
    asir = sum(weighted_rate) / 200000 * 100000,
    se_asir = sqrt(sum(weighted_var)) / 200000 * 100000,
    lower_ci = pmax(0, asir - 1.96 * se_asir),
    upper_ci = asir + 1.96 * se_asir,
    .groups = "drop"
  ) %>%
  mutate(
    ethnicity_group = "Total",
    stroke_type = "PICH",
    asir = round(asir, 1),
    lower_ci = round(lower_ci, 1),
    upper_ci = round(upper_ci, 1),
    `ASIR (95% CI)` = paste0(asir, " (", lower_ci, "–", upper_ci, ")")
  )

crude_rates_total_sah_sex <- crude_rates_sah_sex %>%
  group_by(period, age_group, sex) %>%
  summarise(
    stroke_n = sum(stroke_n, na.rm = TRUE),
    person_years = sum(person_years, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  mutate(crude_rate = stroke_n / person_years)

standardised_rates_total_sah_sex <- crude_rates_total_sah_sex %>%
  left_join(esp2013_collapsed, by = c("age_group", "sex")) %>%
  filter(!is.na(person_years) & person_years > 0) %>%
  mutate(
    weighted_rate = crude_rate * esp_count,
    weighted_var = (esp_count^2) * (stroke_n / person_years^2)
  ) %>%
  group_by(period, sex) %>%
  summarise(
    asir = sum(weighted_rate) / 200000 * 100000,
    se_asir = sqrt(sum(weighted_var)) / 200000 * 100000,
    lower_ci = pmax(0, asir - 1.96 * se_asir),
    upper_ci = asir + 1.96 * se_asir,
    .groups = "drop"
  ) %>%
  mutate(
    ethnicity_group = "Total",
    stroke_type = "SAH",
    asir = round(asir, 1),
    lower_ci = round(lower_ci, 1),
    upper_ci = round(upper_ci, 1),
    `ASIR (95% CI)` = paste0(asir, " (", lower_ci, "–", upper_ci, ")")
  )

sex_stratified_asir <- bind_rows(
  sex_stratified_asir,
  standardised_rates_total_isch_sex,
  standardised_rates_total_pich_sex,
  standardised_rates_total_sah_sex
)

# ===== Add stroke_type and Total labels =====
esp_adjusted_sex        <- esp_adjusted_sex        %>% mutate(stroke_type = "Total")
esp_adjusted_isch_sex   <- esp_adjusted_isch_sex   %>% mutate(stroke_type = "Ischaemic")
esp_adjusted_pich_sex   <- esp_adjusted_pich_sex   %>% mutate(stroke_type = "PICH")
esp_adjusted_sah_sex    <- esp_adjusted_sah_sex    %>% mutate(stroke_type = "SAH")

standardised_rates_total_sex        <- standardised_rates_total_sex        %>% mutate(ethnicity_group = "Total", stroke_type = "Total")
standardised_rates_total_isch_sex   <- standardised_rates_total_isch_sex   %>% mutate(ethnicity_group = "Total", stroke_type = "Ischaemic")
standardised_rates_total_pich_sex   <- standardised_rates_total_pich_sex   %>% mutate(ethnicity_group = "Total", stroke_type = "PICH")
standardised_rates_total_sah_sex    <- standardised_rates_total_sah_sex    %>% mutate(ethnicity_group = "Total", stroke_type = "SAH")

# ===== Combine =====
all_sex_stratified_asir <- bind_rows(
  esp_adjusted_sex, esp_adjusted_isch_sex, esp_adjusted_pich_sex, esp_adjusted_sah_sex,
  standardised_rates_total_sex,
  standardised_rates_total_isch_sex,
  standardised_rates_total_pich_sex,
  standardised_rates_total_sah_sex
)

# ===== Clean and format =====
all_sex_stratified_asir <- all_sex_stratified_asir %>%
  filter(!is.na(period)) %>%
  mutate(
    `ASIR (95% CI)` = paste0(round(asir, 1), " (", round(lower_ci, 1), "–", round(upper_ci, 1), ")")
  )

# ===== Separate female and male tables =====
asir_table_female <- all_sex_stratified_asir %>%
  filter(sex == "Female") %>%
  select(ethnicity_group, stroke_type, period, `ASIR (95% CI)`) %>%
  pivot_wider(
    names_from = period,
    values_from = `ASIR (95% CI)`
  ) %>%
  arrange(
    match(ethnicity_group, c("Total", "White", "Black African", "Black Caribbean", "Other")),
    match(stroke_type, c("Total", "Ischaemic", "PICH", "SAH"))
  ) %>%
  rename(
    Ethnicity = ethnicity_group,
    Stroke_Type = stroke_type
  )

asir_table_male <- all_sex_stratified_asir %>%
  filter(sex == "Male") %>%
  select(ethnicity_group, stroke_type, period, `ASIR (95% CI)`) %>%
  pivot_wider(
    names_from = period,
    values_from = `ASIR (95% CI)`
  ) %>%
  arrange(
    match(ethnicity_group, c("Total", "White", "Black African", "Black Caribbean", "Other")),
    match(stroke_type, c("Total", "Ischaemic", "PICH", "SAH"))
  ) %>%
  rename(
    Ethnicity = ethnicity_group,
    Stroke_Type = stroke_type
  )

# ===== Write to Excel =====
writexl::write_xlsx(list(
  Female_ASIRs = asir_table_female,
  Male_ASIRs = asir_table_male
), "sex_stratified_asir_by_subtype_with_totals.xlsx")

# ==== Plot them ===== 
# Ethnicity colours and shapes (same as before)
ethnicity_colours <- c(
  "White" = "#E64173",
  "Black African" = "#984EA3",
  "Black Caribbean" = "#FF7F00",
  "Other" = "#377EB8"
)

ethnicity_shapes <- c(
  "White" = 16,
  "Black African" = 17,
  "Black Caribbean" = 15,
  "Other" = 18
)

# Function: Plot by stroke type and facet by sex
plot_sex_subtype_asir <- function(df, stroke_subtype, sex_input) {
  df %>%
    filter(
      stroke_type == stroke_subtype,
      sex == sex_input,
      ethnicity_group %in% names(ethnicity_colours)
    ) %>%
    ggplot(aes(
      x = period, y = asir,
      colour = ethnicity_group,
      shape = ethnicity_group,
      group = ethnicity_group
    )) +
    geom_point(size = 2.8) +
    geom_line(linewidth = 1) +
    geom_errorbar(aes(ymin = lower_ci, ymax = upper_ci), width = 0.1) +
    scale_colour_manual(values = ethnicity_colours) +
    scale_shape_manual(values = ethnicity_shapes) +
    labs(
      title = paste0("ASIRs: ", stroke_subtype, " (", sex_input, ")"),
      y = "ASIR per 100,000",
      x = "Period",
      colour = "Ethnicity",
      shape = "Ethnicity"
    ) +
    theme_minimal(base_size = 14) +
    theme(
      panel.grid.minor = element_blank(),
      axis.text.x = element_text(angle = 45, hjust = 1)
    )
}

# Total
plot_total_female <- plot_sex_subtype_asir(all_sex_stratified_asir, "Total", "Female")
plot_total_male   <- plot_sex_subtype_asir(all_sex_stratified_asir, "Total", "Male")

# Ischaemic
plot_isch_female <- plot_sex_subtype_asir(all_sex_stratified_asir, "Ischaemic", "Female")
plot_isch_male   <- plot_sex_subtype_asir(all_sex_stratified_asir, "Ischaemic", "Male")

# PICH
plot_pich_female <- plot_sex_subtype_asir(all_sex_stratified_asir, "PICH", "Female")
plot_pich_male   <- plot_sex_subtype_asir(all_sex_stratified_asir, "PICH", "Male")

# SAH
plot_sah_female <- plot_sex_subtype_asir(all_sex_stratified_asir, "SAH", "Female")
plot_sah_male   <- plot_sex_subtype_asir(all_sex_stratified_asir, "SAH", "Male")


plot_total_female
plot_total_male
plot_isch_female
plot_isch_male
plot_pich_female
plot_pich_male 
plot_sah_female
plot_sah_male

# ------------------------------------------------
Temporal trends
# ------------------------------------------------
# recreate crude_stroke_totals -> Start from your existing crude_rates_all_strata (already has counts & PYs per ethnicity)

#  Create "All" ethnicity group for total population
crude_rates_all_ethnicity <- crude_rates_all_strata %>%
  group_by(period, age_group, sex) %>%
  summarise(
    stroke_n = sum(stroke_n, na.rm = TRUE),
    person_years = sum(person_years, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  mutate(ethnicity_group = "All")

# Bind ethnicity-specific + total population rows
crude_rates_all_combined <- bind_rows(
  crude_rates_all_strata,
  crude_rates_all_ethnicity
)

# ==== TOTAL STROKES ======
# something happened with this one and its not trustable anymore
library(dplyr)
library(tidyr)
library(readr)

# 0) Recreate stroke counts with consistent sex labels (Male/Female)
stroke_counts_total <- slsr_clean_icd10_prepped %>%
  mutate(
    sex = case_when(
      sex == 1 ~ "Male",
      sex == 2 ~ "Female",
      sex == "M" ~ "Male",
      sex == "F" ~ "Female",
      TRUE ~ as.character(sex)
    )
  ) %>%
  count(period, age_group, sex, ethnicity_group, name = "stroke_n")

# Quick check: total strokes
total_strokes_from_counts <- sum(stroke_counts_total$stroke_n, na.rm = TRUE)
message("Total strokes (from counts): ", total_strokes_from_counts)
# Compare to your known total (e.g., ~7661). If mismatch, we investigate upstream.

# 1) Recreate population person-years with consistent sex labels
pop_person_years <- pop_full_interpolated_with_imd %>%
  mutate(
    # collapse age bands to your analysis groups
    age_group = case_when(
      age_group %in% c("18-19", "20-24") ~ "18-24",
      age_group == "25-29" ~ "25-29",
      age_group == "30-34" ~ "30-34",
      age_group == "35-39" ~ "35-39",
      age_group == "40-44" ~ "40-44",
      age_group == "45-49" ~ "45-49",
      age_group == "50-54" ~ "50-54",
      age_group == "55-59" ~ "55-59",
      age_group == "60-64" ~ "60-64",
      age_group == "65-69" ~ "65-69",
      age_group == "70-74" ~ "70-74",
      age_group %in% c("75-79", "80-84", "85+") ~ "75+",
      TRUE ~ NA_character_
    ),
    ethnicity_group = case_when(
      ethnicity_grouped == "White" ~ "White",
      ethnicity_grouped == "Black Caribbean" ~ "Black Caribbean",
      ethnicity_grouped == "Black African" ~ "Black African",
      ethnicity_grouped %in% c("Black Other", "Other") ~ "Other",
      TRUE ~ NA_character_
    ),
    period = case_when(
      year >= 1995 & year <= 1999 ~ "1995-1999",
      year >= 2000 & year <= 2004 ~ "2000-2004",
      year >= 2005 & year <= 2009 ~ "2005-2009",
      year >= 2010 & year <= 2014 ~ "2010-2014",
      year >= 2015 & year <= 2019 ~ "2015-2019",
      year >= 2020 & year <= 2024 ~ "2020-2024",
      TRUE ~ NA_character_
    ),
    sex = case_when(                # make sure sex matches strokes
      sex == 1 ~ "Male",
      sex == 2 ~ "Female",
      sex == "M" ~ "Male",
      sex == "F" ~ "Female",
      TRUE ~ as.character(sex)
    )
  ) %>%
  filter(!is.na(age_group), !is.na(ethnicity_group), !is.na(sex), !is.na(period)) %>%
  group_by(period, age_group, sex, ethnicity_group) %>%
  summarise(person_years = sum(pop_count_interp, na.rm = TRUE), .groups = "drop")

# Guard: ensure population table has unique keys
dups <- pop_person_years %>%
  count(period, age_group, sex, ethnicity_group) %>%
  filter(n > 1)
stopifnot(nrow(dups) == 0)  # fails if duplicates exist

# 2) Join population with stroke counts (one row per stratum)
crude_rates_all_strata <- pop_person_years %>%
  left_join(stroke_counts_total,
            by = c("period", "age_group", "sex", "ethnicity_group")) %>%
  mutate(stroke_n = tidyr::replace_na(stroke_n, 0))

# Cross‑check: summing over ethnicity-specific rows should equal total strokes
sum_strokes_by_eth <- crude_rates_all_strata %>%
  group_by(period) %>%
  summarise(strokes = sum(stroke_n), .groups = "drop")

message("Total strokes from joined (ethnicity-specific): ",
        sum(sum_strokes_by_eth$strokes))

# 3) Create "All" ethnicity rows (collapse across ethnicities) — **this duplicates totals on purpose**
crude_rates_all_ethnicity <- crude_rates_all_strata %>%
  group_by(period, age_group, sex) %>%
  summarise(
    stroke_n = sum(stroke_n, na.rm = TRUE),
    person_years = sum(person_years, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  mutate(ethnicity_group = "All")

# Cross‑check: "All" rows sum should equal ethnicity‑specific sum (per period/sex)
check_totals <- crude_rates_all_ethnicity %>%
  group_by(period) %>%
  summarise(strokes_all = sum(stroke_n), .groups = "drop") %>%
  left_join(sum_strokes_by_eth, by = "period") %>%
  mutate(equal_check = strokes_all == strokes)

print(check_totals)
# All TRUE in equal_check -> good.

# 4) Bind them (now the frame contains ethnicity-specific rows **plus** the "All" ethnicity rows)
crude_rates_all_combined <- bind_rows(crude_rates_all_strata, crude_rates_all_ethnicity)

# IMPORTANT: do NOT sum stroke_n over the entire combined table (that double-counts by design).
# When you need totals, filter either ethnicity != "All" OR ethnicity == "All", not both simultaneously.

# Example sanity summaries:
message("Sum strokes (ethnicity-specific only): ",
        crude_rates_all_combined %>% filter(ethnicity_group != "All") %>% summarise(sum(stroke_n)) %>% pull())
message("Sum strokes (ethnicity == 'All' only): ",
        crude_rates_all_combined %>% filter(ethnicity_group == "All") %>% summarise(sum(stroke_n)) %>% pull())

# ===== Getting the time comparisons ======
period_pairs <- tibble::tribble(
  ~ref,        ~comp,
  "1995-1999", "2000-2004",
  "2000-2004", "2005-2009",
  "2005-2009", "2010-2014",
  "2010-2014", "2015-2019",
  "2015-2019", "2020-2024"
)

library(broom)

run_safe_model <- function(df, ref_period, comp_period) {
  df_sub <- df %>% 
    filter(period %in% c(ref_period, comp_period)) %>%
    group_by(age_group) %>%
    filter(sum(stroke_n) > 0) %>%      # drop age groups with 0 cases in both periods
    ungroup()
  
  if (nrow(df_sub) == 0) return(NULL)  # skip if nothing left
  
  df_sub <- df_sub %>% 
    mutate(period = relevel(factor(period), ref = ref_period))
  
  fit <- glm(
    stroke_n ~ period + age_group,
    offset = log(person_years),
    family = poisson(link = "log"),
    data = df_sub
  )
  
  broom::tidy(fit, exponentiate = TRUE, conf.int = TRUE) %>%
    filter(term == paste0("period", comp_period)) %>%
    transmute(
      comparison = paste(comp_period, "vs", ref_period),
      IRR = estimate,
      lower_CI = conf.low,
      upper_CI = conf.high,
      p.value,
      p.value_fmt = ifelse(p.value < 0.001, "<0.001", sprintf("%.3f", p.value)),
      IRR_label = paste0(
        sprintf("%.2f", IRR), " (", sprintf("%.2f", lower_CI), "–", sprintf("%.2f", upper_CI),
        "), p=", p.value_fmt
      ),
      change = case_when(
        p.value < 0.05 & IRR > 1 ~ "↑",
        p.value < 0.05 & IRR < 1 ~ "↓",
        TRUE ~ "↔"
      )
    )
}

period_pairs <- tibble::tribble(
  ~ref,        ~comp,
  "1995-1999", "2000-2004",
  "2000-2004", "2005-2009",
  "2005-2009", "2010-2014",
  "2010-2014", "2015-2019",
  "2015-2019", "2020-2024"
)

irr_ethnicity <- df_ethnicity %>%
  group_by(ethnicity_group, sex) %>%
  group_split() %>%
  purrr::map_dfr(function(df_group) {
    purrr::map_dfr(1:nrow(period_pairs), function(i) {
      res <- run_safe_model(df_group, period_pairs$ref[i], period_pairs$comp[i])
      if (!is.null(res)) {
        res$ethnicity_group <- unique(df_group$ethnicity_group)
        res$sex <- unique(df_group$sex)
      }
      res
    })
  }) %>%
  select(ethnicity_group, sex, comparison, IRR_label, change, everything())

# And total
library(dplyr)
library(broom)
library(purrr)

run_safe_model <- function(df, ref_period, comp_period) {
  df_sub <- df %>% 
    filter(period %in% c(ref_period, comp_period)) %>%
    group_by(age_group) %>%
    filter(sum(stroke_n) > 0) %>%      # drop age groups with 0 cases in both periods
    ungroup()
  
  if (nrow(df_sub) == 0) return(NULL)
  
  df_sub <- df_sub %>% 
    mutate(period = relevel(factor(period), ref = ref_period))
  
  fit <- glm(
    stroke_n ~ period + age_group,
    offset = log(person_years),
    family = poisson(link = "log"),
    data = df_sub
  )
  
  broom::tidy(fit, exponentiate = TRUE, conf.int = TRUE) %>%
    filter(term == paste0("period", comp_period)) %>%
    transmute(
      comparison = paste(comp_period, "vs", ref_period),
      IRR = estimate,
      lower_CI = conf.low,
      upper_CI = conf.high,
      p.value,
      p.value_fmt = ifelse(p.value < 0.001, "<0.001", sprintf("%.3f", p.value)),
      IRR_label = paste0(
        sprintf("%.2f", IRR), " (", sprintf("%.2f", lower_CI), "–", sprintf("%.2f", upper_CI),
        "), p=", p.value_fmt
      ),
      change = case_when(
        p.value < 0.05 & IRR > 1 ~ "↑",
        p.value < 0.05 & IRR < 1 ~ "↓",
        TRUE ~ "↔"
      )
    )
}
period_pairs <- tibble::tribble(
  ~ref,        ~comp,
  "1995-1999", "2000-2004",
  "2000-2004", "2005-2009",
  "2005-2009", "2010-2014",
  "2010-2014", "2015-2019",
  "2015-2019", "2020-2024"
)
df_total <- df_ethnicity %>%
  group_by(period, age_group, sex) %>%
  summarise(
    stroke_n = sum(stroke_n, na.rm = TRUE),
    person_years = sum(person_years, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  mutate(ethnicity_group = "Total population")

irr_total <- df_total %>%
  group_by(ethnicity_group, sex) %>%
  group_split() %>%
  map_dfr(function(df_group) {
    map_dfr(1:nrow(period_pairs), function(i) {
      res <- run_safe_model(df_group, period_pairs$ref[i], period_pairs$comp[i])
      if (!is.null(res)) {
        res$ethnicity_group <- unique(df_group$ethnicity_group)
        res$sex <- unique(df_group$sex)
      }
      res
    })
  })

# Total population, ALL sexes combined (Total × Total)
df_total_allsex <- df_ethnicity %>%
  group_by(period, age_group) %>%
  summarise(
    stroke_n    = sum(stroke_n, na.rm = TRUE),
    person_years = sum(person_years, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  mutate(
    ethnicity_group = "Total population",
    sex = "All"
  )

irr_total_allsex <- df_total_allsex %>%
  group_by(ethnicity_group, sex) %>%
  group_split() %>%
  purrr::map_dfr(function(df_group) {
    purrr::map_dfr(1:nrow(period_pairs), function(i) {
      res <- run_safe_model(df_group, period_pairs$ref[i], period_pairs$comp[i])
      if (!is.null(res)) {
        res$ethnicity_group <- unique(df_group$ethnicity_group)
        res$sex <- unique(df_group$sex)  # "All"
      }
      res
    })
  })

irr_all <- dplyr::bind_rows(
  irr_ethnicity,        # ethnicity × sex
  irr_total,            # Total population × Men/Women (if you want to keep)
  irr_total_allsex      # Total population × All
) %>%
  dplyr::select(ethnicity_group, sex, comparison, IRR_label, change, dplyr::everything())

# 1) Create per-ethnicity ALL-sex totals
df_ethnicity_allsex <- df_ethnicity %>%
  dplyr::group_by(period, age_group, ethnicity_group) %>%
  dplyr::summarise(
    stroke_n = sum(stroke_n, na.rm = TRUE),
    person_years = sum(person_years, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  dplyr::mutate(sex = "All")

# 2) IRRs for per-ethnicity ALL-sex
irr_ethnicity_allsex <- df_ethnicity_allsex %>%
  dplyr::group_by(ethnicity_group, sex) %>%
  dplyr::group_split() %>%
  purrr::map_dfr(function(df_group) {
    purrr::map_dfr(1:nrow(period_pairs), function(i) {
      res <- run_safe_model(df_group, period_pairs$ref[i], period_pairs$comp[i])
      if (!is.null(res)) {
        res$ethnicity_group <- unique(df_group$ethnicity_group)
        res$sex <- unique(df_group$sex)  # "All"
      }
      res
    })
  })

# 3) Replace irr_ethnicity with ethnicity×(Female/Male) + ethnicity×All
irr_ethnicity_full <- dplyr::bind_rows(
  irr_ethnicity,          # ethnicity × Female/Male
  irr_ethnicity_allsex    # ethnicity × All
)

# 4) Final combined table incl. Total population blocks
irr_all <- dplyr::bind_rows(
  irr_ethnicity_full,   # ethnicity × All/Female/Male
  irr_total,            # Total population × Female/Male
  irr_total_allsex      # Total population × All
) %>%
  dplyr::select(ethnicity_group, sex, comparison, IRR_label, change, dplyr::everything())

# Formatting

library(dplyr)
library(flextable)
library(writexl)

# Define order for ethnicity and sex
eth_order <- c("Total population", "Black African", "Black Caribbean", "Other", "White")
sex_order <- c("All", "Female", "Male")

# Format table
irr_all_formatted <- irr_all %>%
  mutate(
    ethnicity_group = factor(ethnicity_group, levels = eth_order),
    sex = factor(sex, levels = sex_order),
    significant = p.value < 0.005
  ) %>%
  arrange(ethnicity_group, sex, comparison) %>%
  select(
    Ethnicity = ethnicity_group,
    Sex = sex,
    Comparison = comparison,
    `IRR (95% CI), p` = IRR_label,
    Change = change,
    significant
  )

# Flextable with merged Ethnicity cells & bold arrows when significant
ft_irr_all <- flextable(irr_all_formatted) %>%
  merge_v(j = "Ethnicity") %>%
  bold(i = ~ significant == TRUE, j = "Change") %>%
  autofit()

# Save to Excel without helper column
write_xlsx(
  irr_all_formatted %>%
    select(-significant),
  path = "IRR_all_ethnicity_table.xlsx"
)

# Preview flextable in RStudio
ft_irr_all


# === By subtype =====
# Prepparing the datasets
# Ischaemic
stroke_counts_isch <- slsr_clean_icd10_prepped %>%
  filter(stroke_type == "Ischaemic") %>%
  mutate(
    sex = ifelse(sex %in% c(1, "M"), "Male", "Female")
  ) %>%
  count(period, age_group, sex, ethnicity_group, name = "stroke_n")

# PICH
stroke_counts_pich <- slsr_clean_icd10_prepped %>%
  filter(stroke_type == "PICH") %>%
  mutate(
    sex = ifelse(sex %in% c(1, "M"), "Male", "Female")
  ) %>%
  count(period, age_group, sex, ethnicity_group, name = "stroke_n")

# SAH
stroke_counts_sah <- slsr_clean_icd10_prepped %>%
  filter(stroke_type == "SAH") %>%
  mutate(
    sex = ifelse(sex %in% c(1, "M"), "Male", "Female")
  ) %>%
  count(period, age_group, sex, ethnicity_group, name = "stroke_n")

# Merge with PY
library(dplyr)
library(tidyr)

# keys shared by counts and population PY
by_keys <- c("period", "age_group", "sex", "ethnicity_group")

# helper to build a subtype df with FULL denominators
make_subtype_df <- function(prepped_cases, subtype, pop_person_years) {
  stroke_counts <- prepped_cases %>%
    filter(stroke_type == subtype) %>%
    mutate(
      sex = case_when(
        sex %in% c(1, "M") ~ "Male",
        sex %in% c(2, "F") ~ "Female",
        TRUE ~ as.character(sex)
      )
    ) %>%
    count(dplyr::across(all_of(by_keys)), name = "stroke_n")

  # start from ALL PY (everyone at risk), then add subtype strokes (fill NAs with 0)
  pop_person_years %>%
    left_join(stroke_counts, by = by_keys) %>%
    mutate(stroke_n = tidyr::replace_na(stroke_n, 0L))
}

# build the three subtype datasets (now PY won't be undercounted)
isch_df <- make_subtype_df(slsr_clean_icd10_prepped, "Ischaemic", pop_person_years)
pich_df <- make_subtype_df(slsr_clean_icd10_prepped, "PICH",      pop_person_years)
sah_df  <- make_subtype_df(slsr_clean_icd10_prepped, "SAH",       pop_person_years)

# sanity checks: PY should equal the total at-risk PY from pop_person_years for ALL subtypes
total_py_all <- pop_person_years %>% summarise(total_py_all = sum(person_years, na.rm = TRUE))
isch_df  %>% summarise(total_strokes = sum(stroke_n), total_py = sum(person_years)) %>% bind_cols(total_py_all)
pich_df  %>% summarise(total_strokes = sum(stroke_n), total_py = sum(person_years)) %>% bind_cols(total_py_all)
sah_df   %>% summarise(total_strokes = sum(stroke_n), total_py = sum(person_years)) %>% bind_cols(total_py_all)

# Debugging why not working
by_keys <- c("period","age_group","sex","ethnicity_group")

fix_dash <- function(x) {
  x <- as.character(x)
  x <- gsub("\u2013|\u2014", "-", x)   # en/em dash -> hyphen
  x <- gsub("\\s*-\\s*", "-", x)       # trim spaces around dash
  trimws(x)
}

recode_sex <- function(x){
  dplyr::case_when(
    x %in% c(1,"1","M","Male","male") ~ "Male",
    x %in% c(2,"2","F","Female","female") ~ "Female",
    TRUE ~ as.character(x)
  )
}

# Clean **both** tables used in the join
slsr_clean_icd10_prepped <- slsr_clean_icd10_prepped %>%
  mutate(
    period = fix_dash(period),
    age_group = fix_dash(age_group),
    sex = recode_sex(sex),
    ethnicity_group = trimws(as.character(ethnicity_group))
  )

pop_person_years <- pop_person_years %>%
  mutate(
    period = fix_dash(period),
    age_group = fix_dash(age_group),
    sex = recode_sex(sex),
    ethnicity_group = trimws(as.character(ethnicity_group))
  ) %>%
  group_by(across(all_of(by_keys))) %>%           # enforce uniqueness
  summarise(person_years = sum(person_years), .groups="drop")

stroke_counts_isch <- slsr_clean_icd10_prepped %>%
  filter(stroke_type == "Ischaemic") %>%
  count(across(all_of(by_keys)), name = "stroke_n")

isch_df <- pop_person_years %>%
  left_join(stroke_counts_isch, by = by_keys) %>%
  mutate(stroke_n = tidyr::replace_na(stroke_n, 0L))

# === Ischaemic ===
library(dplyr)
library(purrr)
library(broom)

# 1) IRRs by ethnicity × sex
irr_isch_ethxsex <- isch_df %>%
  group_by(ethnicity_group, sex) %>%
  group_split() %>%
  map_dfr(function(df_group) {
    map_dfr(1:nrow(period_pairs), function(i) {
      res <- run_safe_model(df_group, period_pairs$ref[i], period_pairs$comp[i])
      if (!is.null(res)) {
        res$ethnicity_group <- unique(df_group$ethnicity_group)
        res$sex <- unique(df_group$sex)
      }
      res
    })
  })

# 2) Ethnicity × All-sex
isch_eth_allsex <- isch_df %>%
  group_by(period, age_group, ethnicity_group) %>%
  summarise(
    stroke_n = sum(stroke_n, na.rm = TRUE),
    person_years = sum(person_years, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  mutate(sex = "All")

irr_isch_eth_allsex <- isch_eth_allsex %>%
  group_by(ethnicity_group, sex) %>%
  group_split() %>%
  map_dfr(function(df_group) {
    map_dfr(1:nrow(period_pairs), function(i) {
      res <- run_safe_model(df_group, period_pairs$ref[i], period_pairs$comp[i])
      if (!is.null(res)) {
        res$ethnicity_group <- unique(df_group$ethnicity_group)
        res$sex <- unique(df_group$sex)
      }
      res
    })
  })

# 3) Total population × sex
isch_total_sex <- isch_df %>%
  group_by(period, age_group, sex) %>%
  summarise(
    stroke_n = sum(stroke_n, na.rm = TRUE),
    person_years = sum(person_years, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  mutate(ethnicity_group = "Total population")

irr_isch_total_sex <- isch_total_sex %>%
  group_by(ethnicity_group, sex) %>%
  group_split() %>%
  map_dfr(function(df_group) {
    map_dfr(1:nrow(period_pairs), function(i) {
      res <- run_safe_model(df_group, period_pairs$ref[i], period_pairs$comp[i])
      if (!is.null(res)) {
        res$ethnicity_group <- unique(df_group$ethnicity_group)
        res$sex <- unique(df_group$sex)
      }
      res
    })
  })

# 4) Total population × All
isch_total_all <- isch_df %>%
  group_by(period, age_group) %>%
  summarise(
    stroke_n = sum(stroke_n, na.rm = TRUE),
    person_years = sum(person_years, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  mutate(ethnicity_group = "Total population", sex = "All")

irr_isch_total_all <- isch_total_all %>%
  group_by(ethnicity_group, sex) %>%
  group_split() %>%
  map_dfr(function(df_group) {
    map_dfr(1:nrow(period_pairs), function(i) {
      res <- run_safe_model(df_group, period_pairs$ref[i], period_pairs$comp[i])
      if (!is.null(res)) {
        res$ethnicity_group <- unique(df_group$ethnicity_group)
        res$sex <- unique(df_group$sex)
      }
      res
    })
  })

# 5) Bind and format
irr_isch_all <- bind_rows(
  irr_isch_ethxsex,
  irr_isch_eth_allsex,
  irr_isch_total_sex,
  irr_isch_total_all
) %>%
  select(ethnicity_group, sex, comparison, IRR_label, change, everything())

# Optional: Order and format
eth_order <- c("Total population", "Black African", "Black Caribbean", "Other", "White")
sex_order <- c("All", "Female", "Male")

irr_isch_formatted <- irr_isch_all %>%
  mutate(
    ethnicity_group = factor(ethnicity_group, levels = eth_order),
    sex = factor(sex, levels = sex_order),
    significant = p.value < 0.005
  ) %>%
  arrange(ethnicity_group, sex, comparison)

# == PICH and SAH ===
library(dplyr)
library(purrr)
library(broom)


stroke_counts_pich <- slsr_clean_icd10_prepped %>%
  filter(stroke_type == "PICH") %>%
  count(across(all_of(by_keys)), name = "stroke_n")

pich_df <- pop_person_years %>%
  left_join(stroke_counts_pich, by = by_keys) %>%
  mutate(stroke_n = tidyr::replace_na(stroke_n, 0L))

# Check
pich_df %>%
  summarise(
    total_strokes = sum(stroke_n, na.rm = TRUE),
    total_person_years = sum(person_years, na.rm = TRUE)
  )


# 1) IRRs by ethnicity × sex
irr_pich_ethxsex <- pich_df %>%
  group_by(ethnicity_group, sex) %>%
  group_split() %>%
  map_dfr(function(df_group) {
    map_dfr(1:nrow(period_pairs), function(i) {
      res <- run_safe_model(df_group, period_pairs$ref[i], period_pairs$comp[i])
      if (!is.null(res)) {
        res$ethnicity_group <- unique(df_group$ethnicity_group)
        res$sex <- unique(df_group$sex)
      }
      res
    })
  })

# 2) Ethnicity × All-sex
pich_eth_allsex <- pich_df %>%
  group_by(period, age_group, ethnicity_group) %>%
  summarise(
    stroke_n = sum(stroke_n, na.rm = TRUE),
    person_years = sum(person_years, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  mutate(sex = "All")

irr_pich_eth_allsex <- pich_eth_allsex %>%
  group_by(ethnicity_group, sex) %>%
  group_split() %>%
  map_dfr(function(df_group) {
    map_dfr(1:nrow(period_pairs), function(i) {
      res <- run_safe_model(df_group, period_pairs$ref[i], period_pairs$comp[i])
      if (!is.null(res)) {
        res$ethnicity_group <- unique(df_group$ethnicity_group)
        res$sex <- unique(df_group$sex)
      }
      res
    })
  })

# 3) Total population × sex
pich_total_sex <- pich_df %>%
  group_by(period, age_group, sex) %>%
  summarise(
    stroke_n = sum(stroke_n, na.rm = TRUE),
    person_years = sum(person_years, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  mutate(ethnicity_group = "Total population")

irr_pich_total_sex <- pich_total_sex %>%
  group_by(ethnicity_group, sex) %>%
  group_split() %>%
  map_dfr(function(df_group) {
    map_dfr(1:nrow(period_pairs), function(i) {
      res <- run_safe_model(df_group, period_pairs$ref[i], period_pairs$comp[i])
      if (!is.null(res)) {
        res$ethnicity_group <- unique(df_group$ethnicity_group)
        res$sex <- unique(df_group$sex)
      }
      res
    })
  })

# 4) Total population × All
pich_total_all <- pich_df %>%
  group_by(period, age_group) %>%
  summarise(
    stroke_n = sum(stroke_n, na.rm = TRUE),
    person_years = sum(person_years, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  mutate(ethnicity_group = "Total population", sex = "All")

irr_pich_total_all <- pich_total_all %>%
  group_by(ethnicity_group, sex) %>%
  group_split() %>%
  map_dfr(function(df_group) {
    map_dfr(1:nrow(period_pairs), function(i) {
      res <- run_safe_model(df_group, period_pairs$ref[i], period_pairs$comp[i])
      if (!is.null(res)) {
        res$ethnicity_group <- unique(df_group$ethnicity_group)
        res$sex <- unique(df_group$sex)
      }
      res
    })
  })

# 5) Bind and format
irr_pich_all <- bind_rows(
  irr_pich_ethxsex,
  irr_pich_eth_allsex,
  irr_pich_total_sex,
  irr_pich_total_all
) %>%
  select(ethnicity_group, sex, comparison, IRR_label, change, everything())

# Optional: Order and format
eth_order <- c("Total population", "Black African", "Black Caribbean", "Other", "White")
sex_order <- c("All", "Female", "Male")

irr_pich_formatted <- irr_pich_all %>%
  mutate(
    ethnicity_group = factor(ethnicity_group, levels = eth_order),
    sex = factor(sex, levels = sex_order),
    significant = p.value < 0.005
  ) %>%
  arrange(ethnicity_group, sex, comparison)

# === And SAH =====
stroke_counts_sah <- slsr_clean_icd10_prepped %>%
  filter(stroke_type == "SAH") %>%
  count(across(all_of(by_keys)), name = "stroke_n")

sah_df <- pop_person_years %>%
  left_join(stroke_counts_sah, by = by_keys) %>%
  mutate(stroke_n = tidyr::replace_na(stroke_n, 0L))

# Check
sah_df %>%
  summarise(
    total_strokes = sum(stroke_n, na.rm = TRUE),
    total_person_years = sum(person_years, na.rm = TRUE)
  )


# 1) IRRs by ethnicity × sex
irr_sah_ethxsex <- sah_df %>%
  group_by(ethnicity_group, sex) %>%
  group_split() %>%
  map_dfr(function(df_group) {
    map_dfr(1:nrow(period_pairs), function(i) {
      res <- run_safe_model(df_group, period_pairs$ref[i], period_pairs$comp[i])
      if (!is.null(res)) {
        res$ethnicity_group <- unique(df_group$ethnicity_group)
        res$sex <- unique(df_group$sex)
      }
      res
    })
  })

# 2) Ethnicity × All-sex
sah_eth_allsex <- sah_df %>%
  group_by(period, age_group, ethnicity_group) %>%
  summarise(
    stroke_n = sum(stroke_n, na.rm = TRUE),
    person_years = sum(person_years, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  mutate(sex = "All")

irr_sah_eth_allsex <- sah_eth_allsex %>%
  group_by(ethnicity_group, sex) %>%
  group_split() %>%
  map_dfr(function(df_group) {
    map_dfr(1:nrow(period_pairs), function(i) {
      res <- run_safe_model(df_group, period_pairs$ref[i], period_pairs$comp[i])
      if (!is.null(res)) {
        res$ethnicity_group <- unique(df_group$ethnicity_group)
        res$sex <- unique(df_group$sex)
      }
      res
    })
  })

# 3) Total population × sex
sah_total_sex <- sah_df %>%
  group_by(period, age_group, sex) %>%
  summarise(
    stroke_n = sum(stroke_n, na.rm = TRUE),
    person_years = sum(person_years, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  mutate(ethnicity_group = "Total population")

irr_sah_total_sex <- sah_total_sex %>%
  group_by(ethnicity_group, sex) %>%
  group_split() %>%
  map_dfr(function(df_group) {
    map_dfr(1:nrow(period_pairs), function(i) {
      res <- run_safe_model(df_group, period_pairs$ref[i], period_pairs$comp[i])
      if (!is.null(res)) {
        res$ethnicity_group <- unique(df_group$ethnicity_group)
        res$sex <- unique(df_group$sex)
      }
      res
    })
  })

# 4) Total population × All
sah_total_all <- sah_df %>%
  group_by(period, age_group) %>%
  summarise(
    stroke_n = sum(stroke_n, na.rm = TRUE),
    person_years = sum(person_years, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  mutate(ethnicity_group = "Total population", sex = "All")

irr_sah_total_all <- sah_total_all %>%
  group_by(ethnicity_group, sex) %>%
  group_split() %>%
  map_dfr(function(df_group) {
    map_dfr(1:nrow(period_pairs), function(i) {
      res <- run_safe_model(df_group, period_pairs$ref[i], period_pairs$comp[i])
      if (!is.null(res)) {
        res$ethnicity_group <- unique(df_group$ethnicity_group)
        res$sex <- unique(df_group$sex)
      }
      res
    })
  })

# 5) Bind and format
irr_sah_all <- bind_rows(
  irr_sah_ethxsex,
  irr_sah_eth_allsex,
  irr_sah_total_sex,
  irr_sah_total_all
) %>%
  select(ethnicity_group, sex, comparison, IRR_label, change, everything())

# Optional: Order and format
eth_order <- c("Total population", "Black African", "Black Caribbean", "Other", "White")
sex_order <- c("All", "Female", "Male")

irr_sah_formatted <- irr_sah_all %>%
  mutate(
    ethnicity_group = factor(ethnicity_group, levels = eth_order),
    sex = factor(sex, levels = sex_order),
    significant = p.value < 0.005
  ) %>%
  arrange(ethnicity_group, sex, comparison)

# == lets create total_df as well as the rest___

total_df <- pop_person_years %>%
  left_join(stroke_counts_total, by = by_keys) %>%
  mutate(stroke_n = tidyr::replace_na(stroke_n, 0L))

# we have now: 
# total_df ** total strokes**
# isch_df ** ischaemic strokes**
# pich_df ** pich strokes**
# sah_df ** sah strokes**


# -----------------------------------------------------
Age and sex adjusted poisson
# -----------------------------------------------------

# ==== TOTAL STROKES =====

library(dplyr)
library(broom)

# Reference categories
total_df <- total_df %>%
  mutate(
    ethnicity_group = factor(ethnicity_group, 
                              levels = c("White", "Black African", "Black Caribbean", "Other")),
    sex = factor(sex, levels = c("Male", "Female")),
    age_group = factor(age_group, ordered = TRUE)
  )

# Function: IRR by ethnicity vs White for one period
get_ethnicity_vs_white <- function(df, period_label) {
  df_period <- df %>% filter(period == period_label)

  fit <- glm(
    stroke_n ~ ethnicity_group + age_group + sex,
    offset = log(person_years),
    family = poisson(link = "log"),
    data = df_period
  )

  broom::tidy(fit, exponentiate = TRUE, conf.int = TRUE) %>%
    filter(grepl("^ethnicity_group", term)) %>%
    mutate(
      term = gsub("^ethnicity_group", "", term),
      period = period_label,
      IRR_label = sprintf("%.2f (%.2f–%.2f)", estimate, conf.low, conf.high)
    ) %>%
    select(period, ethnicity = term, IRR_label, estimate, conf.low, conf.high, p.value)
}

# Apply to all periods
periods <- unique(total_df$period)

irr_total_ethnicity <- purrr::map_dfr(periods, ~ get_ethnicity_vs_white(total_df, .x))

# Optional: reorder and format
irr_total_ethnicity <- irr_total_ethnicity %>%
  arrange(period, ethnicity)
irr_total_ethnicity <- irr_total_ethnicity %>%
  mutate(
    p_value_fmt = ifelse(p.value < 0.001, "<0.001", sprintf("%.3f", p.value))
  ) %>%
  select(period, ethnicity, IRR_label, estimate, conf.low, conf.high, p_value_fmt)

write_xlsx(irr_total_ethnicity, "irr_total_ethnicity.xlsx")

# -- men and women -- 
# Function: IRR by ethnicity vs White for one period & one sex
get_ethnicity_vs_white_sex <- function(df, period_label, sex_label) {
  df_sub <- df %>% filter(period == period_label, sex == sex_label)

  fit <- glm(
    stroke_n ~ ethnicity_group + age_group,  # no sex term because stratified
    offset = log(person_years),
    family = poisson(link = "log"),
    data = df_sub
  )

  broom::tidy(fit, exponentiate = TRUE, conf.int = TRUE) %>%
    filter(grepl("^ethnicity_group", term)) %>%
    mutate(
      term = gsub("^ethnicity_group", "", term),
      period = period_label,
      sex = sex_label,
      IRR_label = sprintf("%.2f (%.2f–%.2f)", estimate, conf.low, conf.high),
      p_value_fmt = ifelse(p.value < 0.001, "<0.001", sprintf("%.3f", p.value)),
      IRR_label = paste0(IRR_label, ", p=", p_value_fmt)
    ) %>%
    select(period, sex, ethnicity = term, IRR_label, estimate, conf.low, conf.high, p_value_fmt)
}

# Apply to all periods × sexes
sexes <- c("Male", "Female")
periods <- unique(total_df$period)

irr_total_ethnicity_bysex <- purrr::map_dfr(periods, function(per) {
  purrr::map_dfr(sexes, function(sex) {
    get_ethnicity_vs_white_sex(total_df, per, sex)
  })
}) %>%
  arrange(sex, period, ethnicity)

write_xlsx(irr_total_ethnicity_bysex, "irr_total_ethnicity_bysex.xlsx")

# ===== ISCHAEMIC =======


library(dplyr)
library(broom)

stroke_counts_isch <- slsr_clean_icd10_prepped %>%
  filter(stroke_type == "Ischaemic") %>%
  count(across(all_of(by_keys)), name = "stroke_n")

isch_df <- pop_person_years %>%
  left_join(stroke_counts_isch, by = by_keys) %>%
  mutate(stroke_n = tidyr::replace_na(stroke_n, 0L))

isch_df %>%
  summarise(
    total_strokes = sum(stroke_n, na.rm = TRUE),
    total_person_years = sum(person_years, na.rm = TRUE)
  )

# Reference categories
isch_df <- isch_df %>%
  mutate(
    ethnicity_group = factor(ethnicity_group, 
                              levels = c("White", "Black African", "Black Caribbean", "Other")),
    sex = factor(sex, levels = c("Male", "Female")),
    age_group = factor(age_group, ordered = TRUE)
  )

# Function: IRR by ethnicity vs White for one period
get_ethnicity_vs_white <- function(df, period_label) {
  df_period <- df %>% filter(period == period_label)

  fit <- glm(
    stroke_n ~ ethnicity_group + age_group + sex,
    offset = log(person_years),
    family = poisson(link = "log"),
    data = df_period
  )

  broom::tidy(fit, exponentiate = TRUE, conf.int = TRUE) %>%
    filter(grepl("^ethnicity_group", term)) %>%
    mutate(
      term = gsub("^ethnicity_group", "", term),
      period = period_label,
      IRR_label = sprintf("%.2f (%.2f–%.2f)", estimate, conf.low, conf.high)
    ) %>%
    select(period, ethnicity = term, IRR_label, estimate, conf.low, conf.high, p.value)
}

# Apply to all periods
periods <- unique(isch_df$period)

irr_isch_ethnicity <- purrr::map_dfr(periods, ~ get_ethnicity_vs_white(isch_df, .x))

# Optional: reorder and format
irr_isch_ethnicity <- irr_isch_ethnicity %>%
  arrange(period, ethnicity)
irr_isch_ethnicity <- irr_isch_ethnicity %>%
  mutate(
    p_value_fmt = ifelse(p.value < 0.001, "<0.001", sprintf("%.3f", p.value))
  ) %>%
  select(period, ethnicity, IRR_label, estimate, conf.low, conf.high, p_value_fmt)

write_xlsx(irr_isch_ethnicity, "irr_isch_ethnicity.xlsx")

# -- men and women -- 
# Function: IRR by ethnicity vs White for one period & one sex
get_ethnicity_vs_white_sex <- function(df, period_label, sex_label) {
  df_sub <- df %>% filter(period == period_label, sex == sex_label)

  fit <- glm(
    stroke_n ~ ethnicity_group + age_group,  # no sex term because stratified
    offset = log(person_years),
    family = poisson(link = "log"),
    data = df_sub
  )

  broom::tidy(fit, exponentiate = TRUE, conf.int = TRUE) %>%
    filter(grepl("^ethnicity_group", term)) %>%
    mutate(
      term = gsub("^ethnicity_group", "", term),
      period = period_label,
      sex = sex_label,
      IRR_label = sprintf("%.2f (%.2f–%.2f)", estimate, conf.low, conf.high),
      p_value_fmt = ifelse(p.value < 0.001, "<0.001", sprintf("%.3f", p.value)),
      IRR_label = paste0(IRR_label, ", p=", p_value_fmt)
    ) %>%
    select(period, sex, ethnicity = term, IRR_label, estimate, conf.low, conf.high, p_value_fmt)
}

# Apply to all periods × sexes
sexes <- c("Male", "Female")
periods <- unique(isch_df$period)

irr_isch_ethnicity_bysex <- purrr::map_dfr(periods, function(per) {
  purrr::map_dfr(sexes, function(sex) {
    get_ethnicity_vs_white_sex(isch_df, per, sex)
  })
}) %>%
  arrange(sex, period, ethnicity)

write_xlsx(irr_isch_ethnicity_bysex, "irr_isch_ethnicity_bysex.xlsx")

--> There is a problem -> hose zero-event strata with >0 person-years are valid denominators and dropping them would bias the IRRs upward.

That means your crash is classic complete separation:
in some periods, an ethnicity has all its events in only certain age–sex categories, leaving other categories with PY but no events. The Poisson likelihood can’t converge for that coefficient.

-> Then im gonna do: 1. Penalised Poisson regression (recommended)

Keeps all strata (including 0-event ones), stabilises estimates, and avoids convergence errors.

install.packages("brglm2")
library(dplyr)
library(broom)
library(brglm2)

# Reference categories
isch_df <- isch_df %>%
  mutate(
    ethnicity_group = factor(ethnicity_group, 
                              levels = c("White", "Black African", "Black Caribbean", "Other")),
    sex = factor(sex, levels = c("Male", "Female")),
    age_group = factor(age_group, ordered = TRUE)
  )

# Function: IRR by ethnicity vs White for one period (bias-reduced Poisson)
get_ethnicity_vs_white <- function(df, period_label) {
  df_period <- df %>% filter(period == period_label)

  fit <- glm(
    stroke_n ~ ethnicity_group + age_group + sex,
    offset = log(person_years),
    family = poisson(link = "log"),
    data = df_period,
    method = "brglmFit"  # bias-reduced fit from brglm2
  )

  broom::tidy(fit, exponentiate = TRUE, conf.int = TRUE) %>%
    filter(grepl("^ethnicity_group", term)) %>%
    mutate(
      term = gsub("^ethnicity_group", "", term),
      period = period_label,
      IRR_label = sprintf("%.2f (%.2f–%.2f)", estimate, conf.low, conf.high),
      p_value_fmt = ifelse(p.value < 0.001, "<0.001", sprintf("%.3f", p.value))
    ) %>%
    select(period, ethnicity = term, IRR_label, estimate, conf.low, conf.high, p_value_fmt)
}

# Run for all periods
periods <- unique(isch_df$period)
irr_isch_ethnicity <- purrr::map_dfr(periods, ~ get_ethnicity_vs_white(isch_df, .x)) %>%
  arrange(period, ethnicity)

write_xlsx(irr_isch_ethnicity, "irr_isch_ethnicity.xlsx")

# --- men and females ----
library(brglm2)

# Function: IRR by ethnicity vs White for one period & one sex (bias-reduced Poisson)
get_ethnicity_vs_white_sex <- function(df, period_label, sex_label) {
  df_sub <- df %>% filter(period == period_label, sex == sex_label)

  fit <- glm(
    stroke_n ~ ethnicity_group + age_group,  # sex excluded because stratified
    offset = log(person_years),
    family = poisson(link = "log"),
    data = df_sub,
    method = "brglmFit"
  )

  broom::tidy(fit, exponentiate = TRUE, conf.int = TRUE) %>%
    filter(grepl("^ethnicity_group", term)) %>%
    mutate(
      term = gsub("^ethnicity_group", "", term),
      period = period_label,
      sex = sex_label,
      IRR_label = sprintf("%.2f (%.2f–%.2f)", estimate, conf.low, conf.high),
      p_value_fmt = ifelse(p.value < 0.001, "<0.001", sprintf("%.3f", p.value)),
      IRR_label = paste0(IRR_label, ", p=", p_value_fmt)
    ) %>%
    select(period, sex, ethnicity = term, IRR_label, estimate, conf.low, conf.high, p_value_fmt)
}

# Apply to all periods × sexes
sexes <- c("Male", "Female")
periods <- unique(isch_df$period)

irr_isch_ethnicity_bysex <- purrr::map_dfr(periods, function(per) {
  purrr::map_dfr(sexes, function(sex) {
    get_ethnicity_vs_white_sex(isch_df, per, sex)
  })
}) %>%
  arrange(sex, period, ethnicity)

write_xlsx(irr_isch_ethnicity_bysex, "irr_isch_ethnicity_bysex.xlsx")

# === PICH and SAH ====
library(brglm2)
library(dplyr)
library(broom)
library(purrr)
library(writexl)

ref_levels <- c("White", "Black African", "Black Caribbean", "Other")

pich_df <- pich_df %>%
  mutate(
    ethnicity_group = factor(ethnicity_group, levels = ref_levels),
    sex = factor(sex, levels = c("Male", "Female")),
    age_group = factor(age_group, ordered = TRUE)
  )

sah_df <- sah_df %>%
  mutate(
    ethnicity_group = factor(ethnicity_group, levels = ref_levels),
    sex = factor(sex, levels = c("Male", "Female")),
    age_group = factor(age_group, ordered = TRUE)
  )

## ---------------------------
## Function: All-sex model
## ---------------------------
get_ethnicity_vs_white <- function(df, period_label) {
  df_period <- df %>% filter(period == period_label)

  fit <- glm(
    stroke_n ~ ethnicity_group + age_group + sex,
    offset = log(person_years),
    family = poisson(link = "log"),
    data = df_period,
    method = "brglmFit"
  )

  broom::tidy(fit, exponentiate = TRUE, conf.int = TRUE) %>%
    filter(grepl("^ethnicity_group", term)) %>%
    mutate(
      term = gsub("^ethnicity_group", "", term),
      period = period_label,
      IRR_label = sprintf("%.2f (%.2f–%.2f)", estimate, conf.low, conf.high),
      p_value_fmt = ifelse(p.value < 0.001, "<0.001", sprintf("%.3f", p.value))
    ) %>%
    select(period, ethnicity = term, IRR_label, estimate, conf.low, conf.high, p_value_fmt)
}

## ---------------------------
## Function: Sex-stratified model
## ---------------------------
get_ethnicity_vs_white_sex <- function(df, period_label, sex_label) {
  df_sub <- df %>% filter(period == period_label, sex == sex_label)

  fit <- glm(
    stroke_n ~ ethnicity_group + age_group,  # sex removed
    offset = log(person_years),
    family = poisson(link = "log"),
    data = df_sub,
    method = "brglmFit"
  )

  broom::tidy(fit, exponentiate = TRUE, conf.int = TRUE) %>%
    filter(grepl("^ethnicity_group", term)) %>%
    mutate(
      term = gsub("^ethnicity_group", "", term),
      period = period_label,
      sex = sex_label,
      IRR_label = sprintf("%.2f (%.2f–%.2f)", estimate, conf.low, conf.high),
      p_value_fmt = ifelse(p.value < 0.001, "<0.001", sprintf("%.3f", p.value)),
      IRR_label = paste0(IRR_label, ", p=", p_value_fmt)
    ) %>%
    select(period, sex, ethnicity = term, IRR_label, estimate, conf.low, conf.high, p_value_fmt)
}

## ---------------------------
## Apply to PICH
## ---------------------------
periods <- unique(pich_df$period)
sexes <- c("Male", "Female")

irr_pich_ethnicity <- map_dfr(periods, ~ get_ethnicity_vs_white(pich_df, .x))
irr_pich_ethnicity_bysex <- map_dfr(periods, function(per) {
  map_dfr(sexes, function(sex) {
    get_ethnicity_vs_white_sex(pich_df, per, sex)
  })
}) %>% arrange(sex, period, ethnicity)

write_xlsx(irr_pich_ethnicity, "irr_pich_ethnicity.xlsx")
write_xlsx(irr_pich_ethnicity_bysex, "irr_pich_ethnicity_bysex.xlsx")

## ---------------------------
## Apply to SAH
## ---------------------------
periods <- unique(sah_df$period)

irr_sah_ethnicity <- map_dfr(periods, ~ get_ethnicity_vs_white(sah_df, .x))
irr_sah_ethnicity_bysex <- map_dfr(periods, function(per) {
  map_dfr(sexes, function(sex) {
    get_ethnicity_vs_white_sex(sah_df, per, sex)
  })
}) %>% arrange(sex, period, ethnicity)

write_xlsx(irr_sah_ethnicity, "irr_sah_ethnicity.xlsx")
write_xlsx(irr_sah_ethnicity_bysex, "irr_sah_ethnicity_bysex.xlsx")

# ------------------------------------------------------------------
# Nice and new forest-plots :)
# ------------------------------------------------------------------

# --- deps ---
library(dplyr)
library(ggplot2)
library(stringr)

# --- palettes from you ---
ethnicity_colours <- c(
  "White" = "#E64173",          # bright pink
  "Black African" = "#984EA3",  # deep purple
  "Black Caribbean" = "#FF7F00",# orange
  "Other" = "#377EB8"           # blue
)
ethnicity_shapes <- c(
  "White" = 16,           # circle
  "Black African" = 17,   # triangle
  "Black Caribbean" = 15, # square
  "Other" = 18            # diamond
)

# --- helpers ---
order_periods <- function(x) {
  # ensures 1995-1999 appears at top, 2020-2024 bottom
  lev <- sort(unique(x))
  factor(x, levels = lev)
}
prep_forest_df <- function(df) {
  df %>%
    mutate(
      period = order_periods(period),
      ethnicity = factor(ethnicity, levels = names(ethnicity_colours))
    )
}

plot_forest_allsex <- function(df, title_text, subtitle_text = "Age- & sex-adjusted vs White") {
  df <- prep_forest_df(df)
  ggplot(
    df,
    aes(y = period, x = estimate, xmin = conf.low, xmax = conf.high,
        colour = ethnicity, shape = ethnicity)
  ) +
    geom_vline(xintercept = 1, linetype = "dashed", colour = "grey40") +
    geom_pointrange(position = position_dodge(width = 0.6), size = 0.7) +
    scale_x_log10(name = "Incidence Rate Ratio (IRR, log scale)") +
    scale_y_discrete(name = "Period") +
    scale_colour_manual(values = ethnicity_colours) +
    scale_shape_manual(values = ethnicity_shapes) +
    labs(title = title_text, subtitle = subtitle_text) +
    theme_minimal(base_size = 14) +
    theme(legend.position = "bottom", legend.title = element_blank())
}

plot_forest_bysex <- function(df, title_text, subtitle_text = "Age-adjusted vs White") {
  df <- prep_forest_df(df) %>%
    mutate(sex = factor(sex, levels = c("Male", "Female")))
  ggplot(
    df,
    aes(y = period, x = estimate, xmin = conf.low, xmax = conf.high,
        colour = ethnicity, shape = ethnicity)
  ) +
    geom_vline(xintercept = 1, linetype = "dashed", colour = "grey40") +
    geom_pointrange(position = position_dodge(width = 0.6), size = 0.7) +
    scale_x_log10(name = "Incidence Rate Ratio (IRR, log scale)") +
    scale_y_discrete(name = "Period") +
    scale_colour_manual(values = ethnicity_colours) +
    scale_shape_manual(values = ethnicity_shapes) +
    labs(title = title_text, subtitle = subtitle_text) +
    theme_minimal(base_size = 14) +
    theme(legend.position = "bottom", legend.title = element_blank()) +
    facet_grid(rows = vars(sex))
}

# --- build plots (expects your 8 data frames to exist) ---
p_total_all   <- plot_forest_allsex(irr_total_ethnicity,       "All Strokes — IRR by Ethnicity (All Sexes)")
p_isch_all    <- plot_forest_allsex(irr_isch_ethnicity,        "Ischaemic — IRR by Ethnicity (All Sexes)")
p_pich_all    <- plot_forest_allsex(irr_pich_ethnicity,        "PICH — IRR by Ethnicity (All Sexes)")
p_sah_sex     <- plot_forest_bysex( irr_sah_ethnicity_bysex,   "SAH — IRR by Ethnicity (Male / Female)")

# === SEX SPECIFIC ===
library(dplyr)
library(ggplot2)

# --- palette & shapes ---
ethnicity_colours <- c(
  "White" = "#E64173",
  "Black African" = "#984EA3",
  "Black Caribbean" = "#FF7F00",
  "Other" = "#377EB8"
)
ethnicity_shapes <- c("White"=16,"Black African"=17,"Black Caribbean"=15,"Other"=18)

# --- helpers ---
order_periods <- function(x) {
  lev <- sort(unique(x))
  factor(x, levels = rev(lev))   # earliest at top
}
prep_forest_df <- function(df) {
  df %>%
    mutate(
      period = order_periods(period),
      ethnicity = factor(ethnicity, levels = names(ethnicity_colours)),
      sex = factor(sex, levels = c("Male","Female"))
    )
}

plot_forest_one_sex <- function(df, sex_label, title_text,
                                subtitle_text = "Age-adjusted vs White") {
  d <- prep_forest_df(df) %>% filter(sex == sex_label)
  ggplot(
    d,
    aes(y = period, x = estimate, xmin = conf.low, xmax = conf.high,
        colour = ethnicity, shape = ethnicity, group = ethnicity)
  ) +
    geom_vline(xintercept = 1, linetype = "dashed", colour = "grey40") +
    geom_pointrange(position = position_dodge(width = 0.55), size = 0.7) +
    scale_x_log10(name = "Incidence Rate Ratio (IRR, log scale)") +
    scale_y_discrete(name = "Period") +
    scale_colour_manual(values = ethnicity_colours) +
    scale_shape_manual(values = ethnicity_shapes) +
    labs(title = paste0(title_text, " — ", sex_label), subtitle = subtitle_text) +
    theme_minimal(base_size = 14) +
    theme(legend.position = "bottom", legend.title = element_blank())
}

# --- build plots ---
p_total_male   <- plot_forest_one_sex(irr_total_ethnicity_bysex, "Male",   "Total Stroke")
p_total_female <- plot_forest_one_sex(irr_total_ethnicity_bysex, "Female", "Total Stroke")

p_isch_male    <- plot_forest_one_sex(irr_isch_ethnicity_bysex,  "Male",   "Ischaemic Stroke")
p_isch_female  <- plot_forest_one_sex(irr_isch_ethnicity_bysex,  "Female", "Ischaemic Stroke")

p_pich_male    <- plot_forest_one_sex(irr_pich_ethnicity_bysex,  "Male",   "PICH Stroke")
p_pich_female  <- plot_forest_one_sex(irr_pich_ethnicity_bysex,  "Female", "PICH Stroke")

p_sah_male     <- plot_forest_one_sex(irr_sah_ethnicity_bysex,   "Male",   "SAH Stroke")
p_sah_female   <- plot_forest_one_sex(irr_sah_ethnicity_bysex,   "Female", "SAH Stroke")

# --- view them in R ---
p_total_male;   p_total_female
p_isch_male;    p_isch_female
p_pich_male;    p_pich_female
p_sah_male;     p_sah_female

# --- save them if needed ---
# ggsave("total_male.png",   p_total_male,   width = 6, height = 4)
# ggsave("total_female.png", p_total_female, width = 6, height = 4)
# ggsave("isch_male.png",   p_isch_male,   width = 6, height = 4)
# ggsave("isch_female.png", p_isch_female, width = 6, height = 4)
# ggsave("pich_male.png",   p_pich_male,   width = 6, height = 4)
# ggsave("pich_female.png", p_pich_female, width = 6, height = 4)
# ggsave("sah_male.png",   p_sah_male,   width = 6, height = 4)
# ggsave("sah_female.png", p_sah_female, width = 6, height = 4)

# -----------------------------------------------------
IMD - Age and sex adjusted poisson
# -----------------------------------------------------

# ------- First harmonise the dataset for quintiles and deciles ----
library(dplyr)
library(tidyr)
library(broom)

# map case deciles (1=most deprived …10=least) to quintiles (1..5)
slsr_clean_icd10_prepped <- slsr_clean_icd10_prepped %>%
  mutate(
    period       = fix_dash(period),
    age_group    = fix_dash(age_group),
    sex          = recode_sex(sex),
    ethnicity_group = trimws(as.character(ethnicity_group)),
    imd_quintile = ifelse(!is.na(imd_decile), ceiling(imd_decile/2), NA_real_)
  )

   imd_decile     n
        <dbl> <int>
 1          1   799
 2          2  3137
 3          3  2026
 4          4   832
 5          5   330
 6          6   192
 7          7    93
 8          8    69
 9          9    47
10         10    23
11         NA   113

# --- Recode in SLSR cases in 1, 2 and >=3 ---

# Cases: collapse quintiles into 1, 2, and "3-5"
slsr_clean_icd10_prepped <- slsr_clean_icd10_prepped %>%
  mutate(
    period       = fix_dash(period),
    age_group    = fix_dash(age_group),
    sex          = recode_sex(sex),
    ethnicity_group = trimws(as.character(ethnicity_group)),
    imd_quintile = case_when(
      !is.na(imd_decile) & ceiling(imd_decile / 2) == 1 ~ "1",
      !is.na(imd_decile) & ceiling(imd_decile / 2) == 2 ~ "2",
      !is.na(imd_decile) & ceiling(imd_decile / 2) %in% c(3, 4, 5) ~ "3-5",
      TRUE ~ NA_character_
    )
  )


slsr_clean_icd10_prepped %>%
  count(imd_quintile_grouped)

  imd_quintile_grouped     n
  <chr>                <int>
1 1                     3936
2 2                     2858
3 3-5                    754
4 NA                     113

# --- Rebuild pop-years including IMD ---
pop_person_years_imd <- pop_full_interpolated_with_imd %>%
  mutate(
    age_group = case_when(
      age_group %in% c("18-19","20-24") ~ "18-24",
      age_group == "25-29" ~ "25-29",
      age_group == "30-34" ~ "30-34",
      age_group == "35-39" ~ "35-39",
      age_group == "40-44" ~ "40-44",
      age_group == "45-49" ~ "45-49",
      age_group == "50-54" ~ "50-54",
      age_group == "55-59" ~ "55-59",
      age_group == "60-64" ~ "60-64",
      age_group == "65-69" ~ "65-69",
      age_group == "70-74" ~ "70-74",
      age_group %in% c("75-79","80-84","85+") ~ "75+",
      TRUE ~ NA_character_
    ),
    ethnicity_group = case_when(
      ethnicity_grouped == "White" ~ "White",
      ethnicity_grouped == "Black Caribbean" ~ "Black Caribbean",
      ethnicity_grouped == "Black African" ~ "Black African",
      ethnicity_grouped %in% c("Black Other","Other") ~ "Other",
      TRUE ~ NA_character_
    ),
    period = case_when(
      year >= 1995 & year <= 1999 ~ "1995-1999",
      year >= 2000 & year <= 2004 ~ "2000-2004",
      year >= 2005 & year <= 2009 ~ "2005-2009",
      year >= 2010 & year <= 2014 ~ "2010-2014",
      year >= 2015 & year <= 2019 ~ "2015-2019",
      year >= 2020 & year <= 2024 ~ "2020-2024",
      TRUE ~ NA_character_
    ),
    sex = case_when(sex %in% c(1,"M") ~ "Male",
                    sex %in% c(2,"F") ~ "Female",
                    TRUE ~ as.character(sex))
  ) %>%
  filter(!is.na(age_group), !is.na(ethnicity_group), !is.na(sex), !is.na(period), !is.na(imd_quintile)) %>%
  group_by(period, age_group, sex, ethnicity_group, imd_quintile) %>%
  summarise(person_years = sum(pop_count_interp, na.rm = TRUE), .groups="drop")

by_keys_imd <- c("period","age_group","sex","ethnicity_group","imd_quintile")

pop_person_years_imd <- pop_person_years_imd %>%
  mutate(
    imd_quintile = case_when(
      imd_quintile == 1 ~ "1",
      imd_quintile == 2 ~ "2",
      imd_quintile == 3 ~ "3-5",
      TRUE ~ as.character(imd_quintile)
    ),
    imd_quintile = factor(imd_quintile, levels = c("1", "2", "3-5"))
  )

# helper to build df for a given subtype
build_df_with_imd <- function(st_type = c("Total","Ischaemic","PICH","SAH")) {
  st_type <- match.arg(st_type)
  cases <- slsr_clean_icd10_prepped
  if (st_type != "Total") cases <- cases %>% filter(stroke_type == st_type)

  stroke_counts <- cases %>%
    filter(!is.na(imd_quintile)) %>%
    count(across(all_of(by_keys_imd)), name = "stroke_n")

  pop_person_years_imd %>%
    left_join(stroke_counts, by = by_keys_imd) %>%
    mutate(stroke_n = tidyr::replace_na(stroke_n, 0L))
}

total_df_imd <- build_df_with_imd("Total")
isch_df_imd  <- build_df_with_imd("Ischaemic")
pich_df_imd  <- build_df_with_imd("PICH")
sah_df_imd   <- build_df_with_imd("SAH")

write_xlsx(total_df_imd, "total_df_imd.xlsx")
write_xlsx(isch_df_imd, "isch_df_imd.xlsx")
write_xlsx(pich_df_imd, "pich_df_imd.xlsx")
write_xlsx(sah_df_imd , "sah_df_imd .xlsx")

# Poisson IMD adjusted
library(dplyr)
library(purrr)
library(broom)
library(stringr)
library(tidyr)

# ---------- 1) Factor levels & cleaning ----------
set_factor_levels_imd3 <- function(df) {
  df %>%
    mutate(
      ethnicity_group = factor(ethnicity_group,
        levels = c("White","Black African","Black Caribbean","Other")),
      sex = factor(sex, levels = c("Male","Female")),
      # keep your existing age_group values; order doesn't matter for glm ref
      age_group = factor(age_group),
      # Use "3-5" (least deprived bucket) as reference
      imd_quintile = factor(as.character(imd_quintile), levels = c("3-5","2","1"))
    )
}

clean_for_glm <- function(df) {
  df %>%
    filter(
      is.finite(stroke_n), !is.na(stroke_n),
      is.finite(person_years), person_years > 0,
      !is.na(ethnicity_group), !is.na(age_group), !is.na(sex), !is.na(imd_quintile)
    )
}

safe_glm <- purrr::safely(function(formula, data) {
  glm(formula, offset = log(person_years), family = poisson(link = "log"), data = data)
})

tidy_ethnicity_terms <- function(model, extra_cols = list()) {
  broom::tidy(model, exponentiate = TRUE, conf.int = TRUE) %>%
    filter(str_starts(term, "ethnicity_group")) %>%
    mutate(
      ethnicity = sub("^ethnicity_group", "", term),
      p_value_fmt = ifelse(p.value < 0.001, "<0.001", sprintf("%.3f", p.value)),
      IRR_label  = sprintf("%.2f (%.2f–%.2f), p=%s", estimate, conf.low, conf.high, p_value_fmt)
    ) %>%
    select(ethnicity, IRR_label, estimate, conf.low, conf.high, p.value) %>%
    bind_cols(as_tibble(extra_cols))
}

# ---------- 2) Main model runners ----------
# Overall (both sexes together), adjusted for age_group, sex, imd_quintile
run_poisson_ethnicity <- function(df, label = NULL, by_period = FALSE) {
  dat <- df %>% clean_for_glm() %>% set_factor_levels_imd3()
  if (by_period) {
    periods <- sort(unique(dat$period))
    map_dfr(periods, function(per) {
      dsub <- filter(dat, period == per)
      res  <- safe_glm(stroke_n ~ ethnicity_group + age_group + sex + imd_quintile, dsub)
      if (!is.null(res$error)) {
        warning("Model failed for period ", per, ": ", res$error$message)
        return(tibble())
      }
      tidy_ethnicity_terms(res$result, list(period = per, group = label %||% "Total"))
    }) %>% arrange(period, ethnicity)
  } else {
    res <- safe_glm(stroke_n ~ ethnicity_group + age_group + sex + imd_quintile, dat)
    if (!is.null(res$error)) stop(res$error)
    tidy_ethnicity_terms(res$result, list(group = label %||% "Total"))
  }
}

# By sex (stratified), adjusted for age_group and imd_quintile (no sex term)
run_poisson_ethnicity_bysex <- function(df, label = NULL, by_period = FALSE) {
  dat <- df %>% clean_for_glm() %>% set_factor_levels_imd3()
  sexes <- c("Male","Female")
  if (by_period) {
    periods <- sort(unique(dat$period))
    map_dfr(periods, function(per) {
      map_dfr(sexes, function(sx) {
        dsub <- filter(dat, period == per, sex == sx)
        if (nrow(dsub) == 0 || length(unique(dsub$ethnicity_group)) < 2) return(tibble())
        res <- safe_glm(stroke_n ~ ethnicity_group + age_group + imd_quintile, dsub)
        if (!is.null(res$error)) {
          warning("Model failed for ", per, " / ", sx, ": ", res$error$message)
          return(tibble())
        }
        tidy_ethnicity_terms(res$result, list(period = per, sex = sx, group = label %||% "Total"))
      })
    }) %>% arrange(sex, period, ethnicity)
  } else {
    map_dfr(sexes, function(sx) {
      dsub <- filter(dat, sex == sx)
      if (nrow(dsub) == 0 || length(unique(dsub$ethnicity_group)) < 2) return(tibble())
      res <- safe_glm(stroke_n ~ ethnicity_group + age_group + imd_quintile, dsub)
      if (!is.null(res$error)) {
        warning("Model failed for sex ", sx, ": ", res$error$message)
        return(tibble())
      }
      tidy_ethnicity_terms(res$result, list(sex = sx, group = label %||% "Total"))
    }) %>% arrange(sex, ethnicity)
  }
}

# ---------- 3) Run for total_df_imd then subtypes ----------
# Choose whether you want period-specific results:
BY_PERIOD <- TRUE  # set TRUE if you want IRRs by period

# a) TOTAL
irr_total_overall     <- run_poisson_ethnicity(total_df_imd, label = "Total", by_period = BY_PERIOD)
irr_total_bysex       <- run_poisson_ethnicity_bysex(total_df_imd, label = "Total", by_period = BY_PERIOD)


# Bias-reduced version for subtypes

library(dplyr)
library(tidyr)
library(purrr)
library(stringr)
library(broom)
library(brglm2)
library(rlang)
library(tibble)

tidy_ethnicity_terms_brglm <- function(fit, extra_cols = list()) {
  coefs <- coef(fit)
  vcov_mat <- vcov(fit)
  se <- sqrt(diag(vcov_mat))

  terms <- names(coefs)
  ci_low  <- coefs - qnorm(0.975) * se
  ci_high <- coefs + qnorm(0.975) * se
  p_vals <- 2 * pnorm(-abs(coefs / se))

  result <- tibble::tibble(
    term = terms,
    estimate = exp(coefs),
    conf.low = exp(ci_low),
    conf.high = exp(ci_high),
    p.value = p_vals
  ) %>%
    filter(stringr::str_starts(term, "ethnicity_group")) %>%
    mutate(
      ethnicity = sub("^ethnicity_group", "", term),
      p_value_fmt = ifelse(p.value < 0.001, "<0.001", sprintf("%.3f", p.value)),
      IRR_label  = sprintf("%.2f (%.2f–%.2f), p=%s", estimate, conf.low, conf.high, p_value_fmt)
    ) %>%
    dplyr::select(ethnicity, IRR_label, estimate, conf.low, conf.high, p.value) %>%
    bind_cols(as_tibble(extra_cols))
}
tidy_ethnicity_terms_brglm <- function(fit, extra_cols = list()) {
  coefs <- coef(fit)
  vcov_mat <- vcov(fit)
  se <- sqrt(diag(vcov_mat))

  terms <- names(coefs)
  ci_low  <- coefs - qnorm(0.975) * se
  ci_high <- coefs + qnorm(0.975) * se
  p_vals <- 2 * pnorm(-abs(coefs / se))

  tibble(term = terms, estimate = exp(coefs), conf.low = exp(ci_low), conf.high = exp(ci_high), p.value = p_vals) %>%
    filter(str_starts(term, "ethnicity_group")) %>%
    mutate(
      ethnicity = sub("^ethnicity_group", "", term),
      p_value_fmt = ifelse(p.value < 0.001, "<0.001", sprintf("%.3f", p.value)),
      IRR_label  = sprintf("%.2f (%.2f–%.2f), p=%s", estimate, conf.low, conf.high, p_value_fmt)
    ) %>%
    select(ethnicity, IRR_label, estimate, conf.low, conf.high, p.value) %>%
    bind_cols(as_tibble(extra_cols))
}

# overall
run_brglm_ethnicity <- function(df, label = NULL, by_period = FALSE) {
  dat <- df %>% clean_for_glm() %>% set_factor_levels_imd3()
  if (by_period) {
    periods <- sort(unique(dat$period))
    map_dfr(periods, function(per) {
      dsub <- filter(dat, period == per)
      if (nrow(dsub) == 0) return(tibble())
      fit <- glm(stroke_n ~ ethnicity_group + age_group + sex + imd_quintile,
                 data = dsub,
                 offset = log(person_years),
                 family = poisson(link = "log"),
                 method = "brglmFit")
      tidy_ethnicity_terms_brglm(fit, list(period = per, group = label %||% "Total"))
    }) %>% arrange(period, ethnicity)
  } else {
    fit <- glm(stroke_n ~ ethnicity_group + age_group + sex + imd_quintile,
               data = dat,
               offset = log(person_years),
               family = poisson(link = "log"),
               method = "brglmFit")
    tidy_ethnicity_terms_brglm(fit, list(group = label %||% "Total"))
  }
}

# sex stratified
run_brglm_ethnicity_bysex <- function(df, label = NULL, by_period = FALSE) {
  dat <- df %>% clean_for_glm() %>% set_factor_levels_imd3()
  sexes <- c("Male", "Female")

  if (by_period) {
    periods <- sort(unique(dat$period))
    map_dfr(periods, function(per) {
      map_dfr(sexes, function(sx) {
        dsub <- filter(dat, period == per, sex == sx)
        if (nrow(dsub) == 0 || length(unique(dsub$ethnicity_group)) < 2) return(tibble())
        fit <- glm(stroke_n ~ ethnicity_group + age_group + imd_quintile,
                   data = dsub,
                   offset = log(person_years),
                   family = poisson(link = "log"),
                   method = "brglmFit")
        tidy_ethnicity_terms_brglm(fit, list(period = per, sex = sx, group = label %||% "Total"))
      })
    }) %>% arrange(sex, period, ethnicity)
  } else {
    map_dfr(sexes, function(sx) {
      dsub <- filter(dat, sex == sx)
      if (nrow(dsub) == 0 || length(unique(dsub$ethnicity_group)) < 2) return(tibble())
      fit <- glm(stroke_n ~ ethnicity_group + age_group + imd_quintile,
                 data = dsub,
                 offset = log(person_years),
                 family = poisson(link = "log"),
                 method = "brglmFit")
      tidy_ethnicity_terms_brglm(fit, list(sex = sx, group = label %||% "Total"))
    }) %>% arrange(sex, ethnicity)
  }
}

# Set this to TRUE or FALSE as needed
BY_PERIOD <- TRUE

# Total strokes
irr_total_overall_br <- run_brglm_ethnicity(total_df_imd, label = "Total", by_period = BY_PERIOD)
irr_total_bysex_br   <- run_brglm_ethnicity_bysex(total_df_imd, label = "Total", by_period = BY_PERIOD)

# Ischaemic
irr_isch_overall_br  <- run_brglm_ethnicity(isch_df_imd, label = "Ischaemic", by_period = BY_PERIOD)
irr_isch_bysex_br    <- run_brglm_ethnicity_bysex(isch_df_imd, label = "Ischaemic", by_period = BY_PERIOD)

# PICH
irr_pich_overall_br  <- run_brglm_ethnicity(pich_df_imd, label = "PICH", by_period = BY_PERIOD)
irr_pich_bysex_br    <- run_brglm_ethnicity_bysex(pich_df_imd, label = "PICH", by_period = BY_PERIOD)

# SAH
irr_sah_overall_br   <- run_brglm_ethnicity(sah_df_imd, label = "SAH", by_period = BY_PERIOD)
irr_sah_bysex_br     <- run_brglm_ethnicity_bysex(sah_df_imd, label = "SAH", by_period = BY_PERIOD)

# Load library
library(writexl)

# Create a named list of data frames
irr_list <- list(
  "Total_Overall"     = irr_total_overall_br,
  "Total_BySex"       = irr_total_bysex_br,
  "Ischaemic_Overall" = irr_isch_overall_br,
  "Ischaemic_BySex"   = irr_isch_bysex_br,
  "PICH_Overall"      = irr_pich_overall_br,
  "PICH_BySex"        = irr_pich_bysex_br,
  "SAH_Overall"       = irr_sah_overall_br,
  "SAH_BySex"         = irr_sah_bysex_br
)

# Save to Excel with one sheet per result
writexl::write_xlsx(irr_list, "IRR_brglm_results.xlsx")

#------ PLOT THEM -----

# --- deps ---
library(dplyr)
library(ggplot2)
library(stringr)

# --- palettes from you ---
ethnicity_colours <- c(
  "White" = "#E64173",          # bright pink
  "Black African" = "#984EA3",  # deep purple
  "Black Caribbean" = "#FF7F00",# orange
  "Other" = "#377EB8"           # blue
)
ethnicity_shapes <- c(
  "White" = 16,           # circle
  "Black African" = 17,   # triangle
  "Black Caribbean" = 15, # square
  "Other" = 18            # diamond
)

# --- helpers ---
order_periods <- function(x) {
  # ensures 1995-1999 appears at top, 2020-2024 bottom
  lev <- sort(unique(x))
  factor(x, levels = lev)
}
prep_forest_df <- function(df) {
  df %>%
    mutate(
      period = order_periods(period),
      ethnicity = factor(ethnicity, levels = names(ethnicity_colours))
    )
}

plot_forest_allsex <- function(df, title_text, subtitle_text = "Age- & sex-adjusted vs White") {
  df <- prep_forest_df(df)
  ggplot(
    df,
    aes(y = period, x = estimate, xmin = conf.low, xmax = conf.high,
        colour = ethnicity, shape = ethnicity)
  ) +
    geom_vline(xintercept = 1, linetype = "dashed", colour = "grey40") +
    geom_pointrange(position = position_dodge(width = 0.6), size = 0.7) +
    scale_x_log10(name = "Incidence Rate Ratio (IRR, log scale)") +
    scale_y_discrete(name = "Period") +
    scale_colour_manual(values = ethnicity_colours) +
    scale_shape_manual(values = ethnicity_shapes) +
    labs(title = title_text, subtitle = subtitle_text) +
    theme_minimal(base_size = 14) +
    theme(legend.position = "bottom", legend.title = element_blank())
}

# --- Use this for overall (not stratified by sex) ---
p_total_all   <- plot_forest_allsex(irr_total_overall_br, "All Stroke — IRR by Ethnicity (All Sexes)")
p_isch_all    <- plot_forest_allsex(irr_isch_overall_br,  "Ischaemic Stroke — IRR by Ethnicity (All Sexes)")
p_pich_all    <- plot_forest_allsex(irr_pich_overall_br,  "PICH Stroke — IRR by Ethnicity (All Sexes)")
p_sah_all     <- plot_forest_allsex(irr_sah_overall_br,   "SAH Stroke — IRR by Ethnicity (All Sexes)")


plot_forest_one_sex <- function(df, sex_label, title_text,
                                subtitle_text = "Age and IMD adjusted vs White") {
  d <- prep_forest_df(df) %>% filter(sex == sex_label)
  ggplot(
    d,
    aes(y = period, x = estimate, xmin = conf.low, xmax = conf.high,
        colour = ethnicity, shape = ethnicity, group = ethnicity)
  ) +
    geom_vline(xintercept = 1, linetype = "dashed", colour = "grey40") +
    geom_pointrange(position = position_dodge(width = 0.55), size = 0.7) +
    scale_x_log10(name = "Incidence Rate Ratio (IRR, log scale)") +
    scale_y_discrete(name = "Period") +
    scale_colour_manual(values = ethnicity_colours) +
    scale_shape_manual(values = ethnicity_shapes) +
    labs(title = paste0(title_text, " — ", sex_label), subtitle = subtitle_text) +
    theme_minimal(base_size = 14) +
    theme(legend.position = "bottom", legend.title = element_blank())
}

p_total_male   <- plot_forest_one_sex(irr_total_bysex_br, "Male",   "Total Stroke")
p_total_female <- plot_forest_one_sex(irr_total_bysex_br, "Female", "Total Stroke")

p_isch_male    <- plot_forest_one_sex(irr_isch_bysex_br,  "Male",   "Ischaemic Stroke")
p_isch_female  <- plot_forest_one_sex(irr_isch_bysex_br,  "Female", "Ischaemic Stroke")

p_pich_male    <- plot_forest_one_sex(irr_pich_bysex_br,  "Male",   "PICH Stroke")
p_pich_female  <- plot_forest_one_sex(irr_pich_bysex_br,  "Female", "PICH Stroke")

p_sah_male     <- plot_forest_one_sex(irr_sah_bysex_br,   "Male",   "SAH Stroke")
p_sah_female   <- plot_forest_one_sex(irr_sah_bysex_br,   "Female", "SAH Stroke")

p_total_male
p_total_female
p_isch_male
p_isch_female
p_pich_male
p_pich_female
p_sah_male
p_sah_female


# ---------------------------------------------------------------
# Interaction models
# ---------------------------------------------------------------

# Sanity check on the DF
check_counts <- function(df, name) {
  df %>%
    summarise(
      n_rows      = n(),
      total_cases = sum(stroke_n, na.rm = TRUE),
      total_py    = sum(person_years, na.rm = TRUE)
    ) %>%
    mutate(dataset = name, .before = 1)
}

bind_rows(
  check_counts(total_df_imd, "Total"),
  check_counts(isch_df_imd,  "Ischaemic"),
  check_counts(pich_df_imd,  "PICH"),
  check_counts(sah_df_imd,   "SAH")
)

# -------- interactions --------------
# Total strokes
library(dplyr)
library(forcats)
library(emmeans)
library(tibble)

# --- 1) Clean & set references (full cohort) ---
dat <- total_df_imd_dec %>%
  filter(is.finite(stroke_n), is.finite(person_years), person_years > 0) %>%
  mutate(
    ethnicity_group = fct_relevel(as.factor(ethnicity_group), "White"),
    imd_quintile    = fct_relevel(as.factor(imd_quintile), "3-5"), # ref = less deprived
    age_group       = as.factor(age_group),
    sex             = as.factor(sex)
  ) %>% droplevels()

# --- 2) Fit Poisson with interaction (age+sex adjusted) ---
fit <- glm(
  stroke_n ~ ethnicity_group * imd_quintile + age_group + sex,
  offset = log(person_years),
  family = poisson(link = "log"),
  data = dat
)

# --- 3) Get IRRs for every Eth×IMD vs White 3–5 ---
emm <- emmeans(fit, ~ ethnicity_group * imd_quintile)
ref_idx <- with(as.data.frame(emm),
                which(ethnicity_group == "White" & imd_quintile == "3-5"))

contr <- contrast(
  emm, method = "trt.vs.ctrl", ref = ref_idx,
  type = "response", adjust = "none"
)
out <- as.data.frame(contr)  # columns: contrast, ratio, SE, df, z.ratio, p.value

# --- 4) Parse the left-hand side "(Eth IMD) / (White 3-5)" robustly ---
lhs <- sub("\\s*/\\s*\\(White 3-5\\)$", "", out$contrast)  # strip " / (White 3-5)"
lhs <- sub("^\\(", "", lhs); lhs <- sub("\\)$", "", lhs)    # drop optional parens
parsed <- tibble(lhs = lhs) %>%
  tidyr::extract(lhs, into = c("ethnicity_group","imd_quintile"),
                 regex = "^(.*)\\s+([0-9\\-]+)$", remove = TRUE) %>%
  mutate(
    ethnicity_group = trimws(ethnicity_group),
    imd_quintile    = trimws(imd_quintile)
  )

# --- 5) Compute 95% CIs from ratio & SE (on response scale) ---
log_irr <- log(out$ratio)
se_log  <- out$SE / out$ratio
ci_low  <- exp(log_irr - 1.96 * se_log)
ci_high <- exp(log_irr + 1.96 * se_log)

irr_table <- tibble(
  ethnicity_group = parsed$ethnicity_group,
  imd_quintile    = parsed$imd_quintile,
  irr             = out$ratio,
  conf.low        = ci_low,
  conf.high       = ci_high,
  p_value         = out$p.value
)

# --- 6) Add the reference row (White, 3–5) = 1.00 ---
ref_row <- tibble(
  ethnicity_group = "White",
  imd_quintile    = "3-5",
  irr = 1, conf.low = 1, conf.high = 1, p_value = NA_real_
)

interaction_total_full <- bind_rows(irr_table, ref_row) %>%
  arrange(ethnicity_group, imd_quintile) %>%
  mutate(irr_label = sprintf("%.2f (%.2f–%.2f)", irr, conf.low, conf.high))

interaction_total_full

# === Females and males ===
run_eth_imd_interaction <- function(data, sex_filter = NULL) {
  dat <- data %>%
    filter(is.finite(stroke_n), is.finite(person_years), person_years > 0) %>%
    mutate(
      ethnicity_group = forcats::fct_relevel(as.factor(ethnicity_group), "White"),
      imd_quintile    = forcats::fct_relevel(as.factor(imd_quintile), "3-5"),
      age_group       = as.factor(age_group),
      sex             = as.factor(sex)
    )

  if (!is.null(sex_filter)) {
    dat <- droplevels(filter(dat, sex == sex_filter))
  }

  # Choose formula based on how many sex levels remain
  has_two_sexes <- nlevels(dat$sex) >= 2
  form <- if (has_two_sexes) {
    stroke_n ~ ethnicity_group * imd_quintile + age_group + sex
  } else {
    stroke_n ~ ethnicity_group * imd_quintile + age_group
  }

  fit <- glm(form, offset = log(person_years), family = poisson(link = "log"), data = dat)

  emm <- emmeans::emmeans(fit, ~ ethnicity_group * imd_quintile)
  ref_idx <- with(as.data.frame(emm),
                  which(ethnicity_group == "White" & imd_quintile == "3-5"))

  contr <- emmeans::contrast(emm, method = "trt.vs.ctrl", ref = ref_idx,
                             type = "response", adjust = "none")
  out <- as.data.frame(contr)

  # Parse "(Eth IMD) / (White 3-5)"
  lhs <- sub("\\s*/\\s*\\(White 3-5\\)$", "", out$contrast)
  lhs <- sub("^\\(", "", lhs); lhs <- sub("\\)$", "", lhs)
  parsed <- tidyr::extract(tibble::tibble(lhs = lhs),
                           lhs, into = c("ethnicity_group","imd_quintile"),
                           regex = "^(.*)\\s+([0-9\\-]+)$")

  # CIs from ratio & SE
  log_irr <- log(out$ratio); se_log <- out$SE / out$ratio
  ci_low  <- exp(log_irr - 1.96 * se_log)
  ci_high <- exp(log_irr + 1.96 * se_log)

  irr_table <- tibble::tibble(
    ethnicity_group = parsed$ethnicity_group,
    imd_quintile    = parsed$imd_quintile,
    irr             = out$ratio,
    conf.low        = ci_low,
    conf.high       = ci_high,
    p_value         = out$p.value
  )

  ref_row <- tibble::tibble(
    ethnicity_group = "White", imd_quintile = "3-5",
    irr = 1, conf.low = 1, conf.high = 1, p_value = NA_real_
  )

  irr_table %>%
    dplyr::bind_rows(ref_row) %>%
    dplyr::arrange(ethnicity_group, imd_quintile) %>%
    dplyr::mutate(irr_label = sprintf("%.2f (%.2f–%.2f)", irr, conf.low, conf.high))
}


# Model for total and subtypes

library(dplyr)
library(forcats)
library(emmeans)
library(tidyr)
library(tibble)
library(readr)
library(purrr)

# Core helper: whole-cohort Ethnicity × IMD, ref = White & IMD "3-5"
run_eth_imd_interaction_full <- function(data, sex_filter = NULL) {
  dat <- data %>%
    filter(is.finite(stroke_n), is.finite(person_years), person_years > 0) %>%
    mutate(
      ethnicity_group = fct_relevel(as.factor(ethnicity_group), "White"),
      imd_quintile    = fct_relevel(as.factor(imd_quintile), "3-5"),
      age_group       = as.factor(age_group),
      sex             = as.factor(sex)
    )

  if (!is.null(sex_filter)) dat <- droplevels(filter(dat, sex == sex_filter))

  # If only one sex remains, drop 'sex' from the model
  form <- if (nlevels(dat$sex) >= 2) {
    stroke_n ~ ethnicity_group * imd_quintile + age_group + sex
  } else {
    stroke_n ~ ethnicity_group * imd_quintile + age_group
  }

  fit <- glm(form, offset = log(person_years), family = poisson(link = "log"), data = dat)

  emm <- emmeans::emmeans(fit, ~ ethnicity_group * imd_quintile)
  ref_idx <- with(as.data.frame(emm), which(ethnicity_group == "White" & imd_quintile == "3-5"))

  contr <- emmeans::contrast(emm, method = "trt.vs.ctrl", ref = ref_idx,
                             type = "response", adjust = "none")
  out <- as.data.frame(contr)  # ratio, SE, p.value, contrast text

  # Parse "(Ethnicity IMD) / (White 3-5)"
  lhs <- sub("\\s*/\\s*\\(White 3-5\\)$", "", out$contrast)
  lhs <- sub("^\\(", "", lhs); lhs <- sub("\\)$", "", lhs)
  parsed <- tidyr::extract(tibble(lhs = lhs), "lhs",
                           into = c("ethnicity_group","imd_quintile"),
                           regex = "^(.*)\\s+([0-9\\-]+)$")

  # 95% CIs from ratio & SE (on response scale)
  log_irr <- log(out$ratio); se_log <- out$SE / out$ratio
  ci_low  <- exp(log_irr - 1.96 * se_log)
  ci_high <- exp(log_irr + 1.96 * se_log)

  irr_table <- tibble(
    ethnicity_group = parsed$ethnicity_group,
    imd_quintile    = parsed$imd_quintile,
    irr             = out$ratio,
    conf.low        = ci_low,
    conf.high       = ci_high,
    p_value         = out$p.value
  )

  # Add the explicit reference row
  ref_row <- tibble(
    ethnicity_group = "White", imd_quintile = "3-5",
    irr = 1, conf.low = 1, conf.high = 1, p_value = NA_real_
  )

  bind_rows(irr_table, ref_row) %>%
    arrange(ethnicity_group, imd_quintile) %>%
    mutate(irr_label = sprintf("%.2f (%.2f–%.2f)", irr, conf.low, conf.high))
}

# Run for each stroke class and sex group (whole cohort)
run_all_for_class_full <- function(df, stroke_class) {
  bind_rows(
    run_eth_imd_interaction_full(df)           %>% mutate(sex_group = "All"),
    run_eth_imd_interaction_full(df, "Female") %>% mutate(sex_group = "Female"),
    run_eth_imd_interaction_full(df, "Male")   %>% mutate(sex_group = "Male")
  ) %>%
    mutate(stroke_class = stroke_class, .before = 1)
}

all_results_full <- bind_rows(
  run_all_for_class_full(total_df_imd, "Total"),
  run_all_for_class_full(isch_df_imd,  "Ischaemic"),
  run_all_for_class_full(pich_df_imd,  "PICH"),
  run_all_for_class_full(sah_df_imd,   "SAH")
) %>%
  select(stroke_class, sex_group, ethnicity_group, imd_quintile,
         irr, conf.low, conf.high, p_value, irr_label)

# Save
write_csv(all_results_full, "eth_imd_interactions_fullCohort_bySex_allClasses.csv")


all_results_full <- all_results_full %>%
  mutate(p_value = format_p(p_value)) %>%
  dplyr::select(stroke_class, sex_group, ethnicity_group, imd_quintile,
                irr, conf.low, conf.high, p_value, irr_label)
 
library(openxlsx)

# Split into list of data frames by stroke_class
split_by_class <- split(all_results_full, all_results_full$stroke_class)

# Create workbook and add each sheet
wb <- createWorkbook()
for (cls in names(split_by_class)) {
  addWorksheet(wb, cls)
  writeData(wb, cls, split_by_class[[cls]])
}

# Save workbook
saveWorkbook(wb, "eth_imd_interactions_fullCohort_bySex_allClassespvalue.xlsx", overwrite = TRUE)

# Ordering by ethnicity
# Define ethnicity order
eth_order <- c("Black African", "Black Caribbean", "Other", "White")
sex_order <- c("All", "Female", "Male")

# Reorder
interactions_df <- all_results_full %>%
  mutate(
    ethnicity_group = factor(ethnicity_group, levels = eth_order),
    sex_group = factor(sex_group, levels = sex_order)
  ) %>%
  arrange(ethnicity_group, sex_group, imd_quintile)

# Split by stroke type and save
wb_int <- createWorkbook()
split_by_stroke <- split(interactions_df, interactions_df$stroke_class)
for (nm in names(split_by_stroke)) {
  addWorksheet(wb_int, nm)
  writeData(wb_int, nm, split_by_stroke[[nm]])
}
saveWorkbook(wb_int, "eth_imd_interactions_fullCohort_bySex_allClasses_ORDERED.xlsx", overwrite = TRUE)


#----------- Margins -----------------
erfect — we can make this one clean function that:

Runs the Poisson model for the full cohort (no decades)

Generates a prediction grid with person_years = 1 (so predictions are rates)

Age–sex standardises using your observed PY distribution as weights

Uses a parametric bootstrap to get 95% CIs for the marginal incidence per 100k

Runs for All, Female, Male

Loops over Total, Ischaemic, PICH, SAH

Saves one tab per stroke type in Excel.

library(dplyr)
library(tidyr)
library(tibble)

# Model-based adjusted incidence per 100k (full cohort)
marginal_incidence_full <- function(df, sex_filter = NULL) {
  dat <- df %>%
    filter(is.finite(stroke_n), is.finite(person_years), person_years > 0) %>%
    mutate(
      ethnicity_group = as.factor(ethnicity_group),
      imd_quintile    = as.factor(imd_quintile),
      age_group       = as.factor(age_group),
      sex             = as.factor(sex)
    )
  if (!is.null(sex_filter)) dat <- droplevels(filter(dat, sex == sex_filter))

  # weights: age×sex distribution of person-years in THIS subset
  w_tbl <- dat %>%
    group_by(age_group, sex) %>%
    summarise(w = sum(person_years), .groups = "drop") %>%
    mutate(w = w / sum(w))

  # Poisson model
  form <- if (nlevels(dat$sex) >= 2) {
    stroke_n ~ ethnicity_group * imd_quintile + age_group + sex
  } else {
    stroke_n ~ ethnicity_group * imd_quintile + age_group
  }
  fit <- glm(form, offset = log(person_years), family = poisson(link = "log"), data = dat)

  # Prediction grid: all Eth×IMD × age×sex, with PY=1 (offset=0 -> rates)
  lev <- fit$xlevels
  grid <- expand.grid(
    ethnicity_group = lev$ethnicity_group,
    imd_quintile    = lev$imd_quintile,
    age_group       = lev$age_group,
    sex             = if (is.null(lev$sex)) levels(dat$sex)[1] else lev$sex,
    KEEP.OUT.ATTRS = FALSE, stringsAsFactors = FALSE
  ) |> as_tibble() |>
    mutate(person_years = 1) |>
    left_join(w_tbl, by = c("age_group","sex")) |>
    mutate(w = replace_na(w, 0))

  # Predict expected counts with PY=1 -> rate
  grid$rate <- predict(fit, newdata = grid, type = "response")

  # Age–sex standardise (weighted mean of rates), per 100k
  out <- grid %>%
    group_by(ethnicity_group, imd_quintile) %>%
    summarise(incidence_per_100k = sum(rate * w) * 1e5, .groups = "drop") %>%
    mutate(sex_group = ifelse(is.null(sex_filter), "All", sex_filter)) %>%
    arrange(ethnicity_group, imd_quintile)

  out
}

# Use the full-cohort frames (no decades)
stroke_data_list <- list(
  Total     = total_df_imd,
  Ischaemic = isch_df_imd,
  PICH      = pich_df_imd,
  SAH       = sah_df_imd
)

all_marginal_results <- lapply(names(stroke_data_list), function(type) {
  df <- stroke_data_list[[type]]
  bind_rows(
    marginal_incidence_full(df),
    marginal_incidence_full(df, "Female"),
    marginal_incidence_full(df, "Male")
  ) %>% mutate(stroke_class = type, .before = 1)
})
names(all_marginal_results) <- names(stroke_data_list)

# Margins with CI 
library(dplyr)
library(tidyr)
library(tibble)
library(MASS)   # mvrnorm

marginal_incidence_full <- function(df, sex_filter = NULL, nboot = 1000) {
  dat <- df %>%
    filter(is.finite(stroke_n), is.finite(person_years), person_years > 0) %>%
    mutate(
      ethnicity_group = as.factor(ethnicity_group),
      imd_quintile    = as.factor(imd_quintile),
      age_group       = as.factor(age_group),
      sex             = as.factor(sex)
    )
  if (!is.null(sex_filter)) dat <- droplevels(filter(dat, sex == sex_filter))

  # Age–sex weights from observed PY in THIS subset
  w_tbl <- dat %>%
    group_by(age_group, sex) %>%
    summarise(w = sum(person_years), .groups = "drop") %>%
    mutate(w = w / sum(w))

  # Model (drop 'sex' if only one level remains)
  form <- if (nlevels(dat$sex) >= 2) {
    stroke_n ~ ethnicity_group * imd_quintile + age_group + sex
  } else {
    stroke_n ~ ethnicity_group * imd_quintile + age_group
  }
  fit <- glm(form, offset = log(person_years), family = poisson("log"), data = dat)

  # Prediction grid: all Eth×IMD × age×sex with PY=1 (offset=0)
  lev <- fit$xlevels
  grid <- expand.grid(
    ethnicity_group = lev$ethnicity_group,
    imd_quintile    = lev$imd_quintile,
    age_group       = lev$age_group,
    sex             = if (!is.null(lev$sex)) lev$sex else levels(dat$sex)[1],
    KEEP.OUT.ATTRS = FALSE, stringsAsFactors = FALSE
  ) %>%
    as_tibble() %>%
    mutate(person_years = 1) %>%
    left_join(w_tbl, by = c("age_group","sex")) %>%
    mutate(w = tidyr::replace_na(w, 0))

  # Build model matrix for GRID using the model's terms & contrasts (this fixes your error)
  TT <- delete.response(terms(fit))   # drop response from terms
  X  <- model.matrix(TT, data = grid, contrasts.arg = fit$contrasts)

  # Point estimate: eta = X %*% beta ; rate = exp(eta) (since offset = 0 with PY=1)
  eta  <- as.vector(X %*% coef(fit))
  rate <- exp(eta)
  grid$rate <- rate

  point_est <- grid %>%
    group_by(ethnicity_group, imd_quintile) %>%
    summarise(incidence_per_100k = sum(rate * w) * 1e5, .groups = "drop")

  # ---- Parametric bootstrap for CIs ----
  coefs <- coef(fit)
  V     <- vcov(fit)

  # Preallocate
  k <- nrow(point_est)   # number of Eth×IMD combos
  boot_mat <- matrix(NA_real_, nrow = nboot, ncol = k)

  for (b in seq_len(nboot)) {
    beta_b <- MASS::mvrnorm(1, mu = coefs, Sigma = V)
    eta_b  <- as.vector(X %*% beta_b)
    rate_b <- exp(eta_b)
    vals_b <- tapply(rate_b * grid$w, INDEX = interaction(grid$ethnicity_group, grid$imd_quintile, drop = TRUE), sum)
    boot_mat[b, ] <- as.numeric(vals_b) * 1e5
  }

  qs <- apply(boot_mat, 2, quantile, probs = c(0.025, 0.975), na.rm = TRUE)
  ci_df <- tibble(
    lower_CI = as.numeric(qs[1, ]),
    upper_CI = as.numeric(qs[2, ])
  )

  out <- bind_cols(point_est, ci_df) %>%
    mutate(sex_group = ifelse(is.null(sex_filter), "All", sex_filter)) %>%
    arrange(ethnicity_group, imd_quintile)

  out
}
stroke_data_list <- list(
  Total     = total_df_imd,
  Ischaemic = isch_df_imd,
  PICH      = pich_df_imd,
  SAH       = sah_df_imd
)

all_results <- lapply(names(stroke_data_list), function(type) {
  df <- stroke_data_list[[type]]
  bind_rows(
    marginal_incidence_full(df, NULL,   nboot = 1000),
    marginal_incidence_full(df, "Female", nboot = 1000),
    marginal_incidence_full(df, "Male",   nboot = 1000)
  ) %>% mutate(stroke_class = type, .before = 1)
})
names(all_results) <- names(stroke_data_list)

library(openxlsx)
wb <- createWorkbook()
for (type in names(all_results)) {
  addWorksheet(wb, type)
  writeData(wb, type, all_results[[type]])
}
saveWorkbook(wb, "marginal_incidence_fullCohort_bySex_allClasses_withCIs.xlsx", overwrite = TRUE)

all_results <- lapply(names(stroke_data_list), function(type) {
  df <- stroke_data_list[[type]]
  
  bind_rows(
    marginal_incidence_full(df, NULL,     nboot = 1000),
    marginal_incidence_full(df, "Female", nboot = 1000),
    marginal_incidence_full(df, "Male",   nboot = 1000)
  ) %>%
    mutate(
      stroke_class = type, 
      .before = 1,
      ci_label = sprintf(
        "%.1f (%.1f–%.1f)",
        round(incidence_per_100k, 1),
        round(lower_CI, 1),
        round(upper_CI, 1)
      )
    )
})
names(all_results) <- names(stroke_data_list)

# Save to Excel
library(openxlsx)
wb <- createWorkbook()
for (type in names(all_results)) {
  addWorksheet(wb, type)
  writeData(wb, type, all_results[[type]])
}
saveWorkbook(wb, "marginal_incidence_fullCohort_bySex_allClasses_withCIs_formatted.xlsx", overwrite = TRUE)

# Ordering  by ethnicity
# Bind margins list into one df
margins_df <- bind_rows(all_results) %>%
  mutate(
    ethnicity_group = factor(ethnicity_group, levels = eth_order),
    sex_group = factor(sex_group, levels = sex_order)
  ) %>%
  arrange(ethnicity_group, sex_group, imd_quintile)

# Split by stroke type and save
wb_marg <- createWorkbook()
splitM_by_stroke <- split(margins_df, margins_df$stroke_class)
for (nm in names(splitM_by_stroke)) {
  addWorksheet(wb_marg, nm)
  writeData(wb_marg, nm, splitM_by_stroke[[nm]])
}
saveWorkbook(wb_marg, "marginal_incidence_fullCohort_bySex_allClasses_withCIs_ORDERED.xlsx", overwrite = TRUE)


# ----------------------------
Plotting margins
# ----------------------------

margins_df <- dplyr::bind_rows(all_results)

library(dplyr)
library(ggplot2)

# Ensure the data are numeric + relabel IMD
margins_df <- margins_df %>%
  mutate(
    incidence_per_100k = as.numeric(incidence_per_100k),
    lower_CI           = as.numeric(lower_CI),
    upper_CI           = as.numeric(upper_CI),
    # New IMD labels
    imd_label = dplyr::recode(as.character(imd_quintile),
                              "1"   = "IMD 1",
                              "2"   = "IMD 2",
                              "3-5" = "IMD ≥3"),
    imd_label = factor(imd_label, levels = c("IMD 1","IMD 2","IMD ≥3")),
    # Ethnicity order (edit if you like)
    ethnicity_group = factor(ethnicity_group,
                             levels = c("Black African","Black Caribbean","Other","White")),
    sex_group    = factor(sex_group, levels = c("All","Female","Male")),
    stroke_class = factor(stroke_class, levels = c("Total","Ischaemic","PICH","SAH"))
  )

# Purple gradient for IMD (light = IMD 1, medium = IMD 2, dark = IMD ≥3)
imd_purples <- c("IMD 1" = "#E6DAF4",  # light lavender
                 "IMD 2" = "#B48CD8",  # medium purple
                 "IMD ≥3"= "#7E57C2")  # deep purple

plot_margins_bar3 <- function(df, stroke = "Total", sex = "All",
                              save_to = NULL, width = 7.5, height = 4.8) {
  pd <- position_dodge(width = 0.75)

  p <- df %>%
    filter(stroke_class == stroke, sex_group == sex) %>%
    ggplot(aes(x = ethnicity_group, y = incidence_per_100k, fill = imd_label)) +
    geom_col(position = pd, width = 0.72, colour = "#FFFFFF", linewidth = 0.3) +
    geom_errorbar(aes(ymin = lower_CI, ymax = upper_CI),
                  position = pd, width = 0.18, linewidth = 0.6) +
    scale_fill_manual(values = imd_purples, name = "Deprivation (IMD)") +
    labs(
      title = paste(stroke, "—", sex),
      x = "Ethnicity",
      y = "Age–sex adjusted incidence per 100,000 (95% CI)"
    ) +
    theme_minimal(base_size = 12) +
    theme(
      panel.grid.minor = element_blank(),
      legend.position = "bottom",
      legend.box = "vertical",
      plot.title = element_text(face = "bold")
    )

  if (!is.null(save_to)) ggsave(save_to, p, width = width, height = height, dpi = 300)
  p
}

# Examples:
p_total_all    <- plot_margins_bar3(margins_df, stroke = "Total", sex = "All")
p_total_female <- plot_margins_bar3(margins_df, stroke = "Total", sex = "Female")
p_total_male   <- plot_margins_bar3(margins_df, stroke = "Total", sex = "Male")

# Batch export all (stroke × sex) combos if you want:
for (st in levels(margins_df$stroke_class)) {
  for (sx in levels(margins_df$sex_group)) {
    fn <- paste0("margins_", gsub(" ", "", st), "_", sx, ".png")
    plot_margins_bar3(margins_df, stroke = st, sex = sx, save_to = fn)
  }
}

# The CIs are wrong: 

library(dplyr)
library(tidyr)
library(tibble)

# Model-based adjusted incidence per 100k (full cohort)
marginal_incidence_full <- function(df, sex_filter = NULL) {
  dat <- df %>%
    filter(is.finite(stroke_n), is.finite(person_years), person_years > 0) %>%
    mutate(
      ethnicity_group = as.factor(ethnicity_group),
      imd_quintile    = as.factor(imd_quintile),
      age_group       = as.factor(age_group),
      sex             = as.factor(sex)
    )
  if (!is.null(sex_filter)) dat <- droplevels(filter(dat, sex == sex_filter))

  # weights: age×sex distribution of person-years in THIS subset
  w_tbl <- dat %>%
    group_by(age_group, sex) %>%
    summarise(w = sum(person_years), .groups = "drop") %>%
    mutate(w = w / sum(w))

  # Poisson model
  form <- if (nlevels(dat$sex) >= 2) {
    stroke_n ~ ethnicity_group * imd_quintile + age_group + sex
  } else {
    stroke_n ~ ethnicity_group * imd_quintile + age_group
  }
  fit <- glm(form, offset = log(person_years), family = poisson(link = "log"), data = dat)

  # Prediction grid: all Eth×IMD × age×sex, with PY=1 (offset=0 -> rates)
  lev <- fit$xlevels
  grid <- expand.grid(
    ethnicity_group = lev$ethnicity_group,
    imd_quintile    = lev$imd_quintile,
    age_group       = lev$age_group,
    sex             = if (is.null(lev$sex)) levels(dat$sex)[1] else lev$sex,
    KEEP.OUT.ATTRS = FALSE, stringsAsFactors = FALSE
  ) |> as_tibble() |>
    mutate(person_years = 1) |>
    left_join(w_tbl, by = c("age_group","sex")) |>
    mutate(w = replace_na(w, 0))

  # Predict expected counts with PY=1 -> rate
  grid$rate <- predict(fit, newdata = grid, type = "response")

  # Age–sex standardise (weighted mean of rates), per 100k
  out <- grid %>%
    group_by(ethnicity_group, imd_quintile) %>%
    summarise(incidence_per_100k = sum(rate * w) * 1e5, .groups = "drop") %>%
    mutate(sex_group = ifelse(is.null(sex_filter), "All", sex_filter)) %>%
    arrange(ethnicity_group, imd_quintile)

  out
}

# Use the full-cohort frames (no decades)
stroke_data_list <- list(
  Total     = total_df_imd,
  Ischaemic = isch_df_imd,
  PICH      = pich_df_imd,
  SAH       = sah_df_imd
)

all_marginal_results <- lapply(names(stroke_data_list), function(type) {
  df <- stroke_data_list[[type]]
  bind_rows(
    marginal_incidence_full(df),
    marginal_incidence_full(df, "Female"),
    marginal_incidence_full(df, "Male")
  ) %>% mutate(stroke_class = type, .before = 1)
})
names(all_marginal_results) <- names(stroke_data_list)

# **** Margins with CI ***
library(dplyr)
library(tidyr)
library(tibble)
library(MASS)   # mvrnorm

marginal_incidence_full <- function(df, sex_filter = NULL, nboot = 1000) {
  dat <- df %>%
    filter(is.finite(stroke_n), is.finite(person_years), person_years > 0) %>%
    mutate(
      ethnicity_group = as.factor(ethnicity_group),
      imd_quintile    = as.factor(imd_quintile),
      age_group       = as.factor(age_group),
      sex             = as.factor(sex)
    )
  if (!is.null(sex_filter)) dat <- droplevels(filter(dat, sex == sex_filter))

  # Age–sex weights from observed PY in THIS subset
  w_tbl <- dat %>%
    group_by(age_group, sex) %>%
    summarise(w = sum(person_years), .groups = "drop") %>%
    mutate(w = w / sum(w))

  # Model (drop 'sex' if only one level remains)
  form <- if (nlevels(dat$sex) >= 2) {
    stroke_n ~ ethnicity_group * imd_quintile + age_group + sex
  } else {
    stroke_n ~ ethnicity_group * imd_quintile + age_group
  }
  fit <- glm(form, offset = log(person_years), family = poisson("log"), data = dat)

  # Prediction grid: all Eth×IMD × age×sex with PY=1 (offset=0)
  lev <- fit$xlevels
  grid <- expand.grid(
    ethnicity_group = lev$ethnicity_group,
    imd_quintile    = lev$imd_quintile,
    age_group       = lev$age_group,
    sex             = if (!is.null(lev$sex)) lev$sex else levels(dat$sex)[1],
    KEEP.OUT.ATTRS = FALSE, stringsAsFactors = FALSE
  ) %>%
    as_tibble() %>%
    mutate(person_years = 1) %>%
    left_join(w_tbl, by = c("age_group","sex")) %>%
    mutate(w = tidyr::replace_na(w, 0))

  # Build model matrix for GRID using the model's terms & contrasts (this fixes your error)
  TT <- delete.response(terms(fit))   # drop response from terms
  X  <- model.matrix(TT, data = grid, contrasts.arg = fit$contrasts)

  # Point estimate: eta = X %*% beta ; rate = exp(eta) (since offset = 0 with PY=1)
  eta  <- as.vector(X %*% coef(fit))
  rate <- exp(eta)
  grid$rate <- rate

  point_est <- grid %>%
    group_by(ethnicity_group, imd_quintile) %>%
    summarise(incidence_per_100k = sum(rate * w) * 1e5, .groups = "drop")

  # ---- Parametric bootstrap for CIs (order-safe) ----
coefs <- coef(fit)
V     <- vcov(fit)

# Key in the order of point_est rows
key_vec <- paste(point_est$ethnicity_group, point_est$imd_quintile, sep = " | ")

# Preallocate with column names = key order
boot_mat <- matrix(NA_real_, nrow = nboot, ncol = nrow(point_est),
                   dimnames = list(NULL, key_vec))

for (b in seq_len(nboot)) {
  beta_b <- MASS::mvrnorm(1, mu = coefs, Sigma = V)
  eta_b  <- as.vector(X %*% beta_b)
  rate_b <- exp(eta_b)

  # Aggregate to Eth×IMD and coerce to the SAME order as key_vec
  agg_b <- tapply(rate_b * grid$w,
                  INDEX = paste(grid$ethnicity_group, grid$imd_quintile, sep = " | "),
                  FUN = sum)
  agg_b <- agg_b[key_vec]                 # reindex to the point_est order
  boot_mat[b, ] <- as.numeric(agg_b) * 1e5
}

qs <- apply(boot_mat, 2, quantile, probs = c(0.025, 0.975), na.rm = TRUE)

ci_df <- tibble(
  lower_CI = as.numeric(qs[1, ]),
  upper_CI = as.numeric(qs[2, ])
)

out <- bind_cols(point_est, ci_df) %>%
  mutate(sex_group = ifelse(is.null(sex_filter), "All", sex_filter)) %>%
  arrange(ethnicity_group, imd_quintile)

  out
}


stroke_data_list <- list(
  Total     = total_df_imd,
  Ischaemic = isch_df_imd,
  PICH      = pich_df_imd,
  SAH       = sah_df_imd
)

all_results <- lapply(names(stroke_data_list), function(type) {
  df <- stroke_data_list[[type]]
  bind_rows(
    marginal_incidence_full(df, NULL,   nboot = 1000),
    marginal_incidence_full(df, "Female", nboot = 1000),
    marginal_incidence_full(df, "Male",   nboot = 1000)
  ) %>% mutate(stroke_class = type, .before = 1)
})
names(all_results) <- names(stroke_data_list)

library(openxlsx)
wb <- createWorkbook()
for (type in names(all_results)) {
  addWorksheet(wb, type)
  writeData(wb, type, all_results[[type]])
}
saveWorkbook(wb, "marginal_incidence_fullCohort_bySex_allClasses_withCIs.xlsx", overwrite = TRUE)

all_results <- lapply(names(stroke_data_list), function(type) {
  df <- stroke_data_list[[type]]
  
  bind_rows(
    marginal_incidence_full(df, NULL,     nboot = 1000),
    marginal_incidence_full(df, "Female", nboot = 1000),
    marginal_incidence_full(df, "Male",   nboot = 1000)
  ) %>%
    mutate(
      stroke_class = type, 
      .before = 1,
      ci_label = sprintf(
        "%.1f (%.1f–%.1f)",
        round(incidence_per_100k, 1),
        round(lower_CI, 1),
        round(upper_CI, 1)
      )
    )
})
names(all_results) <- names(stroke_data_list)

# Save to Excel
library(openxlsx)
wb <- createWorkbook()
for (type in names(all_results)) {
  addWorksheet(wb, type)
  writeData(wb, type, all_results[[type]])
}
saveWorkbook(wb, "marginal_incidence_fullCohort_bySex_allClasses_withCIs_formatted.xlsx", overwrite = TRUE)

# Ordering  by ethnicity
# Bind margins list into one df
margins_df <- bind_rows(all_results) %>%
  mutate(
    ethnicity_group = factor(ethnicity_group, levels = eth_order),
    sex_group = factor(sex_group, levels = sex_order)
  ) %>%
  arrange(ethnicity_group, sex_group, imd_quintile)

# Split by stroke type and save
wb_marg <- createWorkbook()
splitM_by_stroke <- split(margins_df, margins_df$stroke_class)
for (nm in names(splitM_by_stroke)) {
  addWorksheet(wb_marg, nm)
  writeData(wb_marg, nm, splitM_by_stroke[[nm]])
}
saveWorkbook(wb_marg, "marginal_incidence_fullCohort_bySex_allClasses_withCIs_ORDERED_CIs.xlsx", overwrite = TRUE)

# And plot safely

# If results are still a list:
margins_df <- dplyr::bind_rows(all_results) %>%
  dplyr::mutate(
    incidence_per_100k = as.numeric(incidence_per_100k),
    lower_CI = as.numeric(lower_CI),
    upper_CI = as.numeric(upper_CI),
    imd_label = dplyr::recode(as.character(imd_quintile),
                              "1"="IMD 1","2"="IMD 2","3-5"="IMD ≥3"),
    imd_label = factor(imd_label, levels = c("IMD 1","IMD 2","IMD ≥3")),
    ethnicity_group = factor(ethnicity_group,
                             levels = c("Black African","Black Caribbean","Other","White")),
    sex_group = factor(sex_group, levels = c("All","Female","Male")),
    stroke_class = factor(stroke_class, levels = c("Total","Ischaemic","PICH","SAH"))
  )

imd_purples <- c("IMD 1"="#E6DAF4","IMD 2"="#B48CD8","IMD ≥3"="#7E57C2")

stroke_labels <- c(
  "Total"     = "Total strokes",
  "Ischaemic" = "Ischaemic stroke",
  "PICH"      = "Primary intracerebral haemorrhage",
  "SAH"       = "Subarachnoid haemorrhage"
)

sex_labels <- c(
  "All"    = "Total population",
  "Female" = "Females",
  "Male"   = "Males"
)

plot_margins_bar3 <- function(df, stroke, sex, file = NULL) {
  pd <- position_dodge(width = 0.75)
  p <- df %>%
    dplyr::filter(stroke_class == stroke, sex_group == sex) %>%
    ggplot(aes(x = ethnicity_group, y = incidence_per_100k, fill = imd_label)) +
    geom_col(position = pd, width = 0.72, colour = "white", linewidth = 0.3) +
    geom_errorbar(aes(ymin = lower_CI, ymax = upper_CI),
                  position = pd, width = 0.18, linewidth = 0.6) +
    scale_fill_manual(values = imd_purples, name = "Deprivation (IMD)") +
    labs(
      title = paste(stroke_labels[stroke], "—", sex_labels[sex]),
      x = "Ethnicity",
      y = "Age–sex adjusted incidence per 100,000 (95% CI)"
    ) +
    theme_minimal(base_size = 12) +
    theme(
      panel.grid.minor = element_blank(),
      legend.position = "bottom",
      legend.box = "vertical",
      plot.title = element_text(face = "bold")
    )
  if (!is.null(file)) ggsave(file, p, width = 7.5, height = 4.8, dpi = 300)
  p
}


# Export all combos
for (st in levels(margins_df$stroke_class)) {
  for (sx in levels(margins_df$sex_group)) {
    fn <- paste0("margins_", gsub(" ", "", st), "_", sx, ".png")
    plot_margins_bar3(margins_df, stroke = st, sex = sx, file = fn)
  }
}


# === Describing the population =====

library(dplyr)
library(ggplot2)

ethnicity_colours <- c(
  "White" = "#E64173",          # bright pink
  "Black African" = "#984EA3",  # deep purple
  "Black Caribbean" = "#FF7F00",# orange
  "Other" = "#377EB8"           # blue
)

pop_plot <- pop_person_years_imd %>%
  group_by(period, ethnicity_group) %>%
  summarise(total_py = sum(person_years, na.rm = TRUE), .groups = "drop") %>%
  group_by(period) %>%
  mutate(perc = total_py / sum(total_py) * 100) %>%
  ggplot(aes(x = period, y = perc, fill = ethnicity_group)) +
  geom_bar(stat = "identity", colour = "black", width = 0.7) +
  scale_fill_manual(values = ethnicity_colours, name = "Ethnicity") +
  scale_y_continuous(expand = c(0, 0), labels = scales::percent_format(scale = 1)) +
  labs(
    x = "Period",
    y = "Proportion of total person-years (%)",
    title = "Ethnic composition of the base population by period"
  ) +
  theme_minimal(base_size = 12) +
  theme(
    panel.grid.minor = element_blank(),
    panel.grid.major.x = element_blank(),
    legend.position = "bottom",
    plot.title = element_text(face = "bold")
  )

pop_plot

# And by IMD

library(dplyr)
library(ggplot2)

# Purple gradient for IMD
imd_purples <- c("IMD 1"="#E6DAF4", "IMD 2"="#B48CD8", "IMD ≥3"="#7E57C2")
eth_order   <- c("Black African","Black Caribbean","Other","White")

# ---------- BY PERIOD ----------
df_imd_period <- pop_person_years_imd %>%
  mutate(
    imd_grp = dplyr::recode(as.character(imd_quintile),
                            "1"="IMD 1","2"="IMD 2","3-5"="IMD ≥3"),
    ethnicity_group = factor(ethnicity_group, levels = eth_order)
  ) %>%
  group_by(period, ethnicity_group, imd_grp) %>%
  summarise(py = sum(person_years, na.rm = TRUE), .groups = "drop") %>%
  group_by(period, ethnicity_group) %>%
  mutate(prop = py / sum(py)) %>%
  ungroup()

p_imd_by_period <- ggplot(df_imd_period,
  aes(x = ethnicity_group, y = prop, fill = imd_grp)) +
  geom_col(width = 0.75, colour = "white", linewidth = 0.2) +
  scale_fill_manual(values = imd_purples, name = "Deprivation (IMD)") +
  scale_y_continuous(labels = scales::percent_format(), expand = c(0,0)) +
  labs(x = "Ethnicity", y = "Share of person-years",
       title = "IMD composition by ethnicity and period") +
  facet_wrap(~ period, nrow = 1) +
  theme_minimal(base_size = 12) +
  theme(panel.grid.minor = element_blank(),
        legend.position = "bottom",
        plot.title = element_text(face = "bold"))
# Reorder IMD factor so ≥3 is last
df_imd_period <- df_imd_period %>%
  mutate(imd_grp = factor(imd_grp, levels = c("IMD 1", "IMD 2", "IMD ≥3")))

p_imd_by_period <- ggplot(df_imd_period,
  aes(x = ethnicity_group, y = prop, fill = imd_grp)) +
  geom_col(width = 0.75, colour = "white", linewidth = 0.2) +
  scale_fill_manual(values = imd_purples, name = "Deprivation (IMD)") +
  scale_y_continuous(labels = scales::percent_format(), expand = c(0,0)) +
  labs(x = "Ethnicity", y = "Share of person-years",
       title = "IMD composition by ethnicity and period") +
  facet_wrap(~ period, nrow = 1) +
  theme_minimal(base_size = 12) +
  theme(
    panel.grid.minor = element_blank(),
    legend.position = "bottom",
    plot.title = element_text(face = "bold"),
    axis.text.x = element_text(angle = 45, hjust = 1) # rotated labels
  )

p_imd_by_period
























