+         # Extract sex
+         sex = str_extract(cell, "(?<=\\().*?(?=\\s*:)"),
+         
+         # Extract age group (either digits or ranges, e.g., "0 - 4", "85+")
+         age_group = str_match(cell, "aged\\s+(\\d{1,2}\\s*-\\s*\\d{1,2}|\\d{1,2}\\+)")[,2],
+         age_group = str_replace_all(age_group, "\\s*", ""),  # Clean "0 - 4" → "0-4"
+         age_group = if_else(str_detect(cell, "all ages"), "all", age_group),
+         
+         # Extract ethnicity
+         ethnicity = str_match(cell, "Ethnic group\\s*:\\s*(.*?)\\s*\\)")[,2]
+     )
> View(df_extracted)
> df_extracted <- df_extracted %>%
+     mutate(
+         ethnicity_grouped = case_when(
+             str_detect(ethnicity, "White") ~ "White",
+             str_detect(ethnicity, "Black African") ~ "Black African",
+             str_detect(ethnicity, "Black Caribbean") ~ "Black Caribbean",
+             str_detect(ethnicity, "Black other") ~ "Black Other",
+             TRUE ~ "Other"
+         )
+     )
> df_final <- df_extracted %>%
+     filter(!str_detect(cell, "Total persons"))
> View(df_final)
> df_final <- df_extracted %>%
+     filter(
+         !str_detect(cell, "Total persons"),
+         age_group != "all"
+     )
> df_final <- df_final %>%
+     select(-flag)
> 1991_with_imd_cleaned <- df_final 
Error: unexpected input in "1991_"
> cleaned_1991_imd <- df_final 
> library(readr)
> 
> write_csv(cleaned_1991_imd, "cleaned_1991_imd.csv")
                                                                                                                                                                                   
> df_extracted <- df_extracted %>%
+     mutate(
+         ethnicity_grouped = case_when(
+             str_detect(ethnicity, "White") ~ "White",
+             str_detect(ethnicity, "Black African") ~ "Black African",
+             str_detect(ethnicity, "Black Carribbean") ~ "Black Caribbean",
+             str_detect(ethnicity, "Black other") ~ "Black Other",
+             TRUE ~ "Other"
+         )
+     )
> 
> # Drop total persons
> df_final <- df_extracted %>%
+     filter(!str_detect(cell, "Total persons"))
> 
> df_final <- df_extracted %>%
+     filter(
+         !str_detect(cell, "Total persons"),
+         age_group != "all"
+     )
> 
> df_final <- df_final %>%
+     select(-flag)
> 
> cleaned_1991_imd <- df_final 
> df_extracted <- df_extracted %>%
+     mutate(
+         ethnicity_grouped = case_when(
+             str_detect(ethnicity, "White") ~ "White",
+             str_detect(ethnicity, "Black African") ~ "Black African",
+             str_detect(ethnicity, "Black Carribean") ~ "Black Caribbean",
+             str_detect(ethnicity, "Black other") ~ "Black Other",
+             TRUE ~ "Other"
+         )
+     )
> 
> # Drop total persons
> df_final <- df_extracted %>%
+     filter(!str_detect(cell, "Total persons"))
> 
> df_final <- df_extracted %>%
+     filter(
+         !str_detect(cell, "Total persons"),
+         age_group != "all"
+     )
> 
> df_final <- df_final %>%
+     select(-flag)
> 
> cleaned_1991_imd <- df_final 
> write_csv(cleaned_1991_imd, "cleaned_1991_imd.csv")
                                                                                                                                                                                   
> library(dplyr)
> 
> df_1991_summary <- df_cleaned %>%
+     group_by(year, ward, sex, ethnicity_grouped, age_group) %>%
+     summarise(
+         pop_count = sum(value, na.rm = TRUE),
+         imd_score = first(imd_score_avg)
+     ) %>%
+     ungroup()
Error in `group_by()`:
! Must group by variables found in `.data`.
Column `year` is not found.
Column `ward` is not found.
Column `sex` is not found.
Column `ethnicity_grouped` is not found.
Run `rlang::last_trace()` to see where the error occurred.
> df_1991_summary <- df_cleaned %>%
+     group_by(Date, ward_clean, sex, ethnicity_grouped, age_group) %>%
+     summarise(
+         pop_count = sum(value, na.rm = TRUE),
+         imd_score = first(imd_score_avg)
+     ) %>%
+     ungroup()
Error in `group_by()`:
! Must group by variables found in `.data`.
Column `sex` is not found.
Column `ethnicity_grouped` is not found.
Run `rlang::last_trace()` to see where the error occurred.
> df_1991_summary <- df_final %>%
+     group_by(Date, ward_clean, sex, ethnicity_grouped, age_group) %>%
+     summarise(
+         pop_count = sum(value, na.rm = TRUE),
+         imd_score = first(imd_score_avg)
+     ) %>%
+     ungroup()
`summarise()` has grouped output by 'Date', 'ward_clean', 'sex', 'ethnicity_grouped'. You can override using the `.groups` argument.
> View(df_1991_summary)
> write_csv(df_1991_summary, "df_1991_summary.csv")
                                                                                                                                                                                   
> df_1991_adults <- df_1991_summary %>%
+     filter(str_detect(age_group, "^1[89]") | str_detect(age_group, "^[2-9][0-9]") | str_detect(age_group, "\\+"))
> View(df_1991_adults)
> write_csv(df_1991_adults, "df_1991_adults.csv")
                                                                                                                                                                                   
> View(df_1991_adults)
> save.image("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/PhD/Incidence 30 years/Census check/IMD checked_v2/Cleanining1991.RData")
> rm (cleaned_1991_imd, df_1991, df_1991_clean, df_1991_slsr, df_1991_slsr_complete, df_1991_summary, df_1991_summary, df_1991_summary, df_cleaned, df_extracted)
Warning messages:
1: In rm(cleaned_1991_imd, df_1991, df_1991_clean, df_1991_slsr, df_1991_slsr_complete,  :
  object 'df_1991_summary' not found
2: In rm(cleaned_1991_imd, df_1991, df_1991_clean, df_1991_slsr, df_1991_slsr_complete,  :
  object 'df_1991_summary' not found
> View(df_final)
> rm (df_1991_with_imd, df_final, df_with_age)
> View(imd_2004_filtered)
> library(readr)
> library(dplyr)
> library(stringr)
> library(tidyr)
> library(readxl)
> 
> # Load the 2001 dataset (TSV)
> df_2001 <- read_tsv("/Users/mariacamilapantojaruiz/Library/Mobile Documents/com~apple~CloudDocs/Documents/PhD/Incidence 30 years/Census check/2001.tsv")
Rows: 9200 Columns: 10                                                                                                                                                               
── Column specification ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
Delimiter: "\t"
chr (7): Population, Units, Sex, Ethnic Grou, 2003 ST ward, Age, value type
dbl (2): Date, value
lgl (1): flag

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> View(df_2001)
> df_2001_clean <- df_2001 %>%
+     mutate(
+         ward_clean = str_remove(`2003 ST ward`, "^\\S+\\s+")
+     )
> View(df_2001_clean)
> # Filter to valid SLSR wards only
> filter(ward_clean %in% imd_by_ward_full$ward)
Error: object 'ward_clean' not found
> df_2001_clean <- df_2001 %>%
+     filter(ward_clean %in% imd_by_ward_full$ward)
Error in `filter()`:
ℹ In argument: `ward_clean %in% imd_by_ward_full$ward`.
Caused by error:
! object 'ward_clean' not found
Run `rlang::last_trace()` to see where the error occurred.
> df_2001_with_imd <- df_2001_clean %>%
+     left_join(imd_by_ward_full, by = c("ward_clean" = "ward"))
> View(df_2001_with_imd)
> df_2001_with_imd %>%
+     filter(is.na(imd_score_avg)) %>%
+     distinct(ward_clean)
# A tibble: 1 × 1
  ward_clean
  <chr>     
1 Cathedrals
> View(imd_by_ward)
> df_2001_clean <- df_2001 %>%
+     mutate(
+         ward_clean = str_remove(`2003 ST ward`, "^\\S+\\s+"),
+         ward_clean = if_else(ward_clean == "Cathedrals", "Cathedral", ward_clean)
+     )
> df_2001_with_imd <- df_2001_clean %>%
+     left_join(imd_by_ward_full, by = c("ward_clean" = "ward"))
> View(df_2001_with_imd)
> df_2001_with_imd %>%
+     filter(is.na(imd_score_avg)) %>%
+     distinct(ward_clean)
# A tibble: 0 × 1
# ℹ 1 variable: ward_clean <chr>
> df_2001_summary <- df_2001_with_imd %>%
+     # Keep only Male and Female rows
+     filter(Sex %in% c("Males", "Females")) %>%
+     
+     # Drop totals across ethnic group or age
+     filter(!str_detect(`Ethnic Grou`, "All categories"),
+            !str_detect(Age, "All categories")) %>%
+     
+     # Clean age group format
+     mutate(
+         age_group = str_replace(Age, "Age ", ""),
+         age_group = str_replace_all(age_group, " to ", "–"),
+         age_group = str_replace(age_group, " and over", "+")
+     ) %>%
+     
+     # Remove those under 18
+     filter(!(age_group %in% c("0–4", "5–7", "5–9", "8–9", "10–14", "15", "16–17"))) %>%
+     
+     # Standardise sex format
+     mutate(sex = str_replace(Sex, "s$", "")) %>%
+     
+ )
Error: unexpected ')' in:
"    
)"
> df_2001_summary <- df_2001_with_imd %>%
+     # Keep only Male and Female rows
+     filter(Sex %in% c("Males", "Females")) %>%
+     
+     # Drop totals across ethnic group or age
+     filter(!str_detect(`Ethnic Grou`, "All categories"),
+            !str_detect(Age, "All categories")) %>%
+     
+     # Clean age group format
+     mutate(
+         age_group = str_replace(Age, "Age ", ""),
+         age_group = str_replace_all(age_group, " to ", "–"),
+         age_group = str_replace(age_group, " and over", "+")
+     ) %>%
+     
+     # Remove those under 18
+     filter(!(age_group %in% c("0–4", "5–7", "5–9", "8–9", "10–14", "15", "16–17"))) %>%
+     
+     # Standardise sex format
+     mutate(sex = str_replace(Sex, "s$", ""))
> View(df_2001_summary)
> df_2001_summary <- df_2001_summary %>%
+     group_by(year = Date, ward = ward_clean, sex, age_group) %>%
+     summarise(
+         pop_count = sum(value, na.rm = TRUE),
+         imd_score = first(imd_score_avg),
+         .groups = "drop"
+     )
> View(df_1991_adults)
> library(dplyr)
> library(stringr)
> 
> df_2001_summary <- df_2001_with_imd %>%
+     # Keep only Male and Female rows
+     filter(Sex %in% c("Males", "Females")) %>%
+     
+     # Drop totals across ethnic group or age
+     filter(!str_detect(`Ethnic Grou`, "All categories"),
+            !str_detect(Age, "All categories")) %>%
+     
+     # Extract and clean ethnicity
+     mutate(
+         ethnicity = str_replace(`Ethnic Grou`, "Ethnic group: ", ""),
+         ethnicity_grouped = case_when(
+             ethnicity == "White" ~ "White",
+             ethnicity == "Black African" ~ "Black African",
+             ethnicity == "Black Caribbean" ~ "Black Caribbean",
+             ethnicity == "Black Other" ~ "Black Other",
+             TRUE ~ "Other"
+         ),
+         
+         # Clean and reformat age
+         age_group = str_replace(Age, "Age ", ""),
+         age_group = str_replace_all(age_group, " to ", "–"),
+         age_group = str_replace(age_group, " and over", "+"),
+         
+         # Clean sex
+         sex = str_replace(Sex, "s$", "")
+     ) %>%
+     
+     # Filter out under 18s
+     filter(!(age_group %in% c("0–4", "5–7", "5–9", "8–9", "10–14", "15", "16–17"))) %>%
+     
+     # Summarise
+     group_by(year = Date, ward = ward_clean, sex, ethnicity = ethnicity_grouped, age_group) %>%
+     summarise(
+         pop_count = sum(value, na.rm = TRUE),
+         imd_score = first(imd_score_avg),
+         .groups = "drop"
+     )
> View(df_2001_with_imd)
> mutate(
+     ethnicity = str_replace(`Ethnic Grou`, "Ethnic group: ", ""),
+     ethnicity_grouped = case_when(
+         ethnicity == "White" ~ "White",
+         ethnicity == "Black African" ~ "Black African",
+         ethnicity == "Black Caribbean" ~ "Black Caribbean",
+         ethnicity == "Black Other" ~ "Black Other",
+         TRUE ~ "Other"
+     )
+ )
Error: object 'Ethnic Grou' not found
> df_2001_with_ethnicity <- df_2001_with_imd %>%
+     # Remove totals
+     filter(!str_detect(`Ethnic Grou`, "All categories")) %>%
+     
+     # Create a cleaned ethnicity column
+     mutate(
+         ethnicity = str_replace(`Ethnic Grou`, "Ethnic group: ", ""),
+         ethnicity_grouped = case_when(
+             ethnicity == "White" ~ "White",
+             ethnicity == "Black African" ~ "Black African",
+             ethnicity == "Black Caribbean" ~ "Black Caribbean",
+             ethnicity == "Black Other" ~ "Black Other",
+             TRUE ~ "Other"
+         )
+     )
> View(df_2001_with_ethnicity)
> View(df_2001_with_ethnicity)
> df_2001_with_ethnicity <- df_2001_with_imd %>%
+     # Remove "All categories" from ethnicity and age
+     filter(!str_detect(`Ethnic Grou`, "All categories"),
+            !str_detect(Age, "All categories")) %>%
+     
+     # Clean ethnicity
+     mutate(
+         ethnicity = str_trim(str_replace(`Ethnic Grou`, "All categories: Ethnic group: ", "")),
+         
+         ethnicity_grouped = case_when(
+             str_detect(ethnicity, "White") ~ "White",
+             str_detect(ethnicity, "Black African") ~ "Black African",
+             str_detect(ethnicity, "Black Caribbean") ~ "Black Caribbean",
+             str_detect(ethnicity, "Black Other") ~ "Black Other",
+             TRUE ~ "Other"
+         )
+     )
> View(df_2001)
> View(df_1991_adults)
> load("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/PhD/Incidence 30 years/Census check/IMD checked_v2/Cleanining1991.RData")
> df_2001_cleaned <- df_2001_with_ethnicity %>%
+     mutate(
+         # Remove "Age " prefix
+         age_group = str_replace(Age, "^Age ", ""),
+         
+         # Replace " to " with en dash
+         age_group = str_replace_all(age_group, " to ", "–"),
+         
+         # Convert "85 and over" or similar to "85+"
+         age_group = str_replace(age_group, " and over", "+"),
+         
+         # Clean whitespace
+         age_group = str_trim(age_group)
+     )
> View(df_2001_cleaned)
> View(df_cleaned)
> View(df_extracted)
> df_extracted <- df_cleaned %>%
+     mutate(
+         # Extract sex
+         sex = str_extract(cell, "(?<=\\().*?(?=\\s*:)"),
+         
+         # Extract age group (either a range, a single number, or "85 and over")
+         age_group = str_match(cell, "aged\\s+(\\d{1,2}\\s*-\\s*\\d{1,2}|\\d{1,2}\\+|\\d{1,2}\\s+and\\s+over)")[,2],
+         
+         # Convert "85 and over" to "85+"
+         age_group = str_replace(age_group, "\\s+and\\s+over", "+"),
+         
+         # Clean up spacing in ranges
+         age_group = str_replace_all(age_group, "\\s*", ""),
+         
+         # Replace "all ages" with "all"
+         age_group = if_else(str_detect(cell, "all ages"), "all", age_group),
+         
+         # Extract ethnicity
+         ethnicity = str_match(cell, "Ethnic group\\s*:\\s*(.*?)\\s*\\)")[,2]
+     )
> df_extracted <- df_extracted %>%
+     mutate(
+         ethnicity_grouped = case_when(
+             str_detect(ethnicity, "White") ~ "White",
+             str_detect(ethnicity, "Black African") ~ "Black African",
+             str_detect(ethnicity, "Black Carribean") ~ "Black Caribbean",
+             str_detect(ethnicity, "Black other") ~ "Black Other",
+             TRUE ~ "Other"
+         )
+     )
> View(df_extracted)
> # Drop total persons
> df_final <- df_extracted %>%
+     filter(!str_detect(cell, "Total persons"))
> 
> df_final <- df_extracted %>%
+     filter(
+         !str_detect(cell, "Total persons"),
+         age_group != "all"
+     )
> View(df_final)
> df_final <- df_final %>%
+     select(-flag)
> 
> cleaned_1991_imd <- df_final 
> write_csv(cleaned_1991_imd, "cleaned_1991_imd.csv")
                                                                                                                                                                                   
> # Summarising for interpolation and removing <18
> df_1991_summary <- df_final %>%
+     group_by(Date, ward_clean, sex, ethnicity_grouped, age_group) %>%
+     summarise(
+         pop_count = sum(value, na.rm = TRUE),
+         imd_score = first(imd_score_avg)
+     ) %>%
+     ungroup()
`summarise()` has grouped output by 'Date', 'ward_clean', 'sex', 'ethnicity_grouped'. You can override using the `.groups` argument.
> View(df_1991_summary)
> 
> df_1991_adults <- df_1991_summary %>%
+     filter(str_detect(age_group, "^1[89]") | str_detect(age_group, "^[2-9][0-9]") | str_detect(age_group, "\\+"))
> View(df_1991_adults)
> write_csv(df_1991_adults, "df_1991_adults.csv")
                                                                                                                                                                                   
> write_csv(df_1991_summary, "df_1991_summary.csv")
                                                                                                                                                                                   
> View(df_2001_cleaned)
> # Recode age groups in df_2001_cleaned to match 1991 standard bands
> df_2001_aligned <- df_2001_cleaned %>%
+     mutate(age_group = case_when(
+         age_group %in% c("18 to 19")              ~ "18–19",
+         age_group %in% c("20 to 24")              ~ "20–24",
+         age_group %in% c("25 to 29")              ~ "25–29",
+         age_group %in% c("30 to 34")              ~ "30–34",
+         age_group %in% c("35 to 39")              ~ "35–39",
+         age_group %in% c("40 to 44")              ~ "40–44",
+         age_group %in% c("45 to 49")              ~ "45–49",
+         age_group %in% c("50 to 54")              ~ "50–54",
+         age_group %in% c("55 to 59")              ~ "55–59",
+         age_group %in% c("60 to 64")              ~ "60–64",
+         age_group %in% c("65 to 69")              ~ "65–69",
+         age_group %in% c("70 to 74")              ~ "70–74",
+         age_group %in% c("75 to 79")              ~ "75–79",
+         age_group %in% c("80 to 84")              ~ "80–84",
+         age_group %in% c("85 to 89", "90 and over", "85 and over", "90+", "85+") ~ "85+",
+         TRUE ~ NA_character_  # remove everything else (e.g. 0–17)
+     )) %>%
+     filter(!is.na(age_group))  # Drop anything outside your working age bands
> View(df_2001_aligned)
> rm (df_2001_aligned)
> View(df_2001_cleaned)
> View(df_2001_clean)
> View(df_2001_cleaned)
> # First, restrict to 18+ age groups matching 1991 bands
> df_2001_filtered <- df_2001_cleaned %>%
+     filter(age_group %in% c(
+         "18–19", "20–24", "25–29", "30–34", "35–39",
+         "40–44", "45–49", "50–54", "55–59", "60–64",
+         "65–69", "70–74", "75–79", "80–84", "85–89", "90+"
+     )) %>%
+     mutate(
+         age_group = if_else(age_group %in% c("85–89", "90+"), "85+", age_group)  # collapse oldest into 85+
+     )
> View(df_2001_filtered)
> View(df_1991_adults)
> View(df_2001_filtered)
> # Then summarise for interpolation
> df_2001_summary <- df_2001_filtered %>%
+     group_by(year = Date, ward = ward_clean, sex = Sex, ethnicity_grouped, age_group) %>%
+     summarise(
+         pop_count = sum(value, na.rm = TRUE),
+         imd_score = first(imd_score_avg),
+         .groups = "drop"
+     )
> View(df_2001_summary)
> write_csv(df_2001_summary, "df_2001_summary.csv")
                                                                                                                                                                                   
> write_csv(df_2001_adults, "df_2001_adults.csv")
Error: object 'df_2001_adults' not found
> library(readxl)
> 
> df_2011 <- read_tsv("/Users/mariacamilapantojaruiz/Library/Mobile Documents/com~apple~CloudDocs/Documents/PhD/Incidence 30 years/Census check/2011.tsv") 
Rows: 8800 Columns: 10                                                                                                                                                               
── Column specification ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
Delimiter: "\t"
chr (7): Population, Units, Sex, Ethnic Grou, 2011 census merged ward, Age, value type
dbl (2): Date, value
lgl (1): flag

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> View(df_2011)
> View(imd_eng_2004_2007_2010_lsoa01)
> # Step 2: Filter IMD data to valid LSOAs only
> imd_2010_filtered <- imd_eng_2004_2007_2010_lsoa01 %>%
+     filter(LSOA %in% valid_lsoas) %>%
+     select(LSOA, imd_score_2010 = X2010IMD.SCORE)
Error in `select()`:
! Can't select columns that don't exist.
✖ Column `X2010IMD.SCORE` doesn't exist.
Run `rlang::last_trace()` to see where the error occurred.
> imd_2010_filtered <- imd_eng_2004_2007_2010_lsoa01 %>%
+     filter(LSOA %in% valid_lsoas) %>%
+     select(LSOA, imd_score_2010 = X2010imd_score)
> View(imd_2010_filtered)
> View(lsoa_to_ward)
> imd_by_ward2010 <- lsoa_to_ward %>%
+     left_join(imd_eng_2004_2007_2010_lsoa01, by = c("LSOA" = "LSOA")) %>%
+     group_by(ward) %>%
+     summarise(imd_score_avg = mean(X2010imd_score, na.rm = TRUE)) %>%
+     ungroup()
> View(imd_by_ward2010)
> View(df_2001_summary)
> # Your list of 2011 SLSR wards
> southwark11 <- c(
+     "Cathedrals", "Chaucer", "Grange", "Riverside", "Rotherhithe",
+     "Surrey Docks", "Newington", "East Walworth", "South Bermondsey",
+     "Faraday", "Camberwell Green"
+ )
> lambeth11 <- c(
+     "Bishop's", "Brixton Hill", "Clapham Common", "Clapham Town", "Coldharbour", "Ferndale",
+     "Herne Hill", "Larkhall", "Oval", "Prince's", "Stockwell", "Thornton", "Tulse Hill", "Vassall"
+ )
> 
> all_wards_2011 <- c(southwark11, lambeth11)
> 
> # Check which are missing from imd_by_ward2010
> missing_wards <- setdiff(all_wards_2011, imd_by_ward2010$ward)
> missing_wards
[1] "Cathedrals"
> View(imd_by_ward2010)
> imd_by_ward2010 <- imd_by_ward2010 %>%
+     mutate(ward_clean = str_replace(ward_clean, "Cathedral", "Cathedrals"))
Error in `mutate()`:
ℹ In argument: `ward_clean = str_replace(ward_clean, "Cathedral", "Cathedrals")`.
Caused by error:
! object 'ward_clean' not found
Run `rlang::last_trace()` to see where the error occurred.
> imd_by_ward2010 <- imd_by_ward2010 %>%
+     mutate(ward = str_replace(ward, "Cathedral", "Cathedrals"))
> # Merge them
> imd_by_ward2010 <- lsoa_to_ward %>%
+     left_join(imd_eng_2004_2007_2010_lsoa01, by = c("LSOA" = "LSOA")) %>%
+     group_by(ward) %>%
+     summarise(imd_score_avg = mean(X2010imd_score, na.rm = TRUE)) %>%
+     ungroup()
> imd_by_ward2010 <- imd_by_ward2010 %>%
+     mutate(ward = str_replace(ward, "Cathedral", "Cathedrals"))
> # Check they are represented
> # Your list of 2011 SLSR wards
> southwark11 <- c(
+     "Cathedrals", "Chaucer", "Grange", "Riverside", "Rotherhithe",
+     "Surrey Docks", "Newington", "East Walworth", "South Bermondsey",
+     "Faraday", "Camberwell Green"
+ )
> lambeth11 <- c(
+     "Bishop's", "Brixton Hill", "Clapham Common", "Clapham Town", "Coldharbour", "Ferndale",
+     "Herne Hill", "Larkhall", "Oval", "Prince's", "Stockwell", "Thornton", "Tulse Hill", "Vassall"
+ )
> 
> all_wards_2011 <- c(southwark11, lambeth11)
> 
> # Check which are missing from imd_by_ward2010
> missing_wards <- setdiff(all_wards_2011, imd_by_ward2010$ward)
> missing_wards
character(0)
> View(df_2001_filtered)
> View(df_2001_summary)
> # Define SLSR wards for 2001
> southwark01 <- c(
+     "Cathedrals", "Chaucer", "Grange", "Riverside", "Rotherhithe",
+     "Surrey Docks", "Newington", "East Walworth", "South Bermondsey",
+     "Faraday", "Camberwell Green"
+ )
> lambeth01 <- c(
+     "Bishop`s", "Brixton Hill", "Clapham Common", "Clapham Town", "Coldharbour", "Ferndale",
+     "Herne Hill", "Larkhall", "Oval", "Prince`s", "Stockwell", "Thornton", "Tulse Hill", "Vassall"
+ )
> valid_wards_2001 <- c(southwark01, lambeth01)
> 
> # Filter to valid SLSR wards only
> df_2001_summary <- df_2001_summary %>%
+     filter(ward_clean %in% valid_wards_2001)
Error in `filter()`:
ℹ In argument: `ward_clean %in% valid_wards_2001`.
Caused by error:
! object 'ward_clean' not found
Run `rlang::last_trace()` to see where the error occurred.
> # Filter to valid SLSR wards only
> df_2001_summary <- df_2001_summary %>%
+     filter(ward %in% valid_wards_2001)
> df_2001_aldults <- df_2001_summary
> write_csv(df_2001_aldults , "df_2001_aldults .csv")
                                                                                                                                                                                   
> View(imd_by_ward2010)
> View(df_2011)
> df_2011_clean <- df_2011 %>%
+     mutate(
+         ward_clean = str_trim(str_remove(`2011 census merged ward`, "^.*:\\s*")),
+         
+         # Fix naming inconsistency (like we did before)
+         ward_clean = if_else(ward_clean == "Cathedrals", "Cathedrals", ward_clean)
+     )
> View(df_2011_clean)
> df_2011_with_imd <- df_2011_clean %>%
+     left_join(imd_by_ward2010, by = c("ward_clean" = "ward"))
> View(df_2001_with_imd)
> df_2011_with_imd %>%
+     filter(is.na(imd_score_avg)) %>%
+     distinct(ward_clean)
# A tibble: 0 × 1
# ℹ 1 variable: ward_clean <chr>
> df_2011_with_ethnicity <- df_2011_with_imd %>%
+     filter(!str_detect(`Ethnic group`, "All categories"),
+            !str_detect(Age, "All categories")) %>%
+     mutate(
+         ethnicity = str_trim(`Ethnic group`),
+         ethnicity_grouped = case_when(
+             str_detect(ethnicity, "White") ~ "White",
+             str_detect(ethnicity, "Black African") ~ "Black African",
+             str_detect(ethnicity, "Black Caribbean") ~ "Black Caribbean",
+             str_detect(ethnicity, "Black Other") ~ "Black Other",
+             TRUE ~ "Other"
+         )
+     )
Error in `filter()`:
ℹ In argument: `!str_detect(`Ethnic group`, "All categories")`.
Caused by error:
! object 'Ethnic group' not found
Run `rlang::last_trace()` to see where the error occurred.
> library(dplyr)
> library(stringr)
> 
> df_2011_with_ethnicity <- df_2011 %>%
+     # Remove totals
+     filter(!str_detect(`Ethnic Grou`, "All categories")) %>%
+     
+     # Clean ethnicity column and group
+     mutate(
+         ethnicity = str_trim(str_replace(`Ethnic Grou`, "All categories: Ethnic group: ", "")),
+         
+         ethnicity_grouped = case_when(
+             str_detect(ethnicity, "White") ~ "White",
+             str_detect(ethnicity, "Black African") ~ "Black African",
+             str_detect(ethnicity, "Black Caribbean") ~ "Black Caribbean",
+             str_detect(ethnicity, "Black Other|Black/Black British: Other") ~ "Black Other",
+             TRUE ~ "Other"
+         )
+     )
> View(df_2001_with_ethnicity)
> View(df_2001_aldults)
> df_2011_with_ethnicity <- df_2011 %>%
+     # Remove totals
+     filter(!str_detect(`Ethnic Grou`, "All categories")) %>%
+     
+     # Clean ethnicity column and group
+     mutate(
+         ethnicity = str_trim(str_replace(`Ethnic Grou`, "All categories: Ethnic group: ", "")),
+         
+         ethnicity_grouped = case_when(
+             str_detect(ethnicity, "White") ~ "White",
+             str_detect(ethnicity, "Black African") ~ "Black African",
+             str_detect(ethnicity, "Black Caribbean") ~ "Black Caribbean",
+             str_detect(ethnicity, "Black/Black British: Other") ~ "Black Other",  # <- updated line
+             TRUE ~ "Other"
+         )
+     )
> View(df_2011_with_ethnicity)
> df_2011_with_ethnicity <- df_2011 %>%
+     # Remove totals
+     filter(!str_detect(`Ethnic Grou`, "All categories")) %>%
+     
+     # Clean ethnicity column and group
+     mutate(
+         ethnicity = str_trim(str_replace(`Ethnic Grou`, "All categories: Ethnic group: ", "")),
+         
+         ethnicity_grouped = case_when(
+             str_detect(ethnicity, regex("White", ignore_case = TRUE)) ~ "White",
+             str_detect(ethnicity, regex("African$", ignore_case = TRUE)) ~ "Black African",
+             str_detect(ethnicity, regex("Caribbean$", ignore_case = TRUE)) ~ "Black Caribbean",
+             str_detect(ethnicity, regex("Black British: Other|Other$", ignore_case = TRUE)) ~ "Black Other",
+             TRUE ~ "Other"
+         )
+     )
> View(df_2001_with_ethnicity)
> df_2001_with_ethnicity <- df_2001_with_imd %>%
+     # Remove "All categories" from ethnicity and age
+     filter(!str_detect(`Ethnic Grou`, "All categories"),
+            !str_detect(Age, "All categories")) %>%
+     
+     # Clean ethnicity
+     mutate(
+         ethnicity = str_trim(str_replace(`Ethnic Grou`, "All categories: Ethnic group: ", "")),
+         
+         ethnicity_grouped = case_when(
+             str_detect(ethnicity, "White") ~ "White",
+             str_detect(ethnicity, "Black African") ~ "Black African",
+             str_detect(ethnicity, "Black Caribbean") ~ "Black Caribbean",
+             str_detect(ethnicity, "Black British: Other|Black/Black British: Other") ~ "Black Other",
+             TRUE ~ "Other"
+         )
+     )
> 
> # Clean ages
> df_2001_cleaned <- df_2001_with_ethnicity %>%
+     mutate(
+         # Remove "Age " prefix
+         age_group = str_replace(Age, "^Age ", ""),
+         
+         # Replace " to " with en dash
+         age_group = str_replace_all(age_group, " to ", "–"),
+         
+         # Convert "85 and over" or similar to "85+"
+         age_group = str_replace(age_group, " and over", "+"),
+         
+         # Clean whitespace
+         age_group = str_trim(age_group)
+     )
> 
> # Recode age groups in df_2001_cleaned to match 1991 standard bands
> df_2001_filtered <- df_2001_cleaned %>%
+     filter(age_group %in% c(
+         "18–19", "20–24", "25–29", "30–34", "35–39",
+         "40–44", "45–49", "50–54", "55–59", "60–64",
+         "65–69", "70–74", "75–79", "80–84", "85–89", "90+"
+     )) %>%
+     mutate(
+         age_group = if_else(age_group %in% c("85–89", "90+"), "85+", age_group)  # collapse oldest into 85+
+     )
> 
> 
> # Then summarise for interpolation
> df_2001_summary <- df_2001_filtered %>%
+     group_by(year = Date, ward = ward_clean, sex = Sex, ethnicity_grouped, age_group) %>%
+     summarise(
+         pop_count = sum(value, na.rm = TRUE),
+         imd_score = first(imd_score_avg),
+         .groups = "drop"
+     )
> write_csv(df_2001_summary, "df_2001_summary.csv")
                                                                                                                                                                                   
> # Filter to valid SLSR wards only
> df_2001_summary <- df_2001_summary %>%
+     filter(ward %in% valid_wards_2001)
> 
> 
> df_2001_aldults <- df_2001_summary
> View(df_2001_aldults)
> write_csv(df_2001_aldults , "df_2001_aldults .csv")
                                                                                                                                                                                   
> df_2011_cleaned <- df_2011_with_ethnicity %>%
+     mutate(
+         age_group = str_replace(Age, "^Age ", ""),
+         age_group = str_replace_all(age_group, " to ", "–"),
+         age_group = str_replace(age_group, " and over", "+"),
+         age_group = str_trim(age_group)
+     ) %>%
+     filter(age_group %in% c(
+         "18–19", "20–24", "25–29", "30–34", "35–39",
+         "40–44", "45–49", "50–54", "55–59", "60–64",
+         "65–69", "70–74", "75–79", "80–84", "85–89", "90+"
+     )) %>%
+     mutate(
+         age_group = if_else(age_group %in% c("85–89", "90+"), "85+", age_group)
+     )
> View(df_2011_cleaned)
> View(df_2001_with_ethnicity)
> df_2011_cleaned <- df_2011_with_ethnicity %>%
+     mutate(
+         age_group = str_replace(Age, "^Age ", ""),
+         age_group = str_replace_all(age_group, " to ", "–"),
+         age_group = str_replace(age_group, " and over", "+"),
+         age_group = str_trim(age_group),
+         age_group = if_else(age_group %in% c("85–89", "90+"), "85+", age_group)
+     ) %>%
+     filter(age_group %in% c(
+         "18–19", "20–24", "25–29", "30–34", "35–39",
+         "40–44", "45–49", "50–54", "55–59", "60–64",
+         "65–69", "70–74", "75–79", "80–84", "85+"
+     ))
> View(df_2011_cleaned)
> View(df_1991_adults)
> View(df_2001_aldults)
> View(df_2011_cleaned)
> # Define 2011 SLSR wards
> lambeth11 <- c(
+     "Bishop's", "Brixton Hill", "Clapham Common", "Clapham Town", "Coldharbour", "Ferndale",
+     "Herne Hill", "Larkhall", "Oval", "Prince's", "Stockwell", "Thornton", "Tulse Hill", "Vassall"
+ )
> southwark11 <- c(
+     "Cathedrals", "Chaucer", "Grange", "Riverside", "Rotherhithe",
+     "Surrey Docks", "Newington", "East Walworth", "South Bermondsey",
+     "Faraday", "Camberwell Green"
+ )
> 
> valid_wards_2011 <- c(lambeth11, southwark11)
> 
> # Apply the filter
> df_2011_cleaned <- df_2011_cleaned %>%
+     filter(ward_clean %in% valid_wards_2011)
Error in `filter()`:
ℹ In argument: `ward_clean %in% valid_wards_2011`.
Caused by error:
! object 'ward_clean' not found
Run `rlang::last_trace()` to see where the error occurred.
> View(df_2011_cleaned)
> View(df_2011_clean)
> View(df_2011_with_imd)
> View(df_2011_cleaned)
> View(df_2011_clean)
> View(df_2011_with_imd)
> df_2011_with_ethnicity <- df_2011_with_imd %>%
+     # Remove totals
+     filter(!str_detect(`Ethnic Grou`, "All categories")) %>%
+     
+     # Clean ethnicity column and group
+     mutate(
+         ethnicity = str_trim(str_replace(`Ethnic Grou`, "All categories: Ethnic group: ", "")),
+         
+         ethnicity_grouped = case_when(
+             str_detect(ethnicity, regex("White", ignore_case = TRUE)) ~ "White",
+             str_detect(ethnicity, regex("African$", ignore_case = TRUE)) ~ "Black African",
+             str_detect(ethnicity, regex("Caribbean$", ignore_case = TRUE)) ~ "Black Caribbean",
+             str_detect(ethnicity, regex("Black British: Other|Other$", ignore_case = TRUE)) ~ "Black Other",
+             TRUE ~ "Other"
+         )
+     )
> View(df_2011_with_ethnicity)
> df_2011_cleaned <- df_2011_with_ethnicity %>%
+     mutate(
+         age_group = str_replace(Age, "^Age ", ""),
+         age_group = str_replace_all(age_group, " to ", "–"),
+         age_group = str_replace(age_group, " and over", "+"),
+         age_group = str_trim(age_group),
+         age_group = if_else(age_group %in% c("85–89", "90+"), "85+", age_group)
+     ) %>%
+     filter(age_group %in% c(
+         "18–19", "20–24", "25–29", "30–34", "35–39",
+         "40–44", "45–49", "50–54", "55–59", "60–64",
+         "65–69", "70–74", "75–79", "80–84", "85+"
+     ))
> View(df_2011_cleaned)
> # 6.Filter to valid SLSR wards
> # Define 2011 SLSR wards
> lambeth11 <- c(
+     "Bishop's", "Brixton Hill", "Clapham Common", "Clapham Town", "Coldharbour", "Ferndale",
+     "Herne Hill", "Larkhall", "Oval", "Prince's", "Stockwell", "Thornton", "Tulse Hill", "Vassall"
+ )
> southwark11 <- c(
+     "Cathedrals", "Chaucer", "Grange", "Riverside", "Rotherhithe",
+     "Surrey Docks", "Newington", "East Walworth", "South Bermondsey",
+     "Faraday", "Camberwell Green"
+ )
> 
> valid_wards_2011 <- c(lambeth11, southwark11)
> 
> # Apply the filter
> df_2011_cleaned <- df_2011_cleaned %>%
+     filter(ward_clean %in% valid_wards_2011)
> # Combine all valid wards
> valid_wards_2011 <- c(lambeth11, southwark11)
> 
> # Check which wards from your list are missing in the dataset
> missing_wards_2011 <- setdiff(valid_wards_2011, unique(df_2011_cleaned$ward_clean))
> 
> # Print missing wards
> missing_wards_2011
character(0)
> df_2011_summary <- df_2011_cleaned %>%
+     group_by(year = Date, ward = ward_clean, sex = Sex, ethnicity_grouped, age_group) %>%
+     summarise(
+         pop_count = sum(value, na.rm = TRUE),
+         imd_score = first(imd_score_avg),
+         .groups = "drop"
+     )
> View(df_2011_summary)
> # Save it
> write_csv(df_2011_summary, "df_2011_summary.csv")
                                                                                                                                                                                   
> df_2011_adults <- df_2011_summary
> 
> # === Cleaning 2021 Census ===
> 
> library(readxl)
> library(dplyr)
> library(stringr)
> library(tidyr)
> library(readr)
> 
> # Load census and IMD datasets
> df_2021 <- read_excel("/Users/mariacamilapantojaruiz/Library/Mobile Documents/com~apple~CloudDocs/Documents/PhD/Incidence 30 years/Census check/2021.xlsx")
                                                                                                                                                                                   
> View(df_2021)
> IMD2019 <- read_excel("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/PhD/Incidence 30 years/Census check/IMD calculations/IMD2019.xlsx")
                                                                                                                                                                                   
> View(IMD2019)
> # Combine all valid 2021 wards
> all_wards_2021 <- c(
+     "Borough & Bankside", "Camberwell Green", "Chaucer", "Faraday",
+     "London Bridge & West Bermondsey", "Newington (Southwark)", "North Bermondsey",
+     "North Walworth", "Old Kent Road", "Rotherhithe",
+     "South Bermondsey", "St George's (Southwark)", "Surrey Docks",
+     "Waterloo & South Bank", "Vauxhall (Lambeth)", "Kennington (Lambeth)", "Oval",
+     "Stockwell West & Larkhall", "Stockwell East", "Myatt's Fields", "Clapham Town",
+     "Clapham East", "Clapham Common & Abbeville", "Brixton Acre Lane", "Brixton North",
+     "Brixton Rush Common", "Clapham Park", "Brixton Windrush",
+     "Herne Hill & Loughborough Junction", "St Martin's (Lambeth)"
+ )
> df_2021_cleaned <- df_2021 %>%
+     rename(
+         ward = `Electoral wards and divisions`,
+         sex = `Sex (2 categories)`,
+         age = `Age (86 categories)`,
+         ethnicity = `Ethnic group (20 categories)`,
+         pop_count = Observation
+     ) %>%
+     filter(ward %in% all_wards_2021) %>%
+     mutate(
+         # Clean age to match previous format
+         age_group = str_replace_all(age, " to ", "–"),
+         age_group = str_replace(age_group, " and over", "+"),
+         age_group = str_trim(age_group),
+         age_group = if_else(age_group %in% c("85–89", "90+"), "85+", age_group),
+         
+         # Group ethnicity
+         ethnicity_grouped = case_when(
+             str_detect(ethnicity, "White") ~ "White",
+             str_detect(ethnicity, "Black African") ~ "Black African",
+             str_detect(ethnicity, "Black Caribbean") ~ "Black Caribbean",
+             str_detect(ethnicity, "Black.*Other") ~ "Black Other",
+             TRUE ~ "Other"
+         )
+     ) %>%
+     # Keep adults only (18+)
+     filter(age_group %in% c(
+         "18–19", "20–24", "25–29", "30–34", "35–39", "40–44", "45–49",
+         "50–54", "55–59", "60–64", "65–69", "70–74", "75–79", "80–84", "85+"
+     ))
Error in `rename()`:
! Can't rename columns that don't exist.
✖ Column `Age (86 categories)` doesn't exist.
Run `rlang::last_trace()` to see where the error occurred.
> View(df_2021)
> # Define mapping from single ages to age groups
> map_age_to_group <- function(age_code) {
+     age_code <- as.numeric(age_code)
+     case_when(
+         age_code >= 18 & age_code <= 19 ~ "18–19",
+         age_code >= 20 & age_code <= 24 ~ "20–24",
+         age_code >= 25 & age_code <= 29 ~ "25–29",
+         age_code >= 30 & age_code <= 34 ~ "30–34",
+         age_code >= 35 & age_code <= 39 ~ "35–39",
+         age_code >= 40 & age_code <= 44 ~ "40–44",
+         age_code >= 45 & age_code <= 49 ~ "45–49",
+         age_code >= 50 & age_code <= 54 ~ "50–54",
+         age_code >= 55 & age_code <= 59 ~ "55–59",
+         age_code >= 60 & age_code <= 64 ~ "60–64",
+         age_code >= 65 & age_code <= 69 ~ "65–69",
+         age_code >= 70 & age_code <= 74 ~ "70–74",
+         age_code >= 75 & age_code <= 79 ~ "75–79",
+         age_code >= 80 & age_code <= 84 ~ "80–84",
+         age_code >= 85 ~ "85+",
+         TRUE ~ NA_character_
+     )
+ }
> df_2021_cleaned <- df_2021 %>%
+     rename(
+         ward = `Electoral wards and divisions`,
+         sex = `Sex (2 categories)`,
+         age_code = `Age (86 categories) Code`,
+         ethnicity = `Ethnic group (20 categories)`,
+         pop_count = Observation
+     ) %>%
+     filter(ward %in% all_wards_2021) %>%
+     mutate(
+         age_group = map_age_to_group(age_code),
+         
+         ethnicity_grouped = case_when(
+             str_detect(ethnicity, "White") ~ "White",
+             str_detect(ethnicity, "Black African") ~ "Black African",
+             str_detect(ethnicity, "Black Caribbean") ~ "Black Caribbean",
+             str_detect(ethnicity, "Black.*Other") ~ "Black Other",
+             TRUE ~ "Other"
+         )
+     ) %>%
+     filter(!is.na(age_group))
> 
> View(df_2021_cleaned)
> df_2021_cleaned <- df_2021 %>%
+     rename(
+         ward = `Electoral wards and divisions`,
+         sex = `Sex (2 categories)`,
+         age_code = `Age (86 categories) Code`,
+         ethnicity = `Ethnic group (20 categories)`,
+         pop_count = Observation
+     ) %>%
+     filter(ward %in% all_wards_2021) %>%
+     mutate(
+         age_group = map_age_to_group(age_code),
+         
+         ethnicity_grouped = case_when(
+             str_detect(ethnicity, "White") ~ "White",
+             str_detect(ethnicity, "African: African") ~ "Black African",
+             str_detect(ethnicity, "African: Caribbean") ~ "Black Caribbean",
+             str_detect(ethnicity, "African: Other Black") ~ "Black Other",
+             TRUE ~ "Other"
+         )
+     ) %>%
+     filter(!is.na(age_group))
> View(df_2011_adults)
> View(df_2021_cleaned)
# Merge IMD
df_2021_ready <- df_2021_cleaned %>%
  left_join(IMD2019 %>% select(`Ward Name`, `IMD average score`), by = c("ward" = "Ward Name")) %>%
  rename(imd_score = `IMD average score`) %>%
  mutate(year = 2021)

# Summarise
df_2021_summary <- df_2021_ready %>%
  group_by(year = 2021, ward = ward, sex = sex, ethnicity_grouped, age_group) %>%
  summarise(
    pop_count = sum(pop_count, na.rm = TRUE),
    imd_score = first(imd_score),
    .groups = "drop"
  )
# Save it
write_csv(df_2021_summary, "df_2021_summary.csv")

The IMD merge didnt work well with the 2021, lets check it
df_2021_adults %>%
  filter(is.na(imd_score) | is.na(imd_quintile)) %>%
  distinct(ward) %>%
  arrange(ward)

We are missing this:
 1 Brixton Acre Lane                 
 2 Brixton North                     
 3 Brixton Rush Common               
 4 Brixton Windrush                  
 5 Clapham Common & Abbeville        
 6 Clapham East                      
 7 Clapham Park                      
 8 Herne Hill & Loughborough Junction
 9 Kennington (Lambeth)              
10 Myatt's Fields                    
11 Newington (Southwark)             
12 St George's (Southwark)           
13 St Martin's (Lambeth)             
14 Stockwell East                    
15 Stockwell West & Larkhall         
16 Vauxhall (Lambeth)                
17 Waterloo & South Bank 

N195 <- read_csv("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/PhD/Incidence 30 years/Census check/IMD checked_v2/N195.csv", 
+     skip = 2)

ok so the best look up available between 2021 wards and LSOA code 2021 is this one. Can we create a code to match them as I have a dataset with LSOA code (2011) and Index of Multiple Deprivation (IMD) quintile rebased for London

 Brixton Acre Lane, 
E01003020
E01003018
E01003021
E01003022
E01003023
E01003024
E01003025

Brixton North,
E01003020
E01003018
E01003021
E01003022
E01003023
E01003024
E01003025
E01003075
E01003072
E01003073
E01003076
E01003077
E01003078
E01003071
E01003074

 Brixton Rush Common
E01003136
E01003137
E01003132
E01003130
E01003131
E01003135
E01003138
E01003133
E01003134
E01003019
E01003020
E01003018
E01003021
E01003022
E01003023
E01003024
E01003025
E01003176
E01003171
E01003173
E01003177
E01003178
E01003172
E01003174
E01003175
E01003179

Brixton Windrush 
E01003019
E01003019
E01003020
E01003018
E01003021
E01003022
E01003023
E01003024
E01003025
              
 Clapham Common & Abbeville = E01003029
E01003032
E01003026
E01003027
E01003028
E01003030
E01003033
E01003031

       
 Clapham East    =
E01003059
E01003060
E01003061
E01003053
E01003054
E01003056
E01003058
E01003055
E01003057
             
 7 Clapham Park = E01003029
E01003032
E01003026
E01003027
E01003028
E01003030
E01003033
E01003031
                      
 8 Herne Hill & Loughborough Junction
E01003075
E01003072
E01003073
E01003076
E01003077
E01003078
E01003071
E01003074

 Kennington (Lambeth)        
E01003108
E01003110
E01003111
E01003112
E01003105
E01003106
E01003107
E01003109

      
10 Myatt's Fields      
E01003180
E01003183
E01003181
E01003184
E01003185
E01003186
E01003187
E01003182
E01003188
              
11 Newington (Southwark)     
E01003994
E01003992
E01003995
E01003998
E01003999
E01032639
E01003991
E01003993
E01003997
E01003926
        
12 St George's (Southwark)     
E01003930
E01003932
E01003933
E01032584
      
13 St Martin's (Lambeth)             
E01003176
E01003171
E01003173
E01003177
E01003178
E01003172
E01003174
E01003175
E01003179

14 Stockwell East     
E01003129
E01003121
E01003123
E01003124
E01003125
E01003126
E01003128
E01003127
               
15 Stockwell West & Larkhall         
E01003129
E01003121
E01003123
E01003124
E01003125
E01003126
E01003128
E01003127
E01003089
E01003091
E01003092
E01003088
E01003093
E01003094
E01003096
E01003090
E01003095

16 Vauxhall (Lambeth)   
E01003180
E01003183
E01003181
E01003184
E01003185
E01003186
E01003187
E01003182
E01003188
             
17 Waterloo & South Bank 

ward_lsoa_lookup <- tibble::tibble(
  ward_2021 = c(
    rep("Brixton Acre Lane", 7),
    rep("Brixton North", 15),
    rep("Brixton Rush Common", 26),
    rep("Brixton Windrush", 8),
    rep("Clapham Common & Abbeville", 8),
    rep("Clapham East", 9),
    rep("Clapham Park", 8),
    rep("Herne Hill & Loughborough Junction", 8),
    rep("Kennington (Lambeth)", 8),
    rep("Myatt's Fields", 9),
    rep("Newington (Southwark)", 10),
    rep("St George's (Southwark)", 4),
    rep("St Martin's (Lambeth)", 9),
    rep("Stockwell East", 8),
    rep("Stockwell West & Larkhall", 17),
    rep("Vauxhall (Lambeth)", 9)
  ),
  LSOA_code = c(
    # Add the same LSOA codes as in your list in the same order
    "E01003020", "E01003018", "E01003021", "E01003022", "E01003023", "E01003024", "E01003025",
    "E01003020", "E01003018", "E01003021", "E01003022", "E01003023", "E01003024", "E01003025",
    "E01003075", "E01003072", "E01003073", "E01003076", "E01003077", "E01003078", "E01003071", "E01003074",
    "E01003136", "E01003137", "E01003132", "E01003130", "E01003131", "E01003135", "E01003138", "E01003133", "E01003134",
    "E01003019", "E01003020", "E01003018", "E01003021", "E01003022", "E01003023", "E01003024", "E01003025",
    "E01003176", "E01003171", "E01003173", "E01003177", "E01003178", "E01003172", "E01003174", "E01003175", "E01003179",
    "E01003019", "E01003020", "E01003018", "E01003021", "E01003022", "E01003023", "E01003024", "E01003025",
    "E01003029", "E01003032", "E01003026", "E01003027", "E01003028", "E01003030", "E01003033", "E01003031",
    "E01003059", "E01003060", "E01003061", "E01003053", "E01003054", "E01003056", "E01003058", "E01003055", "E01003057",
    "E01003029", "E01003032", "E01003026", "E01003027", "E01003028", "E01003030", "E01003033", "E01003031",
    "E01003075", "E01003072", "E01003073", "E01003076", "E01003077", "E01003078", "E01003071", "E01003074",
    "E01003108", "E01003110", "E01003111", "E01003112", "E01003105", "E01003106", "E01003107", "E01003109",
    "E01003180", "E01003183", "E01003181", "E01003184", "E01003185", "E01003186", "E01003187", "E01003182", "E01003188",
    "E01003994", "E01003992", "E01003995", "E01003998", "E01003999", "E01032639", "E01003991", "E01003993", "E01003997", "E01003926",
    "E01003930", "E01003932", "E01003933", "E01032584",
    "E01003176", "E01003171", "E01003173", "E01003177", "E01003178", "E01003172", "E01003174", "E01003175", "E01003179",
    "E01003129", "E01003121", "E01003123", "E01003124", "E01003125", "E01003126", "E01003128", "E01003127",
    "E01003129", "E01003121", "E01003123", "E01003124", "E01003125", "E01003126", "E01003128", "E01003127",
    "E01003089", "E01003091", "E01003092", "E01003088", "E01003093", "E01003094", "E01003096", "E01003090", "E01003095",
    "E01003180", "E01003183", "E01003181", "E01003184", "E01003185", "E01003186", "E01003187", "E01003182", "E01003188"
  )
)

# 1. Join LSOA codes to df_2021_adults (allowing many-to-many)
df_2021_with_lsoa <- df_2021_adults %>%
  left_join(ward_lsoa_lookup, by = c("ward" = "ward_2021"), relationship = "many-to-many")

# First rename for clarity
imd_2019_clean <- N195 %>%
  rename(
    LSOA = `LSOA code (2011)`,
    imd_rank_2019 = `Index of Multiple Deprivation (IMD) rank - England`
  )

# Join IMD data to each LSOA in the lookup table
# Step: Add imd_quintile to ward_lsoa_lookup by joining decile and dividing by 2
ward_lsoa_with_quintile <- ward_lsoa_lookup %>%
  left_join(
    imd_2019_clean %>%
      select(
        LSOA = `LSOA`,  # Rename for clean join
        imd_decile = `Index of Multiple Deprivation (IMD) decile - England`
      ),
    by = c("LSOA_code" = "LSOA")
  ) %>%
  mutate(
    imd_quintile = ceiling(imd_decile / 2)
  )
# Averaging them
ward_quintile_avg <- ward_lsoa_with_quintile %>%
  group_by(ward_2021) %>%
  summarise(
    imd_quintile = round(mean(imd_quintile, na.rm = TRUE)),
    .groups = "drop"
  )

# Missing waterloo and southbank
E01003015
E01003013
E01003014
E01003016
E01003017
E01032582

# 1. Add Waterloo & South Bank LSOAs to the lookup
waterloo_lsoas <- tibble(
  ward_2021 = "Waterloo & South Bank",
  LSOA_code = c(
    "E01003015", "E01003013", "E01003014",
    "E01003016", "E01003017", "E01032582"
  )
)

ward_lsoa_lookup <- bind_rows(ward_lsoa_lookup, waterloo_lsoas)

ward_lsoa_with_quintile <- ward_lsoa_lookup %>%
  left_join(
    imd_2019_clean %>%
      rename(imd_decile_2019 = `Index of Multiple Deprivation (IMD) decile - England`) %>%
      mutate(imd_quintile = ceiling(imd_decile_2019 / 2)),
    by = c("LSOA_code" = "LSOA")
  )
# 3. Average quintile by ward (rounded)
ward_quintile_avg <- ward_lsoa_with_quintile %>%
  group_by(ward_2021) %>%
  summarise(
    imd_quintile = round(mean(imd_quintile, na.rm = TRUE)),
    .groups = "drop"
  )

df_2021_adults_with_quintile <- df_2021_adults %>%
  left_join(
    ward_quintile_avg,
    by = c("ward" = "ward_2021")
  )
df_2021_adults_cleaned <- df_2021_adults_with_quintile %>%
  mutate(
    imd_quintile = coalesce(imd_quintile.x, imd_quintile.y)
  ) %>%
  select(-imd_quintile.x, -imd_quintile.y)  # Drop the old columns

write_csv(df_2021_adults_cleaned, "df_2021_adults.csv")

# Keep only the summaries
names(df_1991_adults)
names(df_2001_aldults_)
names(df_2011_adults)
names(df_2021_adults)

# And rename them
df_1991_adults <- df_1991_adults %>%
  rename(
    year = Date,
    ward = ward_clean
  )

df_1991_adults <- df_1991_adults %>%
  mutate(sex = case_when(
    sex == "Males" ~ "Male",
    sex == "Females" ~ "Female",
    TRUE ~ sex
  ))

df_2001_aldults_ <- df_2001_aldults_ %>%
  mutate(sex = case_when(
    sex == "Males" ~ "Male",
    sex == "Females" ~ "Female",
    TRUE ~ sex
  ))

df_2011_adults <- df_2011_adults %>%
  mutate(sex = case_when(
    sex == "Males" ~ "Male",
    sex == "Females" ~ "Female",
    TRUE ~ sex
  ))

# Stack them into one long dataset
df_all <- bind_rows(df_1991_adults, df_2001_aldults_, df_2011_adults, df_2021_adults)

# Understanding the quintiles of 2004
# Save the column name for easier reference
imd_eng_2004_2007_2010_lsoa01 <- imd_eng_2004_2007_2010_lsoa01 %>%
  rename(rank_2004 = `2004RANK OF IMD (where 1 is most deprived)`)

# Total number of LSOAs
total_lsoas <- nrow(imd_eng_2004_2007_2010_lsoa01)

# Check total
print(total_lsoas)  # usually around 32,482 in England in 2004

# Calculate national quintile thresholds
cutoffs <- quantile(imd_eng_2004_2007_2010_lsoa01$rank_2004, probs = c(0.2, 0.4, 0.6, 0.8))

print(cutoffs)

I got these
    20%     40%     60%     80% 
 6497.2 12993.4 19489.6 25985.8 

Which are the ranks, now we need to check the scores associated with those cuttofs

# First, rename for ease
imd_data <- imd_eng_2004_2007_2010_lsoa01 %>%
  rename(rank_2004 = `2004RANK OF IMD (where 1 is most deprived)`,
         score_2004 = `2004IMD SCORE`)

imd_eng_2004_2007_2010_lsoa01 <- imd_eng_2004_2007_2010_lsoa01 %>%
  rename(score_2004 = `2004IMD SCORE`)


imd_quintile_cutoffs <- imd_eng_2004_2007_2010_lsoa01 %>%
+     arrange(rank_2004) %>%
+     mutate(n = row_number()) %>%
+     summarise(
+         cutoff_20 = score_2004[round(0.2 * n())],
+         cutoff_40 = score_2004[round(0.4 * n())],
+         cutoff_60 = score_2004[round(0.6 * n())],
+         cutoff_80 = score_2004[round(0.8 * n())]
+     )
> View(imd_quintile_cutoffs)

 imd_eng_2004_2007_2010_lsoa01 %>%
+     filter(rank_2004 == 1) %>%
+     select(LSOA, score_2004, rank_2004)
# A tibble: 1 × 3
  LSOA      score_2004 rank_2004
  <chr>          <dbl>     <dbl>
1 E01006559       86.4         1

The most deprived on england is E01006559 which has a score of 86.4, so in this dataset, the most deprived are the highest
cutoffs=
20%= 34.21
40% = 21.15
60%= 12.72
80% = 8.35

To create correct population-based quintiles, sort your population dataset by imd_score in descending order (because higher = more deprived)

assign_quintile <- function(score) {
  case_when(
    score >= 34.21           ~ 1,  # Most deprived
    score >= 21.15           ~ 2,
    score >= 12.72           ~ 3,
    score >= 8.35            ~ 4,
    !is.na(score)            ~ 5,  # Least deprived
    TRUE                     ~ NA_integer_
  )
}

df_1991_adults <- df_1991_adults %>%
  mutate(imd_quintile = assign_quintile(imd_score))

df_2001_adults <- df_2001_aldults_ %>%
  mutate(imd_quintile = assign_quintile(imd_score))

# Lets follow same for 2011 cutoffs

# First, rename for ease
imd_eng_2004_2007_2010_lsoa01 <- imd_eng_2004_2007_2010_lsoa01 %>%
  rename(rank_2010 = `2010imd_rank`,
         score_2010 = `2010imd_score`)


imd_quintile_cutoffs_2010 <- imd_eng_2004_2007_2010_lsoa01 %>%
     arrange(rank_2010) %>%
     mutate(n = row_number()) %>%
     summarise(
         cutoff_20 = score_2010[round(0.2 * n())],
         cutoff_40 = score_2010[round(0.4 * n())],
         cutoff_60 = score_2010[round(0.6 * n())],
         cutoff_80 = score_2010[round(0.8 * n())]
     )
 View(imd_quintile_cutoffs_2010)

 imd_eng_2004_2007_2010_lsoa01 %>%
     filter(rank_2010 == 1) %>%
     select(LSOA, score_2010, rank_2010)

# A tibble: 1 × 3
  LSOA      score_2010 rank_2010
  <chr>          <dbl>     <dbl>
1 E01021988       87.8         1

The most deprived on england is E01021988 which has a score of 87.8 in 2010, so in this dataset, the most deprived are the highest
cutoffs=
20%= 34.17
40% = 21.35
60%= 13.79
80% = 8.49

assign_quintile_2010 <- function(score) {
  case_when(
    score >= 34.21           ~ 1,  # Most deprived
    score >= 21.15           ~ 2,
    score >= 12.72           ~ 3,
    score >= 8.35            ~ 4,
    !is.na(score)            ~ 5,  # Least deprived
    TRUE                     ~ NA_integer_
  )
}

df_2011_adults <- df_2011_adults %>%
  mutate(imd_quintile = assign_quintile_2010(imd_score))

# And now lets do 2021
IMD2019 <- read_excel("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/PhD/Incidence 30 years/Census check/IMD calculations/IMD2019.xlsx")
So IMD2019 also has a column IMD average score rank in which 1 has the highest IMD average score (46.6)

# Rename columns for clarity if needed
imd_2019_data <- IMD2019 %>%
  rename(
    score_2019 = `IMD average score`,
    rank_2019 = `IMD average score rank`
  )

# Compute national cutoffs based on rank
imd_2019_cutoffs <- imd_2019_data %>%
  arrange(rank_2019) %>%
  mutate(n = row_number()) %>%
  summarise(
    cutoff_20 = score_2019[round(0.2 * n())],
    cutoff_40 = score_2019[round(0.4 * n())],
    cutoff_60 = score_2019[round(0.6 * n())],
    cutoff_80 = score_2019[round(0.8 * n())]
  )

The most deprived on england is Golborne which has a score of 46.6 in 2019, so in this dataset, the most deprived are the highest
cutoffs=
20%= 29.52
40% = 23.9
60%= 17.8
80% = 12.85

assign_quintile_2021 <- function(score) {
  case_when(
    score >= 29.52           ~ 1,  # Most deprived
    score >= 23.9            ~ 2,
    score >= 17.8           ~ 3,
    score >= 12.85            ~ 4,
    !is.na(score)            ~ 5,  # Least deprived
    TRUE                     ~ NA_integer_
  )
}
df_2021_adults <- df_2021_adults %>%
  mutate(imd_quintile = assign_quintile_2021(imd_score))

table(df_2021_adults$imd_quintile)
prop.table(table(df_2021_adults$imd_quintile)) * 100  # for percentages

count
df_2021_adults %>%
  filter(imd_quintile == 3) %>%
  group_by(ethnicity_grouped) %>%
  summarise(pop_total = sum(pop_count, na.rm = TRUE)) %>%
  mutate(percent = round(pop_total / sum(pop_total) * 100, 1)) %>%
  arrange(desc(pop_total))


# Lets remove the wards because they wont align
But lets save eberything before

write_csv(df_1991_adults, "df_1991_adults_quintiles.csv")
write_csv(df_2001_adults, "df_2001_adults_quintiles.csv")
write_csv(df_2011_adults, "df_2011_adults_quintiles.csv")
write_csv(df_2021_adults, "df_2021_adults_quintiles.csv")

# And now summarise
df_1991_summarised <- df_1991_adults %>%
  group_by(year, sex, ethnicity_grouped, age_group, imd_quintile) %>%
  summarise(pop_count = sum(pop_count, na.rm = TRUE), .groups = "drop")

df_2001_summarised <- df_2001_adults %>%
  group_by(year, sex, ethnicity_grouped, age_group, imd_quintile) %>%
  summarise(pop_count = sum(pop_count, na.rm = TRUE), .groups = "drop")

df_2011_summarised <- df_2011_adults %>%
  group_by(year, sex, ethnicity_grouped, age_group, imd_quintile) %>%
  summarise(pop_count = sum(pop_count, na.rm = TRUE), .groups = "drop")

df_2021_summarised <- df_2021_adults_cleaned %>%
  group_by(year, sex, ethnicity_grouped, age_group, imd_quintile) %>%
  summarise(pop_count = sum(pop_count, na.rm = TRUE), .groups = "drop")

write_csv(df_1991_summarised, "df_19911_summarised.csv")
write_csv(df_2001_summarised, "df_2001_summarised.csv")
write_csv(df_2011_summarised, "df_2011_summarised.csv")
write_csv(df_2021_summarised, "df_2021_summarised.csv")


# LETS INTERPOLATEEEEE DHDSBHJCVSJHC
library(tidyr)
library(zoo)
library(dplyr)

pop_all_years <- bind_rows(
  df_1991_summarised,
  df_2001_summarised,
  df_2011_summarised,
  df_2021_summarised
) %>%
  group_by(year, sex, ethnicity_grouped, age_group, imd_quintile) %>%
  summarise(pop_count = sum(pop_count, na.rm = TRUE), .groups = "drop")

write_csv(pop_all_years, "pop_all_years_before_interpolation.csv")

# Summarise per group per year

pop_all_years_summarised <- pop_all_years %>%
  group_by(year, sex, ethnicity_grouped, age_group, imd_quintile) %>%
  summarise(pop_count = sum(pop_count, na.rm = TRUE), .groups = "drop")

# create full grid
full_grid <- expand_grid(
  year = 1991:2024,
  sex = unique(pop_all_years_summarised$sex),
  ethnicity_grouped = unique(pop_all_years_summarised$ethnicity_grouped),
  age_group = unique(pop_all_years_summarised$age_group),
  imd_quintile = unique(pop_all_years_summarised$imd_quintile)
)
pop_all_years <- pop_all_years %>%
  mutate(year = as.integer(year))

full_grid <- full_grid %>%
  mutate(year = as.integer(year))

# Standarise before joining
standardise_age_group <- function(x) gsub("–", "-", x)

# Apply to all adult datasets
df_1991_summarised <- df_1991_summarised %>% mutate(age_group = standardise_age_group(age_group))
df_2001_summarised <- df_2001_summarised %>% mutate(age_group = standardise_age_group(age_group))
df_2011_summarised <- df_2011_summarised %>% mutate(age_group = standardise_age_group(age_group))
df_2021_summarised <- df_2021_summarised %>% mutate(age_group = standardise_age_group(age_group))

pop_all_years <- bind_rows(
  df_1991_summarised,
  df_2001_summarised,
  df_2011_summarised,
  df_2021_summarised
) %>%
  group_by(year, sex, ethnicity_grouped, age_group, imd_quintile) %>%
  summarise(pop_count = sum(pop_count, na.rm = TRUE), .groups = "drop")

# Recreate full_grid with corrected levels
full_grid <- expand_grid(
  year = 1991:2024,
  sex = unique(pop_all_years$sex),
  ethnicity_grouped = unique(pop_all_years$ethnicity_grouped),
  age_group = unique(pop_all_years$age_group),
  imd_quintile = unique(pop_all_years$imd_quintile)
)

pop_full <- full_grid %>%
  left_join(pop_all_years, by = c("year", "sex", "ethnicity_grouped", "age_group", "imd_quintile")) %>%
  arrange(sex, ethnicity_grouped, age_group, imd_quintile, year) %>%
  group_by(sex, ethnicity_grouped, age_group, imd_quintile) %>%
  mutate(pop_count_interp = zoo::na.approx(pop_count, x = year, na.rm = FALSE, rule = 2)) %>%
  ungroup()

write_csv(pop_full, "pop_full_interpolated_with_imd.csv")
