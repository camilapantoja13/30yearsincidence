# === Cleaning 1991 file ===
# Load necessary libraries
library(readxl)
library(dplyr)
library(tidyr)

# Load the data
df_1991 <- read_tsv("/Users/mariacamilapantojaruiz/Library/Mobile Documents/com~apple~CloudDocs/Documents/PhD/Incidence 30 years/Census check/1991.tsv")

# Load necessary libraries
library(dplyr)

# Manually create a data frame with wards and IMD scores based on the 2000 IMD release
imd_lookup <- tribble(
  ~ward,            ~borough,    ~imd_score,
  "Cathedral",      "Southwark", 50.47,
  "Chaucer",        "Southwark", 54.66,
  "Bricklayers",    "Southwark", 39.69,
  "Riverside",      "Southwark", 36.77,
  "Rotherhithe",    "Southwark", 55.47,
  "Dockyard",       "Southwark", 30.16,
  "Browning",       "Southwark", 50.21,
  "Burgess",        "Southwark", 51.78,
  "Newington",      "Southwark", 47.38,
  "Faraday",        "Southwark", 49.69,
  "St Giles",       "Southwark", 51.11,
  "Brunswick",      "Southwark", 57.56,
  
  "Bishop's",       "Lambeth",   42.85,
  "Town Hall",      "Lambeth",   38.33,
  "Streatham Hill", "Lambeth",   32.12,
  "Clapham Park",   "Lambeth",   25.34,
  "Clapham Town",   "Lambeth",   33.42,
  "Angell",         "Lambeth",   53.28,
  "Herne Hill",     "Lambeth",   34.94,
  "Ferndale",       "Lambeth",   42.43,
  "Larkhall",       "Lambeth",   43.05,
  "Oval",           "Lambeth",   40.30,
  "Prince's",       "Lambeth",   41.22,
  "Stockwell",      "Lambeth",   42.85,
  "Thornton",       "Lambeth",   24.71,
  "Tulse Hill",     "Lambeth",   41.49,
  "Vassall",        "Lambeth",   52.86
)

# Extracting age group
library(stringr)
library(dplyr)

df_1991 <- df_1991 %>%
  mutate(
    # Extract any pattern that looks like 0 - 4, 15, etc.
    `Age Range` = str_extract(cell, "aged\\s+\\d{1,2}(\\s*-\\s*\\d{1,2})?"),
    `Age Range` = str_remove(`Age Range`, "aged\\s+"),  # Remove the word "aged"
    `Age Range` = str_replace_all(`Age Range`, "\\s*", ""),  # Remove spaces like "0 - 4" → "0-4"
    `Age Range` = ifelse(str_detect(cell, "85"), "85+", `Age Range`)  # Normalize "85 and over"
  )
df_1991_filtered <- df_1991 %>%
  filter(!is.na(`Age Range`))

# Dropping the totals
df_1991_filtered <- df_1991_filtered %>%
  filter(!str_detect(cell, "Total persons"))

df_1991_filtered <- df_1991_filtered %>%
  filter(!str_detect(`1991 frozen ward`, regex("total|sum|all", ignore_case = TRUE)))

# Extracting sex and ethnicity
df_1991_filtered <- df_1991_filtered %>%
  mutate(
    # Extract Sex
    Sex = case_when(
      str_detect(cell, "Males") ~ "Male",
      str_detect(cell, "Females") ~ "Female",
      TRUE ~ NA_character_
    ),
    
    # Classify Ethnicity
    Ethnicity = case_when(
      str_detect(cell, "White") ~ "White",
      str_detect(cell, "Black African") ~ "Black African",
      str_detect(cell, "Black Carribean") ~ "Black Caribbean",
      str_detect(cell, "Black other") ~ "Black Other",
      str_detect(cell, "Ethnic group") ~ "Other",  # All others explicitly labeled as ethnic group
      TRUE ~ NA_character_
    )
  )

# Adding the IMD
df_1991_filtered <- df_1991_filtered %>%
  mutate(
    ward_clean = str_remove(`1991 frozen ward`, "^.*?\\s"),  # remove everything up to the first space
    ward_clean = str_trim(ward_clean)
  )

df_1991_joined <- df_1991_filtered %>%
  left_join(imd_lookup, by = c("ward_clean" = "ward"))

df_1991_joined <- df_1991_joined %>%
  mutate(
    imd_score = str_replace(imd_score, ",", "."),   # Convert "49,68" → "49.68"
    imd_score = as.numeric(imd_score)               # Make it numeric
  )

# Summarise
summary_1991 <- f_1991_joined %>%
  group_by(Sex, Ethnicity, `Age Range`, imd_score) %>%
  summarise(
    Total = sum(value, na.rm = TRUE),
    .groups = "drop"
  )

# Summarise into 3 tables
library(writexl)

summary_ethnicity_age <- summary_1991 %>%
  group_by(Ethnicity, `Age Range`) %>%
  summarise(
    Total = sum(Total, na.rm = TRUE),
    .groups = "drop"
  )

summary_ethnicity_age_imd <- summary_1991 %>%
  group_by(Ethnicity, `Age Range`, imd_score) %>%
  summarise(
    Total = sum(Total, na.rm = TRUE),
    .groups = "drop"
  )

# Summary for female and male including IMD
summary_female <- summary_1991 %>%
  filter(Sex == "Female")

summary_male <- summary_1991 %>%
  filter(Sex == "Male")

# Creating a long format version with IMD (for interpolation etc.)
summary_long <- summary_1991 %>%
  mutate(Year = 1991) %>%
  select(Year, Sex, Ethnicity, `Age Range`, imd_score, Total)

# Save it
write_xlsx(
  list(
    Female = summary_female,
    Male = summary_male
  ),
  path = "/Users/mariacamilapantojaruiz/Library/Mobile Documents/com~apple~CloudDocs/Documents/R/1991_summary_by_sex_ethnicity_age_imd.xlsx"
)

write_csv(
  summary_long,
  "/Users/mariacamilapantojaruiz/Library/Mobile Documents/com~apple~CloudDocs/Documents/R/1991_summary_long_with_imd.csv"
)


# === Cleaning 2001 Census ===
library(readr)
library(dplyr)
library(stringr)
library(tidyr)
library(readxl)

# Load the 2001 dataset (TSV)
df_2001 <- read_tsv("/Users/mariacamilapantojaruiz/Library/Mobile Documents/com~apple~CloudDocs/Documents/PhD/Incidence 30 years/Census check/2001.tsv")

# Rename columns
df_2001_clean <- df_2001 %>%
  rename(
    Ethnicity_raw = `Ethnic Grou`,    # or "Ethnic Group" if that's the actual name
    Ward = `2003 ST ward`
  ) %>%
  filter(
    !str_detect(Age, "All categories"),
    !str_detect(Ethnicity_raw, "All categories")
  )

# Age Range
df_2001_clean <- df_2001_clean %>%
  mutate(
    `Age Range` = str_extract(Age, "\\d{1,2}\\s+to\\s+\\d{1,2}|\\d{1,2}"),
    `Age Range` = str_replace_all(`Age Range`, " to ", "-"),
    `Age Range` = ifelse(str_detect(Age, "90 and over|85 to 89"), "85+", `Age Range`)
  )

# Ethnicity
df_2001_clean <- df_2001_clean %>%
  mutate(
    Ethnicity = case_when(
      str_detect(Ethnicity_raw, "White") ~ "White",
      str_detect(Ethnicity_raw, regex("Black.*African", ignore_case = TRUE)) ~ "Black African",
      str_detect(Ethnicity_raw, regex("Black.*Caribbean", ignore_case = TRUE)) ~ "Black Caribbean",
      str_detect(Ethnicity_raw, regex("Black.*Other", ignore_case = TRUE)) ~ "Black Other",
      TRUE ~ "Other"
    )
  )

# (Im doing this after doing 2011, so this following step is already created)
df_2001_joined <- df_2001_clean %>%
  left_join(imd_by_ward, by = c("Ward_Clean" = "Ward_Name"))


# Summarise counts by demographics and IMD
summary_2001 <- df_2001_joined %>%
  group_by(Sex, Ethnicity, `Age Range`, IMD_score) %>%
  summarise(Total = sum(value, na.rm = TRUE), .groups = "drop")

summary_ethnicity_age_2001 <- summary_2001 %>%
  group_by(Ethnicity, `Age Range`, IMD_score) %>%
  summarise(Total = sum(Total), .groups = "drop")

summary_female_2001 <- summary_2001 %>% filter(Sex == "Female")
summary_male_2001 <- summary_2001 %>% filter(Sex == "Male")

write_xlsx(
  list(
    Total = summary_ethnicity_age_2001,
    Female = summary_female_2001,
    Male = summary_male_2001
  ),
  path = "/Users/mariacamilapantojaruiz/Library/Mobile Documents/com~apple~CloudDocs/Documents/R/2001_summary_by_sex_ethnicity_age.xlsx"
)

summary_long_2001 <- summary_2001 %>%
  mutate(Year = 2001) %>%
  select(Year, Sex, Ethnicity, `Age Range`, IMD_score, Total)

write_csv(summary_long_2001,
          "/Users/mariacamilapantojaruiz/Library/Mobile Documents/com~apple~CloudDocs/Documents/R/2001_summary_long.csv")


# === Cleaning 2011 Census ===
library(readxl)

df_2011 <- read_tsv("/Users/mariacamilapantojaruiz/Library/Mobile Documents/com~apple~CloudDocs/Documents/PhD/Incidence 30 years/Census check/2011.tsv") 

# Also import Lower_Layer_Super_Output_Area_(2001)_to_Ward_(2010)_Lookup_in_England_and_Wales and imd2010adj_2015

# First, we need to match the IMD with the wards as the information is by LSOA

# Assign the long name to a shorter variable
lookup <- `Lower_Layer_Super_Output_Area_(2001)_to_Ward_(2010)_Lookup_in_England_and_Wales`
imd <- imd2010adj_2015

library(dplyr)

# Get average IMD per ward from the IMD dataset using lookup
imd_by_ward <- lookup %>%
  select(Ward_Name, LSOA_code) %>%
  left_join(imd, by = "LSOA_code") %>%
  group_by(Ward_Name) %>%
  summarise(IMD_score = mean(IMD_score, na.rm = TRUE), .groups = "drop")

#  Step 2: Clean ward name in df_2011 
df_2011 <- df_2011 %>%
  mutate(
    Ward_Clean = str_extract(`2011 census merged ward`, "^[^\\[]+"),  # Remove [suffix]
    Ward_Clean = str_trim(Ward_Clean)
  )

# Step 3: Join df_2011 with lookup using ward names
df_2011_with_imd <- df_2011 %>%
  mutate(Ward_Clean = str_trim(str_extract(`2011 census merged ward`, "(?<=: ).*"))) %>%
  left_join(imd_by_ward, by = c("Ward_Clean" = "Ward_Name"))


# Filter out the totals
# Step 1: Filter out totals
df_2011_filtered <- df_2011_with_imd %>%
  filter(
    !str_detect(Age, "All categories"),  # remove age totals
    !str_detect(`Ethnic Grou`, "All categories")  # remove ethnicity totals
  )

# Step 2: Extract and clean Age Range
df_2011_filtered <- df_2011_filtered %>%
  mutate(
    `Age Range` = str_extract(Age, "\\d{1,2}\\s+to\\s+\\d{1,2}|\\d{1,2}"),
    `Age Range` = str_replace_all(`Age Range`, " to ", "-"),
    `Age Range` = ifelse(str_detect(Age, "90 and over|85 to 89"), "85+", `Age Range`)
  )

# Step 3: Recode Ethnicity
df_2011_filtered <- df_2011_filtered %>%
  mutate(
    Ethnicity = case_when(
      str_detect(`Ethnic Grou`, "White") ~ "White",
      str_detect(`Ethnic Grou`, "Black/African/Caribbean/Black British: African") ~ "Black African",
      str_detect(`Ethnic Grou`, "Black/African/Caribbean/Black British: Caribbean") ~ "Black Caribbean",
      str_detect(`Ethnic Grou`, "Black/African/Caribbean/Black British: Other Black") ~ "Black Other",
      TRUE ~ "Other"
    )
  )

# Step 4: Recode Sex
df_2011_filtered <- df_2011_filtered %>%
  mutate(
    Sex = case_when(
      Sex == "Males" ~ "Male",
      Sex == "Females" ~ "Female",
      TRUE ~ NA_character_
    )
  )

# ✅ Step 5: Summarise including IMD
summary_2011 <- df_2011_filtered %>%
  group_by(Sex, Ethnicity, `Age Range`, IMD_score) %>%
  summarise(Total = sum(value, na.rm = TRUE), .groups = "drop")

# Sub-tables
summary_ethnicity_age_2011 <- summary_2011 %>%
  group_by(Ethnicity, `Age Range`, IMD_score) %>%
  summarise(Total = sum(Total), .groups = "drop")

summary_female_2011 <- summary_2011 %>% filter(Sex == "Female")
summary_male_2011 <- summary_2011 %>% filter(Sex == "Male")

# Export to Excel
write_xlsx(
  list(
    Total = summary_ethnicity_age_2011,
    Female = summary_female_2011,
    Male = summary_male_2011
  ),
  path = "/Users/mariacamilapantojaruiz/Library/Mobile Documents/com~apple~CloudDocs/Documents/R/2011_summary_by_sex_ethnicity_age.xlsx"
)

# Long format for interpolation or modeling
summary_long_2011 <- summary_2011 %>%
  mutate(Year = 2011) %>%
  select(Year, Sex, Ethnicity, `Age Range`, IMD_score, Total)

write_csv(summary_long_2011,
          "/Users/mariacamilapantojaruiz/Library/Mobile Documents/com~apple~CloudDocs/Documents/R/2011_summary_long.csv")

# === Cleaning 2021 Census ===

library(readxl)
library(dplyr)
library(stringr)
library(tidyr)
library(readr)

# Load census and IMD datasets
df_2021 <- read_excel("/Users/mariacamilapantojaruiz/Library/Mobile Documents/com~apple~CloudDocs/Documents/PhD/Incidence 30 years/Census check/2021.xlsx")

IMD2019 <- read_excel("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/PhD/Incidence 30 years/Census check/IMD calculations/IMD2019.xlsx")

# Ward names
IMD2019 <- IMD2019 %>%
  rename(
    Ward_Name = 2,                    # 2nd column is ward name
    IMD_score = `IMD average score`
  )

# Step 3: Clean and standardise column names
names(df_2021) <- make.names(names(df_2021))  # For safe use in code

# Step 4: Add cleaned ward name to match IMD
df_2021 <- df_2021 %>%
  mutate(
    Ward_Clean = str_trim(Electoral.wards.and.divisions)
  )

# Step 5: Join IMD scores
df_2021 <- df_2021 %>%
  left_join(imd_2019, by = c("Ward_Clean" = "Ward_Name"))


# Step 2: Create Age Ranges
df_2021 <- df_2021 %>%
  mutate(
    `Age Range` = case_when(
      Age..86.categories..Code >= 0  & Age..86.categories..Code <= 4   ~ "0-4",
      Age..86.categories..Code >= 5  & Age..86.categories..Code <= 9   ~ "5-9",
      Age..86.categories..Code >= 10 & Age..86.categories..Code <= 14  ~ "10-14",
      Age..86.categories..Code == 15 ~ "15",
      Age..86.categories..Code >= 16 & Age..86.categories..Code <= 17  ~ "16-17",
      Age..86.categories..Code >= 18 & Age..86.categories..Code <= 19  ~ "18-19",
      Age..86.categories..Code >= 20 & Age..86.categories..Code <= 24  ~ "20-24",
      Age..86.categories..Code >= 25 & Age..86.categories..Code <= 29  ~ "25-29",
      Age..86.categories..Code >= 30 & Age..86.categories..Code <= 34  ~ "30-34",
      Age..86.categories..Code >= 35 & Age..86.categories..Code <= 39  ~ "35-39",
      Age..86.categories..Code >= 40 & Age..86.categories..Code <= 44  ~ "40-44",
      Age..86.categories..Code >= 45 & Age..86.categories..Code <= 49  ~ "45-49",
      Age..86.categories..Code >= 50 & Age..86.categories..Code <= 54  ~ "50-54",
      Age..86.categories..Code >= 55 & Age..86.categories..Code <= 59  ~ "55-59",
      Age..86.categories..Code >= 60 & Age..86.categories..Code <= 64  ~ "60-64",
      Age..86.categories..Code >= 65 & Age..86.categories..Code <= 69  ~ "65-69",
      Age..86.categories..Code >= 70 & Age..86.categories..Code <= 74  ~ "70-74",
      Age..86.categories..Code >= 75 & Age..86.categories..Code <= 79  ~ "75-79",
      Age..86.categories..Code >= 80 & Age..86.categories..Code <= 84  ~ "80-84",
      Age..86.categories..Code >= 85                                  ~ "85+",
      TRUE ~ NA_character_
    )
  )

# Step 3: Recode Ethnicity
df_2021 <- df_2021 %>%
  mutate(
    Ethnicity = case_when(
      str_detect(Ethnic.group..20.categories., "^White") ~ "White",
      str_detect(Ethnic.group..20.categories., "Caribbean$") ~ "Black Caribbean",
      str_detect(Ethnic.group..20.categories., "African$") ~ "Black African",
      str_detect(Ethnic.group..20.categories., "Other Black$") ~ "Black Other",
      TRUE ~ "Other"
    )
  )
# Step 4: Standardise Sex
df_2021 <- df_2021 %>%
  mutate(
    Sex = case_when(
      Sex..2.categories. == "Male" ~ "Male",
      Sex..2.categories. == "Female" ~ "Female",
      TRUE ~ NA_character_
    )
  )

# Step 9: Summarise
summary_2021 <- df_2021 %>%
  filter(!is.na(`Age Range`)) %>%
  group_by(Sex, Ethnicity, `Age Range`, IMD_score) %>%
  summarise(Total = sum(Observation, na.rm = TRUE), .groups = "drop") %>%
  mutate(Year = 2021) %>%
  select(Year, Sex, Ethnicity, `Age Range`, IMD_score, Total)

library(writexl)
library(readr)

# Excel export (all summaries in one file)
write_xlsx(
  list(
    Summary_1991 = summary_1991,
    Summary_2001 = summary_2001,
    Summary_2011 = summary_2011,
    Summary_2021 = summary_2021
  ),
  path = "/Users/mariacamilapantojaruiz/Library/Mobile Documents/com~apple~CloudDocs/Documents/R/census_summaries_by_year.xlsx"
)

# Optional: Export individual CSV files
write_csv(summary_1991, "/Users/mariacamilapantojaruiz/Library/Mobile Documents/com~apple~CloudDocs/Documents/R/summary_1991.csv")
write_csv(summary_2001, "/Users/mariacamilapantojaruiz/Library/Mobile Documents/com~apple~CloudDocs/Documents/R/summary_2001.csv")
write_csv(summary_2011, "/Users/mariacamilapantojaruiz/Library/Mobile Documents/com~apple~CloudDocs/Documents/R/summary_2011.csv")
write_csv(summary_2021, "/Users/mariacamilapantojaruiz/Library/Mobile Documents/com~apple~CloudDocs/Documents/R/summary_2021.csv")


# === Interpolate and extrapolate ===
summary_long_1991  # from 1991
summary_long_2001  # from 2001
summary_long_2011  # from 2011
summary_long_2021  # from 2021

#Binding
summary_all_years <- bind_rows(
  summary_long_1991,
  summary_long_2001,
  summary_long_2011,
  summary_long_2021
)

# Finding inconsistencies
summary_all_years %>%
  group_by(Sex, Ethnicity, `Age Range`) %>%
  summarise(n_years = n_distinct(Year), .groups = "drop") %>%
  filter(n_years < 4) %>%
  arrange(desc(n_years))

unique(summary_all_years$`Age Range`)
unique(summary_all_years$Ethnicity)
unique(summary_all_years$Sex)

library(dplyr)
library(stringr)

summary_all_years <- summary_all_years %>%
  mutate(
    # Standardize Age Ranges
    `Age Range` = case_when(
      `Age Range` %in% c("5-7", "8-9") ~ "5-9",
      `Age Range` == "85" ~ "85+",
      TRUE ~ `Age Range`
    ),
    `Age Range` = str_replace_all(`Age Range`, "[–—]", "-"),  # fix dash types if any
    `Age Range` = str_trim(`Age Range`),
    
    # Standardize Sex
    Sex = case_when(
      str_to_lower(Sex) %in% c("female", "females") ~ "Female",
      str_to_lower(Sex) %in% c("male", "males") ~ "Male",
      TRUE ~ Sex
    )
  )

summary_all_years %>%
  group_by(Sex, Ethnicity, `Age Range`) %>%
  summarise(n_years = n_distinct(Year), .groups = "drop") %>%
  filter(n_years < 4)

# Missing
summary_all_years <- summary_all_years %>%
  add_row(Year = 1991, Sex = "Female", Ethnicity = "Black Other", `Age Range` = "75-79", Total = NA) %>%
  add_row(Year = 1991, Sex = "Male", Ethnicity = "Black Other", `Age Range` = "55-59", Total = NA)

summary_interpolated <- summary_all_years %>%
  complete(
    Year = full_seq(1991:2024, 1),
    nesting(Sex, Ethnicity, `Age Range`)
  ) %>%
  group_by(Sex, Ethnicity, `Age Range`) %>%
  arrange(Year) %>%
  mutate(
    Total_interp = approx(Year[!is.na(Total)], Total[!is.na(Total)], xout = Year, rule = 2)$y
  ) %>%
  ungroup()

# Plot them
library(ggplot2)

plot_data <- summary_interpolated %>%
  group_by(Year, Ethnicity) %>%
  summarise(Total = sum(Total_interp, na.rm = TRUE), .groups = "drop")
ggplot(plot_data, aes(x = Year, y = Total, color = Ethnicity)) +
  geom_line(size = 1.2) +
  labs(
    title = "Population by Ethnicity (1991–2024)",
    y = "Total Population",
    x = "Year",
    color = "Ethnicity"
  ) +
  theme_minimal()

# Sex
female_totals <- summary_interpolated %>%
  filter(Sex == "Female") %>%
  group_by(Year) %>%
  summarise(Total_Females = sum(Total_interp, na.rm = TRUE))

male_totals <- summary_interpolated %>%
  filter(Sex == "Male") %>%
  group_by(Year) %>%
  summarise(Total_Males = sum(Total_interp, na.rm = TRUE))

#Total per year
total_population <- summary_interpolated %>%
  group_by(Year) %>%
  summarise(Total_Population = sum(Total_interp, na.rm = TRUE))
combined_totals <- summary_interpolated %>%
  group_by(Year, Sex) %>%
  summarise(Total_Population = sum(Total_interp, na.rm = TRUE), .groups = "drop")

# === Fix extrapolation ===
# Defining a function to assign IMD period
assign_imd_period <- function(year) {
  case_when(
    year >= 1991 & year <= 2000 ~ 1991,
    year >= 2001 & year <= 2010 ~ 2001,
    year >= 2011 & year <= 2018 ~ 2011,
    year >= 2019               ~ 2021
  )
}

# Name all the columns the same
# 1991
summary_1991 <- summary_1991 %>%
  mutate(Year = 1991) %>%
  rename(IMD_score = imd_score) %>%
  select(Year, Sex, Ethnicity, `Age Range`, IMD_score, Total)

# 2001
summary_2001 <- summary_2001 %>%
  mutate(Year = 2001) %>%
  rename(IMD_score = IMD_score) %>%
  select(Year, Sex, Ethnicity, `Age Range`, IMD_score, Total)

# 2011
summary_2011 <- summary_2011 %>%
  mutate(Year = 2011) %>%
  select(Year, Sex, Ethnicity, `Age Range`, IMD_score, Total)

# 2021 (already OK)
summary_2021 <- summary_2021 %>%
  mutate(Year = 2021) %>%
  select(Year, Sex, Ethnicity, `Age Range`, IMD_score, Total)

# Join them all
summary_all_years <- bind_rows(
  summary_1991,
  summary_2001,
  summary_2011,
  summary_2021
)

## Im going to use my already known population, which I created like this: 
library(dplyr)
library(tidyr)
library(purrr)

# Step 1: Create full grid
full_grid <- summary_all_years %>%
  complete(
    Year = full_seq(1991:2024, 1),
    nesting(Sex, Ethnicity, `Age Range`)
  )

# Step 2: Interpolate 1991–2021 + Extrapolate 2022–2024 linearly
summary_interpolated <- full_grid %>%
  group_by(Sex, Ethnicity, `Age Range`) %>%
  arrange(Year) %>%
  group_split() %>%
  map_dfr(function(df) {
    # Extract known values
    known <- df %>% filter(!is.na(Total))
    
    if (nrow(known) >= 2) {
      # Linear interpolation for all years in the full range
      interpolated <- approx(
        x = known$Year,
        y = known$Total,
        xout = df$Year,
        method = "linear",
        rule = 1,  # NA outside range
        ties = mean
      )
      
      # Estimate slope from last two known years
      last_two <- tail(known, 2)
      slope <- diff(last_two$Total) / diff(last_two$Year)
      final_year <- max(known$Year)
      
      # Extrapolate beyond last known year
      df <- df %>%
        mutate(
          Total_interp = ifelse(
            Year <= final_year,
            interpolated$y,
            last_two$Total[2] + slope * (Year - final_year)
          )
        )
    } else {
      df$Total_interp <- NA
    }
    return(df)
  }) %>%
  ungroup()

#Total per year
total_population <- summary_interpolated %>%
  group_by(Year) %>%
  summarise(Total_Population = sum(Total_interp, na.rm = TRUE))
combined_totals <- summary_interpolated %>%
  group_by(Year, Sex) %>%
  summarise(Total_Population = sum(Total_interp, na.rm = TRUE), .groups = "drop")

female_totals <- summary_interpolated %>%
  filter(Sex == "Female") %>%
  group_by(Year) %>%
  summarise(Total_Females = sum(Total_interp, na.rm = TRUE))

male_totals <- summary_interpolated %>%
  filter(Sex == "Male") %>%
  group_by(Year) %>%
  summarise(Total_Males = sum(Total_interp, na.rm = TRUE))

summary_interpolated %>%
  group_by(Year, Ethnicity) %>%
  summarise(Total = sum(Total_interp, na.rm = TRUE), .groups = "drop")

# Save everything
# Set base path
save_path <- "/Users/mariacamilapantojaruiz/Library/Mobile Documents/com~apple~CloudDocs/Documents/R"

# Total population by year
write_csv(total_population, file.path(save_path, "population_total.csv"))

# Sex-specific totals by year
write_csv(combined_totals, file.path(save_path, "population_by_sex.csv"))

# Ethnicity totals by year
write_csv(
  summary_interpolated %>%
    group_by(Year, Ethnicity) %>%
    summarise(Total = sum(Total_interp, na.rm = TRUE), .groups = "drop"),
  file.path(save_path, "population_by_ethnicity.csv")
)

# Ethnicity by sex by year
write_csv(
  summary_interpolated %>%
    group_by(Year, Ethnicity, Sex) %>%
    summarise(Total = sum(Total_interp, na.rm = TRUE), .groups = "drop"),
  file.path(save_path, "population_by_ethnicity_sex.csv")
)

# Full interpolated table (includes age)
write_csv(summary_interpolated, file.path(save_path, "summary_interpolated_full.csv"))

# Age breakdown: population by year and age range
write_csv(
  summary_interpolated %>%
    group_by(Year, `Age Range`) %>%
    summarise(Total = sum(Total_interp, na.rm = TRUE), .groups = "drop"),
  file.path(save_path, "population_by_age.csv")
)

# Age × Sex × Ethnicity (most detailed stratification)
write_csv(
  summary_interpolated %>%
    group_by(Year, Sex, Ethnicity, `Age Range`) %>%
    summarise(Total = sum(Total_interp, na.rm = TRUE), .groups = "drop"),
  file.path(save_path, "population_by_age_ethnicity_sex.csv")
)

## For including the IMD, nstead of duplicating the Total, I'm calculating proportions of population in each IMD score group using census data, 
then allocate Total accordingly.

# 1991
prop_1991 <- summary_1991 %>%
  group_by(Sex, Ethnicity, `Age Range`) %>%
  mutate(prop = Total / sum(Total)) %>%
  select(Sex, Ethnicity, `Age Range`, IMD_score, prop)

pop_with_imd <- pop_interp %>%
  mutate(IMD_period = as.character(IMD_period)) %>%
  left_join(
    prop_1991 %>% mutate(IMD_period = "1991"),
    by = c("Sex", "Ethnicity", "Age Range" = "Age Range", "IMD_period")
  ) %>%
  mutate(Total_adjusted = Total * prop)

# 2001
prop_2001 <- summary_2001 %>%
  group_by(Sex, Ethnicity, `Age Range`) %>%
  mutate(prop = Total / sum(Total)) %>%
  select(Sex, Ethnicity, `Age Range`, IMD_score, prop)

pop_with_imd <- pop_interp %>%
  mutate(IMD_period = as.character(IMD_period)) %>%
  left_join(
    prop_2001 %>% mutate(IMD_period = "2001"),
    by = c("Sex", "Ethnicity", "Age Range" = "Age Range", "IMD_period")
  ) %>%
  mutate(Total_adjusted = Total * prop)

# 2011
prop_2011 <- summary_2011 %>%
  group_by(Sex, Ethnicity, `Age Range`) %>%
  mutate(prop = Total / sum(Total)) %>%
  select(Sex, Ethnicity, `Age Range`, IMD_score, prop)

pop_with_imd <- pop_interp %>%
  mutate(IMD_period = as.character(IMD_period)) %>%
  left_join(
    prop_2011 %>% mutate(IMD_period = "2011"),
    by = c("Sex", "Ethnicity", "Age Range" = "Age Range", "IMD_period")
  ) %>%
  mutate(Total_adjusted = Total * prop)

# 2021
prop_2021 <- summary_2021 %>%
  group_by(Sex, Ethnicity, `Age Range`) %>%
  mutate(prop = Total / sum(Total)) %>%
  select(Sex, Ethnicity, `Age Range`, IMD_score, prop)

pop_with_imd <- pop_interp %>%
  mutate(IMD_period = as.character(IMD_period)) %>%
  left_join(
    prop_2021 %>% mutate(IMD_period = "2021"),
    by = c("Sex", "Ethnicity", "Age Range" = "Age Range", "IMD_period")
  ) %>%
  mutate(Total_adjusted = Total * prop)

imd_ref <- bind_rows(
  prop_1991 %>% mutate(IMD_period = "1991"),
  prop_2001 %>% mutate(IMD_period = "2001"),
  prop_2011 %>% mutate(IMD_period = "2011"),
  prop_2021 %>% mutate(IMD_period = "2021")
)

pop_interp <- pop_interp %>%
  rename(`Age Range` = `Age Range`) %>%  # to match names
  mutate(IMD_period = case_when(
    Year >= 1991 & Year <= 2000 ~ "1991",
    Year >= 2001 & Year <= 2010 ~ "2001",
    Year >= 2011 & Year <= 2020 ~ "2011",
    Year >= 2021 ~ "2021"
  ))

pop_with_imd <- pop_interp %>%
  left_join(imd_ref, by = c("Sex", "Ethnicity", "Age Range", "IMD_period")) %>%
  mutate(Total_adjusted = Total * prop)


library(writexl)
write_xlsx(pop_with_imd, path = "pop_with_imd.xlsx")

