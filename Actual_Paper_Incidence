# Loading the dataset and everything
install.packages("readxl")
library(readxl)
dataset_20250422 <- read_excel("/Users/mariacamilapantojaruiz/Library/Mobile Documents/com~apple~CloudDocs/Documents/PhD/Incidence 30 years/20250422 dataset.xlsx")
library(dplyr)      # For %>%
library(gt)         # For rendering the tables
library(readxl)
library(dplyr)
library(tidyr)
library(tidyverse)
install.packages("writexl")  
library(writexl)

# View first few rows
head(dataset_20250422)

# Then, set working directory for outputs
setwd("/Users/mariacamilapantojaruiz/Library/Mobile Documents/com~apple~CloudDocs/Documents/R")

# Load correct population total
population_totals <- read.csv(
  "/Users/mariacamilapantojaruiz/Library/Mobile Documents/com~apple~CloudDocs/Documents/PhD/Incidence 30 years/Census check/Checked/Interpolation/population_total.csv"
) %>%
  mutate(
    year = as.integer(Year),
    population = as.numeric(Total_Population)
  ) %>%
  filter(!is.na(year) & year < 2025) %>%
  select(year, population)

# Load age-specific population for ESP
population_age_year <- read.csv(
  "/Users/mariacamilapantojaruiz/Library/Mobile Documents/com~apple~CloudDocs/Documents/PhD/Incidence 30 years/Census check/Checked/Interpolation/population_by_age.csv"
) %>%
  rename(
    year = Year,
    age_group = Age.Range,
    population = Total
  ) %>%
  mutate(
    year = as.integer(year),
    population = as.numeric(population),
    age_group = gsub(" - ", "-", age_group)
  ) %>%
  filter(!is.na(year) & year < 2025)

# Ward codes (Just for me to read)
southwark95 <- c(
  "Cathedral", "Chaucer", "Bricklayers", "Riverside", 
  "Rotherhithe", Dockyard", "Browning", "Burgees", 
  "Newington", "Faraday", 
  "St Giles", Brunswick", 
)
southwark01 <- c(
  "Cathedrals", "Chaucer", "Grange", "Riverside", "Rotherhithe",
  "Surrey Docks", "Newington", "East Walworth", "South Bermondsey",
  "Faraday", "Camberwell Green"
)
southwark11 <- c(
  "Cathedrals", "Chaucer", "Grange", "Riverside", "Rotherhithe",
  "Surrey Docks", "Newington", "East Walworth", "South Bermondsey",
  "Faraday", "Camberwell Green"
)
southwark21 <- c(
  "Borough & Bankside", "Camberwell Green", "Chaucer", "Faraday",
  "London Bridge & West Bermondsey", "Newington (Southwark)", "North Bermondsey",
  "North Walworth", "Old Kent Road", "Rotherhithe",
  "South Bermondsey", "St George's (Southwark)", "Surrey Docks"
)
lambeth95 <- c("Bishop's", "Town Hall", "Streatham Hill", "Clapham Park", "Clapham Town", "Angell", "Herne Hill", "Ferndale",
               "Larkhall", "Oval", "Prince's", "Stockwell", "Thornton", "Tulse Hill", "Vassall")
lambeth01 <- c(
  "Bishop`s", "Brixton Hill", "Clapham Common", "Clapham Town", "Coldharbour", "Ferndale",
  "Herne Hill", "Larkhall", "Oval", "Prince`s", "Stockwell", "Thornton", "Tulse Hill", "Vassall"
)
lambeth11 <- c(
  "Bishop's", "Brixton Hill", "Clapham Common", "Clapham Town", "Coldharbour", "Ferndale",
  "Herne Hill", "Larkhall", "Oval", "Prince's", "Stockwell", "Thornton", "Tulse Hill", "Vassall"
)
lambeth21 <- c(
  "Waterloo & South Bank", "Vauxhall (Lambeth)", "Kennington (Lambeth)", "Oval",
  "Stockwell West & Larkhall", "Stockwell East", "Myatt's Fields", "Clapham Town",
  "Clapham East", "Clapham Common & Abbeville", "Brixton Acre Lane", "Brixton North",
  "Brixton Rush Common", "Clapham Park", "Brixton Windrush",
  "Herne Hill & Loughborough Junction", "St Martin's (Lambeth)"
)

# Valid LSOAs  (Just for me to read)
valid_lsoas_southwark <- c(
  # Cathedrals
  "E01003927", "E01003929", "E01003934", "E01003935", "E01003928",
  "E01003930", "E01003931", "E01003932", "E01003933",

  # Chaucer
  "E01003939", "E01003938", "E01003940", "E01003941", "E01003942",
  "E01003936", "E01003937", "E01003943", "E01003944",

  # Grange
  "E01003976", "E01003982", "E01003975", "E01003978", "E01003979",
  "E01003981", "E01003977", "E01003980",

  # Riverside
  "E01004025", "E01004026", "E01004027", "E01004022", "E01004023",
  "E01004028", "E01004024",

  # Rotherhithe
  "E01004029", "E01004032", "E01004030", "E01004031", "E01004033",
  "E01004034", "E01004036", "E01004035",

  # Surrey Docks
  "E01004053", "E01004054", "E01004055", "E01004056", "E01004057",
  "E01004058", "E01004059", "E01004060",

  # Newington
  "E01003994", "E01003992", "E01003995", "E01003996", "E01003998",
  "E01003999", "E01003991",

  # East Walworth
  "E01003959", "E01003960", "E01003961", "E01003962", "E01003965",
  "E01003964", "E01003966", "E01003963",

  # South Bermondsey
  "E01004037", "E01004038", "E01004042", "E01004043", "E01004039",
  "E01004040", "E01004041", "E01004044",

  # Faraday
  "E01003968", "E01003971", "E01003974", "E01003967", "E01003970",
  "E01003972", "E01003973", "E01003969",

  # Camberwell Green
  "E01003923", "E01003918", "E01003925", "E01003919", "E01003920",
  "E01003921", "E01003922", "E01003924", "E01003926"
)

valid_lsoas_lambeth <- c(
  # Bishop's
  "E01003012", "E01003013", "E01003014", "E01003016", "E01003017", "E01003015",

  # Brixton Hill
  "E01003019", "E01003020", "E01003018", "E01003021", "E01003022",
  "E01003023", "E01003024", "E01003025",

  # Clapham Common
  "E01003029", "E01003032", "E01003026", "E01003027", "E01003028",
  "E01003030", "E01003033", "E01003031",

  # Clapham Town
  "E01003034", "E01003035", "E01003036", "E01003037", "E01003038",
  "E01003039", "E01003040", "E01003042", "E01003041",

  # Coldharbour
  "E01003046", "E01003048", "E01003045", "E01003047", "E01003049",
  "E01003050", "E01003052", "E01003043", "E01003044", "E01003051",

  # Ferndale
  "E01003059", "E01003060", "E01003061", "E01003053", "E01003054",
  "E01003056", "E01003058", "E01003055", "E01003057",

  # Herne Hill
  "E01003075", "E01003072", "E01003073", "E01003076", "E01003077",
  "E01003078", "E01003071", "E01003074",

  # Larkhall
  "E01003089", "E01003091", "E01003092", "E01003088", "E01003093",
  "E01003094", "E01003096", "E01003090", "E01003095",

  # Oval
  "E01003101", "E01003102", "E01003103", "E01003104", "E01003098",
  "E01003099", "E01003100", "E01003097",

  # Prince's
  "E01003108", "E01003110", "E01003111", "E01003112", "E01003105",
  "E01003106", "E01003107", "E01003109",

  # Stockwell
  "E01003122", "E01003129", "E01003121", "E01003123", "E01003124",
  "E01003125", "E01003126", "E01003128", "E01003127",

  # Thornton
  "E01003159", "E01003160", "E01003162", "E01003156", "E01003157",
  "E01003158", "E01003161", "E01003163",

  # Tulse Hill
  "E01003176", "E01003171", "E01003173", "E01003177", "E01003178",
  "E01003172", "E01003174", "E01003175", "E01003179",

  # Vassall
  "E01003180", "E01003183", "E01003181", "E01003184", "E01003185",
  "E01003186", "E01003187", "E01003182", "E01003188"
)

# Actual code to put in R for creating the filter
valid_lsoas <- c(
  "E01003927", "E01003929", "E01003934", "E01003935", "E01003928", "E01003930", "E01003931", "E01003932", "E01003933",
  "E01003939", "E01003938", "E01003940", "E01003941", "E01003942", "E01003936", "E01003937", "E01003943", "E01003944",
  "E01003976", "E01003982", "E01003975", "E01003978", "E01003979", "E01003981", "E01003977", "E01003980",
  "E01004025", "E01004026", "E01004027", "E01004022", "E01004023", "E01004028", "E01004024",
  "E01004029", "E01004032", "E01004030", "E01004031", "E01004033", "E01004034", "E01004036", "E01004035",
  "E01004053", "E01004054", "E01004055", "E01004056", "E01004057", "E01004058", "E01004059", "E01004060",
  "E01003994", "E01003992", "E01003995", "E01003996", "E01003998", "E01003999", "E01003991",
  "E01003959", "E01003960", "E01003961", "E01003962", "E01003965", "E01003964", "E01003966", "E01003963",
  "E01004037", "E01004038", "E01004042", "E01004043", "E01004039", "E01004040", "E01004041", "E01004044",
  "E01003968", "E01003971", "E01003974", "E01003967", "E01003970", "E01003972", "E01003973", "E01003969",
  "E01003923", "E01003918", "E01003925", "E01003919", "E01003920", "E01003921", "E01003922", "E01003924", "E01003926",
  "E01003012", "E01003013", "E01003014", "E01003016", "E01003017", "E01003015",
  "E01003019", "E01003020", "E01003018", "E01003021", "E01003022", "E01003023", "E01003024", "E01003025",
  "E01003029", "E01003032", "E01003026", "E01003027", "E01003028", "E01003030", "E01003033", "E01003031",
  "E01003034", "E01003035", "E01003036", "E01003037", "E01003038", "E01003039", "E01003040", "E01003042", "E01003041",
  "E01003046", "E01003048", "E01003045", "E01003047", "E01003049", "E01003050", "E01003052", "E01003043", "E01003044", "E01003051",
  "E01003059", "E01003060", "E01003061", "E01003053", "E01003054", "E01003056", "E01003058", "E01003055", "E01003057",
  "E01003075", "E01003072", "E01003073", "E01003076", "E01003077", "E01003078", "E01003071", "E01003074",
  "E01003089", "E01003091", "E01003092", "E01003088", "E01003093", "E01003094", "E01003096", "E01003090", "E01003095",
  "E01003101", "E01003102", "E01003103", "E01003104", "E01003098", "E01003099", "E01003100", "E01003097",
  "E01003108", "E01003110", "E01003111", "E01003112", "E01003105", "E01003106", "E01003107", "E01003109",
  "E01003122", "E01003129", "E01003121", "E01003123", "E01003124", "E01003125", "E01003126", "E01003128", "E01003127",
  "E01003159", "E01003160", "E01003162", "E01003156", "E01003157", "E01003158", "E01003161", "E01003163",
  "E01003176", "E01003171", "E01003173", "E01003177", "E01003178", "E01003172", "E01003174", "E01003175", "E01003179",
  "E01003180", "E01003183", "E01003181", "E01003184", "E01003185", "E01003186", "E01003187", "E01003182", "E01003188"
)

# Filter dataset excluding <20y and unplausible years like >200 and exclusing if date is within STOP STROKE period *and* not in a valid LSOA 
slsr_clean <- dataset_20250422 %>%
  filter(!is.na(strk_d), !is.na(strk_m), !is.na(strk_y)) %>%
  mutate(
    dtstrk = as.Date(paste(strk_y, strk_m, strk_d, sep = "-"), format = "%Y-%m-%d"),
    year = year(dtstrk)
  ) %>%
  filter(
    !is.na(sex),
    !is.na(age),
    age >= 20 & age <= 200,  
    !(dtstrk >= as.Date("2004-11-15") & dtstrk <= as.Date("2007-12-31") &
      !(lsoa11 %in% valid_lsoas))
  )

#--------------------------------------------------
# All Stroke totals crude and ESP incidence
#--------------------------------------------------

# === Strokes per year ====
# Add stroke year to the cleaned dataset
slsr_clean <- slsr_clean %>%
  mutate(year = lubridate::year(dtstrk))

# Count strokes per year
stroke_yearly <- slsr_clean %>%
  group_by(year) %>%
  summarise(cases = n(), .groups = "drop")

# View the result
print(stroke_yearly)

# Save it
library(writexl)
write_xlsx(stroke_yearly, "stroke_yearly.xlsx")

# === Crude incidence ====
crude_incidence <- stroke_yearly %>%
  left_join(population_totals, by = "year") %>%
  mutate(
    incidence_per_100k = (cases / population) * 100000,
    se = sqrt(cases) / population * 100000,
    lower_ci = pmax(0, incidence_per_100k - 1.96 * se),  # no negative CI
    upper_ci = incidence_per_100k + 1.96 * se
  )
# Save it
write_xlsx(crude_incidence, "allstrokescrudeyearly.xlsx")

# === ESP incidence calculation ===
# Prepare stroke data with age groups
slsr_clean <- slsr_clean %>%
  mutate(
    year = lubridate::year(dtstrk),
    age_group = case_when(
      age >= 18 & age < 20 ~ "18-19",
      age >= 20 & age < 25 ~ "20-24",
      age >= 25 & age < 30 ~ "25-29",
      age >= 30 & age < 35 ~ "30-34",
      age >= 35 & age < 40 ~ "35-39",
      age >= 40 & age < 45 ~ "40-44",
      age >= 45 & age < 50 ~ "45-49",
      age >= 50 & age < 55 ~ "50-54",
      age >= 55 & age < 60 ~ "55-59",
      age >= 60 & age < 65 ~ "60-64",
      age >= 65 & age < 70 ~ "65-69",
      age >= 70 & age < 75 ~ "70-74",
      age >= 75 & age < 80 ~ "75-79",
      age >= 80 & age < 85 ~ "80-84",
      age >= 85 ~ "85+",
      TRUE ~ NA_character_
    )
  )

age_specific_incidence <- slsr_clean %>%
  filter(!is.na(age_group)) %>%
  count(year, age_group, name = "cases")

# Define ESP weights
esp <- tibble::tibble(
  age_group = c(
    "18-19", "20-24", "25-29", "30-34", "35-39",
    "40-44", "45-49", "50-54", "55-59", "60-64",
    "65-69", "70-74", "75-79", "80-84", "85+"
  ),
  std_pop = c(
    5500, 10500, 10000, 9500, 9500,
    9000, 8000, 7000, 6000, 5000,
    4000, 3000, 2000, 1000, 1000
  )
)

esp_total <- sum(esp$std_pop)
# Merge stroke + population + ESP
standardised_data <- age_specific_incidence %>%
  left_join(population_age_year, by = c("year", "age_group")) %>%
  left_join(esp, by = "age_group")

european_std_incidence <- standardised_data %>%
  filter(
    !is.na(cases), !is.na(population), population > 0
  ) %>%
  group_by(year) %>%
  summarise(
    std_rate = sum((cases / population) * std_pop) / esp_total * 100000,
    se = sqrt(sum(((std_pop / esp_total)^2) * (cases / (population^2)))) * 100000,
    .groups = "drop"
  ) %>%
  mutate(
    lower_ci = pmax(0, std_rate - 1.96 * se),  # No negative lower CIs
    upper_ci = std_rate + 1.96 * se
  )

# Save it
write_xlsx(european_std_incidence, "ESPallstrokescrudeyearly.xlsx")

# == Comparison table ==
crude_incidence_clean <- crude_incidence %>%
  rename(
    crude_rate = incidence_per_100k,
    lower_ci_crude = lower_ci,
    upper_ci_crude = upper_ci
  )

european_std_incidence_clean <- european_std_incidence %>%
  rename(
    lower_ci_esp = lower_ci,
    upper_ci_esp = upper_ci
  )

comparison_table <- stroke_yearly %>%
  left_join(crude_incidence_clean, by = "year") %>%
  left_join(european_std_incidence_clean, by = "year") %>%
  mutate(
    `Crude IR (local)` = glue::glue("{round(crude_rate, 2)} (95% CI {round(lower_ci_crude, 2)}–{round(upper_ci_crude, 2)})"),
    `Adjusted IR (Europe)` = glue::glue("{round(std_rate, 2)} (95% CI {round(lower_ci_esp, 2)}–{round(upper_ci_esp, 2)})")
  ) %>%
  select(year, `Crude IR (local)`, `Adjusted IR (Europe)`)

# Save it
write_xlsx(comparison_table, "renderedyearlyincidence.xlsx")

library(dplyr)
library(glue)

# == 5 years crude and ESP == 

# Add Year Groupings 
crude_incidence <- crude_incidence %>%
  mutate(
    group_5yr = case_when(
      year %in% 1995:1999 ~ "1995–1999",
      year %in% 2000:2004 ~ "2000–2004",
      year %in% 2005:2009 ~ "2005–2009",
      year %in% 2010:2014 ~ "2010–2014",
      year %in% 2015:2019 ~ "2015–2019",
      year %in% 2020:2024 ~ "2020–2024"
    ),
    group_10yr = case_when(
      year %in% 1995:2004 ~ "1995–2004",
      year %in% 2005:2014 ~ "2005–2014",
      year %in% 2015:2024 ~ "2015–2024"
    )
  )

european_std_incidence <- european_std_incidence %>%
  mutate(
    group_5yr = case_when(
      year %in% 1995:1999 ~ "1995–1999",
      year %in% 2000:2004 ~ "2000–2004",
      year %in% 2005:2009 ~ "2005–2009",
      year %in% 2010:2014 ~ "2010–2014",
      year %in% 2015:2019 ~ "2015–2019",
      year %in% 2020:2024 ~ "2020–2024"
    ),
    group_10yr = case_when(
      year %in% 1995:2004 ~ "1995–2004",
      year %in% 2005:2014 ~ "2005–2014",
      year %in% 2015:2024 ~ "2015–2024"
    )
  )

#  Crude Aggregated Rates 
crude_5yr <- crude_incidence %>%
  filter(!is.na(group_5yr), !is.na(cases), !is.na(population)) %>%
  group_by(group_5yr) %>%
  summarise(
    cases = sum(cases),
    population = sum(population),
    mean_incidence = (cases / population) * 100000,
    se = sqrt(cases) / population * 100000,
    lower_ci = pmax(0, mean_incidence - 1.96 * se),
    upper_ci = mean_incidence + 1.96 * se,
    .groups = "drop"
  )

#  ESP-Standardised Aggregated Rates 
esp_5yr <- european_std_incidence %>%
  filter(!is.na(group_5yr)) %>%
  group_by(group_5yr) %>%
  summarise(
    mean_std_rate = mean(std_rate),
    se = sqrt(sum(se^2)) / n(),
    lower_ci = pmax(0, mean_std_rate - 1.96 * se),
    upper_ci = mean_std_rate + 1.96 * se,
    .groups = "drop"
  )


#  Rendered Summary Tables 
library(glue)

rendered_5yr <- crude_5yr %>%
  left_join(esp_5yr, by = "group_5yr") %>%
  mutate(
    `Crude IR (local)` = glue("{round(mean_incidence, 2)} (95% CI {round(lower_ci.x, 2)}–{round(upper_ci.x, 2)})"),
    `Adjusted IR (Europe)` = glue("{round(mean_std_rate, 2)} (95% CI {round(lower_ci.y, 2)}–{round(upper_ci.y, 2)})")
  ) %>%
  select(`5-year interval` = group_5yr, `Crude IR (local)`, `Adjusted IR (Europe)`)


# Save
write_xlsx(
    list(
        "5-year Crude" = crude_5yr,
        "5-year ESP" = esp_5yr,
        "5-year Rendered" = rendered_5yr
    ),
    path = "~/Library/Mobile Documents/com~apple~CloudDocs/Documents/R/stroke_summary_5_10yr.xlsx"
)

# -----------------------------------------------
# Plotting the yearly crude + standariswed with the 95% CI
# -----------------------------------------------
crude_incidence <- crude_incidence %>%
  rename(
    lower_ci_crude = lower_ci,
    upper_ci_crude = upper_ci
  )

european_std_incidence <- european_std_incidence %>%
  rename(
    lower_ci_esp = lower_ci,
    upper_ci_esp = upper_ci
  )

library(ggplot2)
library(dplyr)

# Combine and format plot data
plot_data <- bind_rows(
  crude_incidence %>%
    select(year, incidence = incidence_per_100k, lower = lower_ci_crude, upper = upper_ci_crude) %>%
    mutate(label = "Crude incidence"),
  european_std_incidence %>%
    select(year, incidence = std_rate, lower = lower_ci_esp, upper = upper_ci_esp) %>%
    mutate(label = "ESP-standardised incidence")
)

# Filter to exclude 2025
plot_data_filtered <- plot_data %>%
  filter(year <= 2024)

# Plot
ggplot(plot_data_filtered, aes(x = year, y = incidence)) +
  geom_point(aes(color = label), size = 1.8) +
  geom_line(aes(color = label), size = 0.7) +
  geom_errorbar(aes(ymin = lower, ymax = upper, color = label), width = 0.4, size = 0.6) +
  facet_wrap(~ label, ncol = 1, scales = "free_y") +
  scale_x_continuous(breaks = seq(1995, 2024, by = 5)) +
  scale_color_manual(values = c(
    "Crude incidence" = "#1f78b4",
    "ESP-standardised incidence" = "#33a02c"
  )) +
  labs(
    title = "Annual Stroke Incidence per 100,000 (1995–2024)",
    subtitle = "Crude and ESP-standardised estimates with 95% Confidence Intervals",
    x = "Year",
    y = "Incidence Rate",
    color = "Rate Type"
  ) +
  theme_minimal(base_size = 14) +
  theme(
    legend.position = "none",
    strip.text = element_text(face = "bold", size = 13),
    panel.grid.minor = element_blank()
  )

#--------------------------------------------------
# Creating Table 1 and Supplementary Table 1
#--------------------------------------------------

# Identify stroke_type in ischaemic, PICH and SAH
slsr_clean <- slsr_clean %>%
  mutate(
    stroke_type = case_when(
      subtype %in% 1:5 ~ "Ischaemic",
      subtype == 6 ~ "PICH",
      subtype == 7 ~ "SAH",
      
      # Fallback using strksub if subtype is NA or unclear
      is.na(subtype) & strksub == 1 ~ "Ischaemic",
      is.na(subtype) & strksub == 2 ~ "PICH",
      is.na(subtype) & strksub == 3 ~ "SAH",
      
      # If still not clear, label as unknown
      TRUE ~ "Unknown"
    )
  )

# == Crude incidence yearly ==
# Count cases per year and stroke type
slsr_clean <- slsr_clean %>%
  mutate(
    stroke_type = case_when(
      # Primary: OCSP classification
      subtype %in% 1:5 ~ "Ischaemic",
      subtype == 6 ~ "PICH",
      subtype == 7 ~ "SAH",

      # Fallback 1: stroke subtype
      is.na(subtype) & strksub == 1 ~ "Ischaemic",
      is.na(subtype) & strksub == 2 ~ "PICH",
      is.na(subtype) & strksub == 3 ~ "SAH",

      # Fallback 2: infarct/haemorrhage
      is.na(subtype) & is.na(strksub) & stroke == 1 ~ "Ischaemic",

      # Still unknown
      TRUE ~ "Unknown"
    )
  )

# Join with total population (same for all types)
crude_incidence_subtype <- stroke_yearly_subtype %>%
  left_join(population_totals, by = "year") %>%
  mutate(
    crude_rate = (cases / population) * 100000,
    se = sqrt(cases) / population * 100000,
    lower_ci = pmax(0, crude_rate - 1.96 * se),
    upper_ci = crude_rate + 1.96 * se
  )

# == ESP incidence yearly == 

# Count cases by year, age group, and stroke type
age_specific_incidence_subtype <- slsr_clean %>%
  filter(!is.na(age_group), !is.na(stroke_type)) %>%
  count(year, age_group, stroke_type, name = "cases")

# Merge with age-specific population and ESP
standardised_data_subtype <- age_specific_incidence_subtype %>%
  left_join(population_age_year, by = c("year", "age_group")) %>%
  left_join(esp, by = "age_group")

# Calculate ESP-standardised incidence per stroke type
european_std_subtype <- standardised_data_subtype %>%
  filter(!is.na(cases), !is.na(population), population > 0) %>%
  group_by(year, stroke_type) %>%
  summarise(
    std_rate = sum((cases / population) * std_pop) / esp_total * 100000,
    se = sqrt(sum(((std_pop / esp_total)^2) * (cases / (population^2)))) * 100000,
    .groups = "drop"
  ) %>%
  mutate(
    lower_ci = pmax(0, std_rate - 1.96 * se),
    upper_ci = std_rate + 1.96 * se
  )

# Save
write_xlsx(
    list(
        "Annual Subtype" = crude_incidence_subtype,
        "ESP subtype" = european_std_subtype
    ),
    path = "~/Library/Mobile Documents/com~apple~CloudDocs/Documents/R/annualsubtype.xlsx"
)

# Rendering
# Clean names for joining
crude_subtypes_annual_clean <- crude_incidence_subtype %>%
  rename(
    lower_ci_crude = lower_ci,
    upper_ci_crude = upper_ci
  )

esp_subtypes_annual_clean <- european_std_subtype %>%
  rename(
    lower_ci_esp = lower_ci,
    upper_ci_esp = upper_ci
  )

# Join and render final comparison table
rendered_subtype_annual <- crude_subtypes_annual_clean %>%
  left_join(esp_subtypes_annual_clean, by = c("year", "stroke_type")) %>%
  mutate(
    `Crude IR (95% CI)` = glue::glue("{round(crude_rate, 2)} (95% CI {round(lower_ci_crude, 2)}–{round(upper_ci_crude, 2)})"),
    `ESP IR (95% CI)` = glue::glue("{round(std_rate, 2)} (95% CI {round(lower_ci_esp, 2)}–{round(upper_ci_esp, 2)})")
  ) %>%
  select(year, stroke_type, `Crude IR (95% CI)`, `ESP IR (95% CI)`)

# = Rendering Supplementary Table 1 == 
# First, label the overall rates with stroke_type = "All strokes"
all_strokes_annual <- crude_incidence_clean %>%
  left_join(european_std_incidence_clean, by = "year") %>%
  mutate(
    stroke_type = "All strokes",
    `Crude IR (95% CI)` = glue::glue("{round(crude_rate, 2)} (95% CI {round(lower_ci_crude, 2)}–{round(upper_ci_crude, 2)})"),
    `ESP IR (95% CI)` = glue::glue("{round(std_rate, 2)} (95% CI {round(lower_ci_esp, 2)}–{round(upper_ci_esp, 2)})")
  ) %>%
  select(year, stroke_type, `Crude IR (95% CI)`, `ESP IR (95% CI)`)

# Now, combine with the rendered subtype-specific table
rendered_subtype_annual_final <- bind_rows(
  all_strokes_annual,
  rendered_subtype_annual
) %>%
  filter(stroke_type != "Unknown") %>%
  arrange(year, stroke_type)  # Optional: clean sorting

library(gt)

rendered_subtype_annual_final %>%
  gt() %>%
  tab_header(
    title = "Annual Crude and ESP-Standardised Incidence by Stroke Type",
    subtitle = "Rates per 100,000 with 95% Confidence Intervals"
  ) %>%
  cols_label(
    year = "Year",
    stroke_type = "Stroke Type",
    `Crude IR (95% CI)` = "Crude IR (95% CI)",
    `ESP IR (95% CI)` = "ESP IR (95% CI)"
  ) %>%
  tab_options(
    table.font.size = 13,
    heading.align = "left"
  )

# == Table 1 ==
# Add 5-year groupings to the cleaned dataset
slsr_clean <- slsr_clean %>%
  mutate(
    group_5yr = case_when(
      year %in% 1995:1999 ~ "1995–1999",
      year %in% 2000:2004 ~ "2000–2004",
      year %in% 2005:2009 ~ "2005–2009",
      year %in% 2010:2014 ~ "2010–2014",
      year %in% 2015:2019 ~ "2015–2019",
      year %in% 2020:2024 ~ "2020–2024"
    )
  )
# Count cases by group_5yr and stroke_type
crude_subtypes_5yr <- slsr_clean %>%
  filter(!is.na(group_5yr), stroke_type != "Unknown") %>%
  group_by(group_5yr, stroke_type) %>%
  summarise(
    cases = n(),
    .groups = "drop"
  ) %>%
  left_join(
    population_totals %>%
      mutate(group_5yr = case_when(
        year %in% 1995:1999 ~ "1995–1999",
        year %in% 2000:2004 ~ "2000–2004",
        year %in% 2005:2009 ~ "2005–2009",
        year %in% 2010:2014 ~ "2010–2014",
        year %in% 2015:2019 ~ "2015–2019",
        year %in% 2020:2024 ~ "2020–2024"
      )) %>%
      group_by(group_5yr) %>%
      summarise(population = sum(population), .groups = "drop"),
    by = "group_5yr"
  ) %>%
  mutate(
    crude_rate = (cases / population) * 100000,
    se = sqrt(cases) / population * 100000,
    lower_ci = pmax(0, crude_rate - 1.96 * se),
    upper_ci = crude_rate + 1.96 * se
  )

# Add group_5yr to the age-specific ESP-standardised data
european_std_subtype_5yr <- european_std_subtype %>%
  mutate(
    group_5yr = case_when(
      year %in% 1995:1999 ~ "1995–1999",
      year %in% 2000:2004 ~ "2000–2004",
      year %in% 2005:2009 ~ "2005–2009",
      year %in% 2010:2014 ~ "2010–2014",
      year %in% 2015:2019 ~ "2015–2019",
      year %in% 2020:2024 ~ "2020–2024"
    )
  ) %>%
  filter(!is.na(group_5yr), stroke_type != "Unknown") %>%
  group_by(group_5yr, stroke_type) %>%
  summarise(
    mean_std_rate = mean(std_rate),
    se = sqrt(sum(se^2)) / n(),
    lower_ci = pmax(0, mean_std_rate - 1.96 * se),
    upper_ci = mean_std_rate + 1.96 * se,
    .groups = "drop"
  )

# Add group_5yr to the age-specific ESP-standardised data
european_std_subtype_5yr <- european_std_subtype %>%
  mutate(
    group_5yr = case_when(
      year %in% 1995:1999 ~ "1995–1999",
      year %in% 2000:2004 ~ "2000–2004",
      year %in% 2005:2009 ~ "2005–2009",
      year %in% 2010:2014 ~ "2010–2014",
      year %in% 2015:2019 ~ "2015–2019",
      year %in% 2020:2024 ~ "2020–2024"
    )
  ) %>%
  filter(!is.na(group_5yr), stroke_type != "Unknown") %>%
  group_by(group_5yr, stroke_type) %>%
  summarise(
    mean_std_rate = mean(std_rate),
    se = sqrt(sum(se^2)) / n(),
    lower_ci = pmax(0, mean_std_rate - 1.96 * se),
    upper_ci = mean_std_rate + 1.96 * se,
    .groups = "drop"
  )

library(glue)

rendered_subtype_5yr <- crude_subtypes_5yr %>%
  left_join(european_std_subtype_5yr, by = c("group_5yr", "stroke_type")) %>%
  mutate(
    `Crude IR (95% CI)` = glue("{round(crude_rate, 2)} (95% CI {round(lower_ci.x, 2)}–{round(upper_ci.x, 2)})"),
    `ESP IR (95% CI)` = glue("{round(mean_std_rate, 2)} (95% CI {round(lower_ci.y, 2)}–{round(upper_ci.y, 2)})")
  ) %>%
  select(`5-year period` = group_5yr, stroke_type, `Crude IR (95% CI)`, `ESP IR (95% CI)`)

# Save
write_xlsx(rendered_subtype_5yr, "Table1_5yr_Subtype_Incidence.xlsx")
write_xlsx(crude_subtypes_5yr, "crude_subtypes_5yr.xlsx") 
write_xlsx(european_std_subtype_5yr, "european_std_subtype_5yr.xlsx")

# == Rendering table 1 ==

# Prepare all-stroke 5-year table to match structure
rendered_all_5yr <- rendered_5yr %>%
  mutate(
    stroke_type = "All strokes",
    `Crude IR (95% CI)` = `Crude IR (local)`,
    `ESP IR (95% CI)` = `Adjusted IR (Europe)`
  ) %>%
  select(`5-year period` = `5-year interval`, stroke_type, `Crude IR (95% CI)`, `ESP IR (95% CI)`)
rendered_combined_5yr <- bind_rows(
  rendered_all_5yr,
  rendered_subtype_5yr
) %>%
  arrange(`5-year period`, stroke_type)

rendered_combined_5yr %>%
  gt() %>%
  tab_header(
    title = "5-Year Incidence Rates by Stroke Type",
    subtitle = "Crude and ESP-Standardised per 100,000 (95% CI)"
  ) %>%
  cols_label(
    `5-year period` = "5-Year Interval",
    stroke_type = "Stroke Type"
  )

#--------------------------------------------------
# Supplementary Figure 1
#--------------------------------------------------

# == Ischaemic 
library(dplyr)

# Filter and prepare crude
crude_ischaemic <- crude_subtypes_annual_clean %>%
  filter(stroke_type == "Ischaemic") %>%
  select(year, incidence = crude_rate, lower = lower_ci_crude, upper = upper_ci_crude) %>%
  mutate(label = "Crude incidence")

# Filter and prepare ESP
esp_ischaemic <- esp_subtypes_annual_clean %>%
  filter(stroke_type == "Ischaemic") %>%
  select(year, incidence = std_rate, lower = lower_ci_esp, upper = upper_ci_esp) %>%
  mutate(label = "ESP-standardised incidence")

# Combine
plot_data_ischaemic <- bind_rows(crude_ischaemic, esp_ischaemic) %>%
  filter(year <= 2024)
library(ggplot2)

ggplot(plot_data_ischaemic, aes(x = year, y = incidence)) +
  geom_point(aes(color = label), size = 1.8) +
  geom_line(aes(color = label), size = 0.7) +
  geom_errorbar(aes(ymin = lower, ymax = upper, color = label), width = 0.4, size = 0.6) +
  facet_wrap(~ label, ncol = 1, scales = "free_y") +
  scale_x_continuous(breaks = seq(1995, 2024, by = 5)) +
  scale_color_manual(values = c(
    "Crude incidence" = "#1f78b4",
    "ESP-standardised incidence" = "#33a02c"
  )) +
  labs(
    title = "Annual Ischaemic Stroke Incidence per 100,000 (1995–2024)",
    subtitle = "Crude and ESP-standardised estimates with 95% Confidence Intervals",
    x = "Year",
    y = "Incidence Rate",
    color = "Rate Type"
  ) +
  theme_minimal(base_size = 14) +
  theme(
    legend.position = "none",
    strip.text = element_text(face = "bold", size = 13),
    panel.grid.minor = element_blank()
  )

# == PICH ==
# Filter and prepare crude for PICH
crude_pich <- crude_subtypes_annual_clean %>%
  filter(stroke_type == "PICH") %>%
  select(year, incidence = crude_rate, lower = lower_ci_crude, upper = upper_ci_crude) %>%
  mutate(label = "Crude incidence")

# Filter and prepare ESP for PICH
esp_pich <- esp_subtypes_annual_clean %>%
  filter(stroke_type == "PICH") %>%
  select(year, incidence = std_rate, lower = lower_ci_esp, upper = upper_ci_esp) %>%
  mutate(label = "ESP-standardised incidence")

# Combine
plot_data_pich <- bind_rows(crude_pich, esp_pich) %>%
  filter(year <= 2024)
ggplot(plot_data_pich, aes(x = year, y = incidence)) +
  geom_point(aes(color = label), size = 1.8) +
  geom_line(aes(color = label), size = 0.7) +
  geom_errorbar(aes(ymin = lower, ymax = upper, color = label), width = 0.4, size = 0.6) +
  facet_wrap(~ label, ncol = 1, scales = "free_y") +
  scale_x_continuous(breaks = seq(1995, 2024, by = 5)) +
  scale_color_manual(values = c(
    "Crude incidence" = "#1f78b4",
    "ESP-standardised incidence" = "#33a02c"
  )) +
  labs(
    title = "Annual PICH Stroke Incidence per 100,000 (1995–2024)",
    subtitle = "Crude and ESP-standardised estimates with 95% Confidence Intervals",
    x = "Year",
    y = "Incidence Rate",
    color = "Rate Type"
  ) +
  theme_minimal(base_size = 14) +
  theme(
    legend.position = "none",
    strip.text = element_text(face = "bold", size = 13),
    panel.grid.minor = element_blank()
  )

# == SAH ==
# Filter and prepare crude for SAH
crude_sah <- crude_subtypes_annual_clean %>%
  filter(stroke_type == "SAH") %>%
  select(year, incidence = crude_rate, lower = lower_ci_crude, upper = upper_ci_crude) %>%
  mutate(label = "Crude incidence")

# Filter and prepare ESP for SAH
esp_sah <- esp_subtypes_annual_clean %>%
  filter(stroke_type == "SAH") %>%
  select(year, incidence = std_rate, lower = lower_ci_esp, upper = upper_ci_esp) %>%
  mutate(label = "ESP-standardised incidence")

# Combine
plot_data_sah <- bind_rows(crude_sah, esp_sah) %>%
  filter(year <= 2024)

ggplot(plot_data_sah, aes(x = year, y = incidence)) +
  geom_point(aes(color = label), size = 1.8) +
  geom_line(aes(color = label), size = 0.7) +
  geom_errorbar(aes(ymin = lower, ymax = upper, color = label), width = 0.4, size = 0.6) +
  facet_wrap(~ label, ncol = 1, scales = "free_y") +
  scale_x_continuous(breaks = seq(1995, 2024, by = 5)) +
  scale_color_manual(values = c(
    "Crude incidence" = "#1f78b4",
    "ESP-standardised incidence" = "#33a02c"
  )) +
  labs(
    title = "Annual SAH Stroke Incidence per 100,000 (1995–2024)",
    subtitle = "Crude and ESP-standardised estimates with 95% Confidence Intervals",
    x = "Year",
    y = "Incidence Rate",
    color = "Rate Type"
  ) +
  theme_minimal(base_size = 14) +
  theme(
    legend.position = "none",
    strip.text = element_text(face = "bold", size = 13),
    panel.grid.minor = element_blank()
  )


#--------------------------------------------------
# Poisson Table 2
#--------------------------------------------------
library(dplyr)
library(broom)

# Relevel to make 1995–1999 the reference
model_data <- crude_5yr %>%
  filter(!is.na(group_5yr)) %>%
  mutate(group_5yr = factor(group_5yr, levels = c(
    "1995–1999", "2000–2004", "2005–2009", "2010–2014", "2015–2019", "2020–2024"
  )))

model_baseline <- glm(
  cases ~ group_5yr,
  offset = log(population),
  data = model_data,
  family = poisson()
)

results_baseline <- tidy(model_baseline, exponentiate = TRUE, conf.int = TRUE)

# Create a new factor where each level is compared to the previous
model_data <- model_data %>%
  arrange(group_5yr) %>%
  mutate(group_5yr_lag = lag(group_5yr)) %>%
  filter(!is.na(group_5yr_lag))

# Function to loop over group comparisons
get_lagged_irr <- function(current_group, previous_group) {
  data_subset <- model_data %>%
    filter(group_5yr %in% c(previous_group, current_group))

  # Only proceed if both levels are present
  if (length(unique(data_subset$group_5yr)) < 2) {
    return(NULL)
  }

  data_subset <- data_subset %>%
    mutate(
      group = factor(group_5yr, levels = c(previous_group, current_group)),
      group = relevel(group, ref = previous_group)
    )

  model <- glm(
    cases ~ group,
    offset = log(population),
    data = data_subset,
    family = poisson()
  )

  tidy(model, exponentiate = TRUE, conf.int = TRUE) %>%
    filter(term != "(Intercept)") %>%
    mutate(period = current_group)
}

period_pairs <- tibble(
  current = periods[-1],
  previous = periods[-length(periods)]
)

irr_previous <- map2_dfr(
  .x = period_pairs$current,
  .y = period_pairs$previous,
  .f = get_lagged_irr
)

# From earlier: results_baseline
library(glue)
irr_baseline_clean <- results_baseline %>%
  filter(term != "(Intercept)") %>%
  mutate(
    period = gsub("group_5yr", "", term),
    `IRR vs. 1995–1999` = round(estimate, 2),
    `95% CI (vs. 1995–1999)` = glue("{round(conf.low, 2)}–{round(conf.high, 2)}"),
    `p (vs. 1995–1999)` = ifelse(p.value < 0.001, "<0.001", formatC(p.value, format = "f", digits = 3))
  ) %>%
  select(period, `IRR vs. 1995–1999`, `95% CI (vs. 1995–1999)`, `p (vs. 1995–1999)`)


# Clean your previous-period IRRs
irr_previous_clean <- irr_previous %>%
  mutate(
    period = as.character(period),
    `IRR vs. Previous` = round(estimate, 2),
    `95% CI (vs. Previous)` = glue("{round(conf.low, 2)}–{round(conf.high, 2)}"),
    `p (vs. Previous)` = ifelse(p.value < 0.001, "<0.001", formatC(p.value, format = "f", digits = 3))
  ) %>%
  select(period, `IRR vs. Previous`, `95% CI (vs. Previous)`, `p (vs. Previous)`)


# Merge
table2_full <- full_join(irr_baseline_clean, irr_previous_clean, by = "period") %>%
  arrange(period)

# Render it nicely
library(gt)

table2_full %>%
  gt() %>%
  tab_header(
    title = "Table 2. Poisson Regression Results",
    subtitle = "IRRs by 5-Year Period (with 95% CIs and p-values for Both Comparisons)"
  ) %>%
  cols_label(
    period = "Period",
    `IRR vs. 1995–1999` = "IRR vs. 1995–1999",
    `95% CI (vs. 1995–1999)` = "95% CI (vs. 1995–1999)",
    `p (vs. 1995–1999)` = "p (vs. 1995–1999)",
    `IRR vs. Previous` = "IRR vs. Previous Period",
    `95% CI (vs. Previous)` = "95% CI (vs. Previous)",
    `p (vs. Previous)` = "p (vs. Previous)"
  ) %>%
  tab_options(table.font.size = 13)

# == Suplemmentary Table 2, stroke subtypes ==
subtype_data_5yr <- slsr_clean %>%
  filter(!is.na(group_5yr), stroke_type != "Unknown") %>%
  group_by(group_5yr, stroke_type) %>%
  summarise(cases = n(), .groups = "drop") %>%
  left_join(
    population_totals %>%
      mutate(group_5yr = case_when(
        year %in% 1995:1999 ~ "1995–1999",
        year %in% 2000:2004 ~ "2000–2004",
        year %in% 2005:2009 ~ "2005–2009",
        year %in% 2010:2014 ~ "2010–2014",
        year %in% 2015:2019 ~ "2015–2019",
        year %in% 2020:2024 ~ "2020–2024"
      )) %>%
      group_by(group_5yr) %>%
      summarise(population = sum(population), .groups = "drop"),
    by = "group_5yr"
  )

library(broom)
library(glue)

get_poisson_table <- function(data, type) {
  df <- data %>%
    filter(stroke_type == type) %>%
    mutate(group_5yr = factor(group_5yr, levels = c(
      "1995–1999", "2000–2004", "2005–2009", "2010–2014", "2015–2019", "2020–2024"
    )))

  # Model vs. 1995–1999
  model_baseline <- glm(cases ~ group_5yr, offset = log(population), data = df, family = poisson())

  irr_baseline <- tidy(model_baseline, exponentiate = TRUE, conf.int = TRUE) %>%
    filter(term != "(Intercept)") %>%
    mutate(
      period = gsub("group_5yr", "", term),
      `IRR vs. 1995–1999` = round(estimate, 2),
      `95% CI (vs. 1995–1999)` = glue("{round(conf.low, 2)}–{round(conf.high, 2)}"),
      `p (vs. 1995–1999)` = ifelse(p.value < 0.001, "<0.001", formatC(p.value, format = "f", digits = 3))
    ) %>%
    select(period, `IRR vs. 1995–1999`, `95% CI (vs. 1995–1999)`, `p (vs. 1995–1999)`)

  # Model vs. previous
  periods <- levels(df$group_5yr)
  period_pairs <- tibble::tibble(
    current = periods[-1],
    previous = periods[-length(periods)]
  )

  get_lagged <- function(current_group, previous_group) {
    subset <- df %>%
      filter(group_5yr %in% c(previous_group, current_group))
    if (n_distinct(subset$group_5yr) < 2) return(NULL)

    subset <- subset %>%
      mutate(group = factor(group_5yr, levels = c(previous_group, current_group)))

    model <- glm(cases ~ group, offset = log(population), data = subset, family = poisson())

    tidy(model, exponentiate = TRUE, conf.int = TRUE) %>%
      filter(term != "(Intercept)") %>%
      mutate(period = current_group)
  }

  irr_previous <- purrr::map2_dfr(
    period_pairs$current, period_pairs$previous, get_lagged
  ) %>%
    mutate(
      `IRR vs. Previous` = round(estimate, 2),
      `95% CI (vs. Previous)` = glue("{round(conf.low, 2)}–{round(conf.high, 2)}"),
      `p (vs. Previous)` = ifelse(p.value < 0.001, "<0.001", formatC(p.value, format = "f", digits = 3))
    ) %>%
    select(period, `IRR vs. Previous`, `95% CI (vs. Previous)`, `p (vs. Previous)`)

  full_join(irr_baseline, irr_previous, by = "period") %>%
    mutate(stroke_type = type) %>%
    select(stroke_type, everything())
}
table_s2 <- purrr::map_dfr(
  c("Ischaemic", "PICH", "SAH"),
  ~get_poisson_table(subtype_data_5yr, .x)
)

# Render
library(gt)

table_s2 %>%
  gt(groupname_col = "stroke_type") %>%
  tab_header(
    title = "Supplementary Table S2. Poisson Regression by Stroke Subtype",
    subtitle = "IRRs vs. Baseline and Previous Periods, with 95% CIs and p-values"
  )


#--------------------------------------------------
# ETHNIC INEQUALITIES ANALYSIS
#--------------------------------------------------

slsr_clean_second <- dataset_20250422 %>%
  filter(!is.na(strk_d), !is.na(strk_m), !is.na(strk_y)) %>%
  mutate(
    dtstrk = as.Date(paste(strk_y, strk_m, strk_d, sep = "-"), format = "%Y-%m-%d"),
    year = year(dtstrk)
  ) %>%
  filter(
    !is.na(sex),
    !is.na(age),
    age >= 20 & age <= 200,  
    !(dtstrk >= as.Date("2004-11-15") & dtstrk <= as.Date("2007-12-31") &
      !(lsoa11 %in% valid_lsoas))
  )


# Extract ethnicity from your cleaned dataset
slsr_clean_second <- slsr_clean_second %>%
  mutate(
    ethnicity = case_when(
      eth6cat == 1 ~ "White",
      eth6cat == 2 ~ "Black Caribbean",
      eth6cat == 3 ~ "Black African",
      eth6cat == 4 ~ "Black Other",
      eth6cat == 5 ~ "Other",
      TRUE ~ NA_character_
    )
  ) %>%
  filter(!is.na(ethnicity))

# Load and clean population by ethnicity
population_ethnicity <- read.csv(
  "/Users/mariacamilapantojaruiz/Library/Mobile Documents/com~apple~CloudDocs/Documents/PhD/Incidence 30 years/Census check/Checked/Interpolation/population_by_ethnicity.csv"
) %>%
  rename(
    year = Year,
    ethnicity = Ethnicity,
    population = Total
  ) %>%
  mutate(
    year = as.integer(year),
    ethnicity = trimws(ethnicity),
    population = as.numeric(population)
  ) %>%
  filter(year >= 1995, year <= 2024)


# Count strokes by year and ethnicity
stroke_yearly_ethnicity_fixed <- slsr_clean_second %>%
  group_by(year, ethnicity) %>%
  summarise(cases = n(), .groups = "drop")

stroke_yearly_ethnicity_fixed <- stroke_yearly_ethnicity_fixed %>%
  mutate(
    cases = case_when(
      year == 1995 & ethnicity == "Other" ~ 21,
      year == 1995 & ethnicity == "White" ~ cases + (114 - 21),  # move 93 cases to White
      TRUE ~ cases
    )
  )

# Calculate crude incidence
crude_incidence_ethnicity_yearly <- stroke_yearly_ethnicity_fixed %>%
  left_join(population_ethnicity, by = c("year", "ethnicity")) %>%
  mutate(
    incidence_per_100k = (cases / population) * 100000,
    se = sqrt(cases) / population * 100000,
    lower_ci = pmax(0, incidence_per_100k - 1.96 * se),
    upper_ci = incidence_per_100k + 1.96 * se
  )

# Save
write_xlsx(crude_incidence_ethnicity_yearly, "Crude_ethnicity_yearly.xlsx")

# ESP
library(readr)
library(dplyr)
library(readr)
library(dplyr)

# Load population
population_age_ethnicity <- read_csv(
  "/Users/mariacamilapantojaruiz/Library/Mobile Documents/com~apple~CloudDocs/Documents/PhD/Incidence 30 years/Census check/Checked/Interpolation/population_by_age_ethnicity_sex.csv"
) %>%
  group_by(year = Year, ethnicity = Ethnicity, age_group = `Age Range`) %>%
  summarise(population = sum(Total, na.rm = TRUE), .groups = "drop") %>%
  filter(year >= 1995, year <= 2024)

# Stroke counts by year, ethnicity, and age
stroke_ethnicity_age <- slsr_clean_second %>%
  filter(age >= 20) %>%
  mutate(
    age_group = case_when(
      age >= 20 & age < 25 ~ "20-24",
      age >= 25 & age < 30 ~ "25-29",
      age >= 30 & age < 35 ~ "30-34",
      age >= 35 & age < 40 ~ "35-39",
      age >= 40 & age < 45 ~ "40-44",
      age >= 45 & age < 50 ~ "45-49",
      age >= 50 & age < 55 ~ "50-54",
      age >= 55 & age < 60 ~ "55-59",
      age >= 60 & age < 65 ~ "60-64",
      age >= 65 & age < 70 ~ "65-69",
      age >= 70 & age < 75 ~ "70-74",
      age >= 75 & age < 80 ~ "75-79",
      age >= 80 & age < 85 ~ "80-84",
      age >= 85 ~ "85+"
    )
  ) %>%
  filter(!is.na(age_group)) %>%
  count(year, ethnicity, age_group, name = "cases")


# Load ESP weights
library(tibble)
esp <- tibble::tibble(
  age_group = c(
    "20-24", "25-29", "30-34", "35-39", "40-44", "45-49",
    "50-54", "55-59", "60-64", "65-69", "70-74", "75-79",
    "80-84", "85+"
  ),
  std_pop = c(
    6000, 6000, 6500, 7000, 7000, 7000,
    7000, 6500, 6000, 5500, 5000, 4000,
    2500, 1500 + 1000  # 85–89 + 90+
  )
)


# Standardise
esp_ethnicity <- stroke_ethnicity_age %>%
  left_join(population_age_ethnicity, by = c("year", "age_group", "ethnicity")) %>%
  left_join(esp, by = "age_group") %>%
  filter(!is.na(cases), !is.na(population), !is.na(std_pop), population > 0) %>%
  group_by(year, ethnicity) %>%
 summarise(
  numerator = sum((cases / population) * std_pop),
  denominator = sum(std_pop),
  std_rate = numerator / denominator * 100000,
  se = sqrt(sum((std_pop^2) * (cases / (population^2)))) / denominator * 100000,
  lower_ci = pmax(0, std_rate - 1.96 * se),
  upper_ci = std_rate + 1.96 * se,
  .groups = "drop"
)

# Save
write_xlsx(esp_ethnicity, "ESP_allstrokes_ethn.xlsx")

# == Creating Table 3 ==

# Sex all strokes counts 

library(dplyr)
library(lubridate)

# Define age groups and count cases by year, sex, and age group
library(dplyr)
library(lubridate)

stroke_counts_sex_ethnicity <- slsr_clean_second %>%
  filter(age >= 20) %>%
  mutate(
    sex = factor(sex, levels = c(1, 2), labels = c("Male", "Female")),
    age_group = case_when(
      age >= 20 & age < 25 ~ "20-24",
      age >= 25 & age < 30 ~ "25-29",
      age >= 30 & age < 35 ~ "30-34",
      age >= 35 & age < 40 ~ "35-39",
      age >= 40 & age < 45 ~ "40-44",
      age >= 45 & age < 50 ~ "45-49",
      age >= 50 & age < 55 ~ "50-54",
      age >= 55 & age < 60 ~ "55-59",
      age >= 60 & age < 65 ~ "60-64",
      age >= 65 & age < 70 ~ "65-69",
      age >= 70 & age < 75 ~ "70-74",
      age >= 75 & age < 80 ~ "75-79",
      age >= 80 & age < 85 ~ "80-84",
      age >= 85 ~ "85+"
    )
  ) %>%
  count(year, sex, ethnicity, age_group, name = "cases")

# Aggregate population by year, sex, and ethnicity
population_sex_ethnicity <- population_by_ethnicity_sex %>%
  rename(
    year = Year,
    ethnicity = Ethnicity,
    sex = Sex,
    population = Total
  ) %>%
  mutate(
    ethnicity = trimws(ethnicity),
    sex = str_to_title(trimws(sex))  # Should result in "Male" / "Female"
  ) %>%
  filter(year >= 1995, year <= 2024)


# Aggregate stroke cases by year, sex, ethnicity
crude_cases <- stroke_counts_sex_ethnicity %>%
  group_by(year, sex, ethnicity) %>%
  summarise(cases = sum(cases), .groups = "drop")

# Calculate crude incidence
crude_incidence_sex_ethnicity <- crude_cases %>%
  left_join(population_sex_ethnicity, by = c("year", "sex", "ethnicity")) %>%
  mutate(
    crude_rate = (cases / population) * 100000,
    se = sqrt(cases) / population * 100000,
    lower_ci = pmax(0, crude_rate - 1.96 * se),
    upper_ci = crude_rate + 1.96 * se
  )

** WHITE IN 1995 HASNT BEEN FIXED HERE**


