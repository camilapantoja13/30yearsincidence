# Loading the dataset and everything
install.packages("readxl")
library(readxl)
dataset_20250422 <- read_excel("/Users/mariacamilapantojaruiz/Library/Mobile Documents/com~apple~CloudDocs/Documents/PhD/Incidence 30 years/20250422 dataset.xlsx")
library(dplyr)      # For %>%
library(gt)         # For rendering the tables
library(readxl)
library(dplyr)
library(tidyr)
library(tidyverse)
install.packages("writexl")  
library(writexl)

# View first few rows
head(dataset_20250422)

# Then, set working directory for outputs
setwd("/Users/mariacamilapantojaruiz/Library/Mobile Documents/com~apple~CloudDocs/Documents/R")

#  Load Population Totals 
population_totals <- read_excel(
  "/Users/mariacamilapantojaruiz/Library/Mobile Documents/com~apple~CloudDocs/Documents/PhD/Incidence 30 years/Totals/Totals/Modified_Population_Summary_Interpolated_and_Projected_1991_2025_FINAL.xlsx",
  sheet = "overall_total"
) %>%
  filter(Age == "Total") %>%
  pivot_longer(cols = -Age, names_to = "year", values_to = "population") %>%
  filter(year != "Total") %>%
  mutate(
    year = as.integer(year),
    population = as.numeric(population)
  ) %>%
  select(year, population)

  # Ward codes (Just for me to read)
southwark95 <- c(
  "Cathedral", "Chaucer", "Bricklayers", "Riverside", 
  "Rotherhithe", Dockyard", "Browning", "Burgees", 
  "Newington", "Faraday", 
  "St Giles", Brunswick", 
)
southwark01 <- c(
  "Cathedrals", "Chaucer", "Grange", "Riverside", "Rotherhithe",
  "Surrey Docks", "Newington", "East Walworth", "South Bermondsey",
  "Faraday", "Camberwell Green"
)
southwark11 <- c(
  "Cathedrals", "Chaucer", "Grange", "Riverside", "Rotherhithe",
  "Surrey Docks", "Newington", "East Walworth", "South Bermondsey",
  "Faraday", "Camberwell Green"
)
southwark21 <- c(
  "Borough & Bankside", "Camberwell Green", "Chaucer", "Faraday",
  "London Bridge & West Bermondsey", "Newington (Southwark)", "North Bermondsey",
  "North Walworth", "Old Kent Road", "Rotherhithe",
  "South Bermondsey", "St George's (Southwark)", "Surrey Docks"
)
lambeth95 <- c("Bishop's", "Town Hall", "Streatham Hill", "Clapham Park", "Clapham Town", "Angell", "Herne Hill", "Ferndale",
               "Larkhall", "Oval", "Prince's", "Stockwell", "Thornton", "Tulse Hill", "Vassall")
lambeth01 <- c(
  "Bishop`s", "Brixton Hill", "Clapham Common", "Clapham Town", "Coldharbour", "Ferndale",
  "Herne Hill", "Larkhall", "Oval", "Prince`s", "Stockwell", "Thornton", "Tulse Hill", "Vassall"
)
lambeth11 <- c(
  "Bishop's", "Brixton Hill", "Clapham Common", "Clapham Town", "Coldharbour", "Ferndale",
  "Herne Hill", "Larkhall", "Oval", "Prince's", "Stockwell", "Thornton", "Tulse Hill", "Vassall"
)
lambeth21 <- c(
  "Waterloo & South Bank", "Vauxhall (Lambeth)", "Kennington (Lambeth)", "Oval",
  "Stockwell West & Larkhall", "Stockwell East", "Myatt's Fields", "Clapham Town",
  "Clapham East", "Clapham Common & Abbeville", "Brixton Acre Lane", "Brixton North",
  "Brixton Rush Common", "Clapham Park", "Brixton Windrush",
  "Herne Hill & Loughborough Junction", "St Martin's (Lambeth)"
)

# Valid LSOAs  (Just for me to read)
valid_lsoas_southwark <- c(
  # Cathedrals
  "E01003927", "E01003929", "E01003934", "E01003935", "E01003928",
  "E01003930", "E01003931", "E01003932", "E01003933",

  # Chaucer
  "E01003939", "E01003938", "E01003940", "E01003941", "E01003942",
  "E01003936", "E01003937", "E01003943", "E01003944",

  # Grange
  "E01003976", "E01003982", "E01003975", "E01003978", "E01003979",
  "E01003981", "E01003977", "E01003980",

  # Riverside
  "E01004025", "E01004026", "E01004027", "E01004022", "E01004023",
  "E01004028", "E01004024",

  # Rotherhithe
  "E01004029", "E01004032", "E01004030", "E01004031", "E01004033",
  "E01004034", "E01004036", "E01004035",

  # Surrey Docks
  "E01004053", "E01004054", "E01004055", "E01004056", "E01004057",
  "E01004058", "E01004059", "E01004060",

  # Newington
  "E01003994", "E01003992", "E01003995", "E01003996", "E01003998",
  "E01003999", "E01003991",

  # East Walworth
  "E01003959", "E01003960", "E01003961", "E01003962", "E01003965",
  "E01003964", "E01003966", "E01003963",

  # South Bermondsey
  "E01004037", "E01004038", "E01004042", "E01004043", "E01004039",
  "E01004040", "E01004041", "E01004044",

  # Faraday
  "E01003968", "E01003971", "E01003974", "E01003967", "E01003970",
  "E01003972", "E01003973", "E01003969",

  # Camberwell Green
  "E01003923", "E01003918", "E01003925", "E01003919", "E01003920",
  "E01003921", "E01003922", "E01003924", "E01003926"
)

valid_lsoas_lambeth <- c(
  # Bishop's
  "E01003012", "E01003013", "E01003014", "E01003016", "E01003017", "E01003015",

  # Brixton Hill
  "E01003019", "E01003020", "E01003018", "E01003021", "E01003022",
  "E01003023", "E01003024", "E01003025",

  # Clapham Common
  "E01003029", "E01003032", "E01003026", "E01003027", "E01003028",
  "E01003030", "E01003033", "E01003031",

  # Clapham Town
  "E01003034", "E01003035", "E01003036", "E01003037", "E01003038",
  "E01003039", "E01003040", "E01003042", "E01003041",

  # Coldharbour
  "E01003046", "E01003048", "E01003045", "E01003047", "E01003049",
  "E01003050", "E01003052", "E01003043", "E01003044", "E01003051",

  # Ferndale
  "E01003059", "E01003060", "E01003061", "E01003053", "E01003054",
  "E01003056", "E01003058", "E01003055", "E01003057",

  # Herne Hill
  "E01003075", "E01003072", "E01003073", "E01003076", "E01003077",
  "E01003078", "E01003071", "E01003074",

  # Larkhall
  "E01003089", "E01003091", "E01003092", "E01003088", "E01003093",
  "E01003094", "E01003096", "E01003090", "E01003095",

  # Oval
  "E01003101", "E01003102", "E01003103", "E01003104", "E01003098",
  "E01003099", "E01003100", "E01003097",

  # Prince's
  "E01003108", "E01003110", "E01003111", "E01003112", "E01003105",
  "E01003106", "E01003107", "E01003109",

  # Stockwell
  "E01003122", "E01003129", "E01003121", "E01003123", "E01003124",
  "E01003125", "E01003126", "E01003128", "E01003127",

  # Thornton
  "E01003159", "E01003160", "E01003162", "E01003156", "E01003157",
  "E01003158", "E01003161", "E01003163",

  # Tulse Hill
  "E01003176", "E01003171", "E01003173", "E01003177", "E01003178",
  "E01003172", "E01003174", "E01003175", "E01003179",

  # Vassall
  "E01003180", "E01003183", "E01003181", "E01003184", "E01003185",
  "E01003186", "E01003187", "E01003182", "E01003188"
)

# Actual code to put in R for creating the filter
valid_lsoas <- c(
  "E01003927", "E01003929", "E01003934", "E01003935", "E01003928", "E01003930", "E01003931", "E01003932", "E01003933",
  "E01003939", "E01003938", "E01003940", "E01003941", "E01003942", "E01003936", "E01003937", "E01003943", "E01003944",
  "E01003976", "E01003982", "E01003975", "E01003978", "E01003979", "E01003981", "E01003977", "E01003980",
  "E01004025", "E01004026", "E01004027", "E01004022", "E01004023", "E01004028", "E01004024",
  "E01004029", "E01004032", "E01004030", "E01004031", "E01004033", "E01004034", "E01004036", "E01004035",
  "E01004053", "E01004054", "E01004055", "E01004056", "E01004057", "E01004058", "E01004059", "E01004060",
  "E01003994", "E01003992", "E01003995", "E01003996", "E01003998", "E01003999", "E01003991",
  "E01003959", "E01003960", "E01003961", "E01003962", "E01003965", "E01003964", "E01003966", "E01003963",
  "E01004037", "E01004038", "E01004042", "E01004043", "E01004039", "E01004040", "E01004041", "E01004044",
  "E01003968", "E01003971", "E01003974", "E01003967", "E01003970", "E01003972", "E01003973", "E01003969",
  "E01003923", "E01003918", "E01003925", "E01003919", "E01003920", "E01003921", "E01003922", "E01003924", "E01003926",
  "E01003012", "E01003013", "E01003014", "E01003016", "E01003017", "E01003015",
  "E01003019", "E01003020", "E01003018", "E01003021", "E01003022", "E01003023", "E01003024", "E01003025",
  "E01003029", "E01003032", "E01003026", "E01003027", "E01003028", "E01003030", "E01003033", "E01003031",
  "E01003034", "E01003035", "E01003036", "E01003037", "E01003038", "E01003039", "E01003040", "E01003042", "E01003041",
  "E01003046", "E01003048", "E01003045", "E01003047", "E01003049", "E01003050", "E01003052", "E01003043", "E01003044", "E01003051",
  "E01003059", "E01003060", "E01003061", "E01003053", "E01003054", "E01003056", "E01003058", "E01003055", "E01003057",
  "E01003075", "E01003072", "E01003073", "E01003076", "E01003077", "E01003078", "E01003071", "E01003074",
  "E01003089", "E01003091", "E01003092", "E01003088", "E01003093", "E01003094", "E01003096", "E01003090", "E01003095",
  "E01003101", "E01003102", "E01003103", "E01003104", "E01003098", "E01003099", "E01003100", "E01003097",
  "E01003108", "E01003110", "E01003111", "E01003112", "E01003105", "E01003106", "E01003107", "E01003109",
  "E01003122", "E01003129", "E01003121", "E01003123", "E01003124", "E01003125", "E01003126", "E01003128", "E01003127",
  "E01003159", "E01003160", "E01003162", "E01003156", "E01003157", "E01003158", "E01003161", "E01003163",
  "E01003176", "E01003171", "E01003173", "E01003177", "E01003178", "E01003172", "E01003174", "E01003175", "E01003179",
  "E01003180", "E01003183", "E01003181", "E01003184", "E01003185", "E01003186", "E01003187", "E01003182", "E01003188"
)

# Filter dataset excluding <20y and unplausible years like >200 and exclusing if date is within STOP STROKE period *and* not in a valid LSOA 
slsr_clean <- dataset_20250422 %>%
  filter(!is.na(strk_d), !is.na(strk_m), !is.na(strk_y)) %>%
  mutate(
    dtstrk = as.Date(paste(strk_y, strk_m, strk_d, sep = "-"), format = "%Y-%m-%d"),
    year = year(dtstrk)
  ) %>%
  filter(
    !is.na(sex),
    !is.na(age),
    age >= 20 & age <= 200,  
    !(dtstrk >= as.Date("2004-11-15") & dtstrk <= as.Date("2007-12-31") &
      !(lsoa11 %in% valid_lsoas))
  )

#--------------------------------------------------
# All Stroke totals crude and ESP incidence
#--------------------------------------------------

# === Strokes per year ====
# Add stroke year to the cleaned dataset
slsr_clean <- slsr_clean %>%
  mutate(year = lubridate::year(dtstrk))

# Count strokes per year
stroke_yearly <- slsr_clean %>%
  group_by(year) %>%
  summarise(cases = n(), .groups = "drop")

# View the result
print(stroke_yearly)

# === Crude incidence ====
crude_incidence <- stroke_yearly %>%
  left_join(population_totals, by = "year") %>%
  mutate(
    incidence_per_100k = (cases / population) * 100000,
    se = sqrt(cases) / population * 100000,
    lower_ci = incidence_per_100k - 1.96 * se,
    upper_ci = incidence_per_100k + 1.96 * se
  )

# === Prepare Age-Stratified Population Data (Total Population) ===
file_path <- "~/Library/Mobile Documents/com~apple~CloudDocs/Documents/PhD/Incidence 30 years/Totals/Totals/Modified_Population_Summary_Interpolated_and_Projected_1991_2025_FINAL.xlsx"

sheets <- c("males_white", "females_white",
            "males_black_african", "females_black_african",
            "males_black_caribbean", "females_black_caribbean",
            "males_black_other", "females_black_other",
            "males_other", "females_other")

population_list <- lapply(sheets, function(sheet) {
  read_excel(file_path, sheet = sheet) %>%
    rename(age_group = Age) %>%
    pivot_longer(-age_group, names_to = "year", values_to = "population") %>%
    mutate(
      year = as.integer(year),
      population = as.numeric(population),
      source = sheet
    )
})

population_age_year <- bind_rows(population_list) %>%
  group_by(year, age_group) %>%
  summarise(population = sum(population, na.rm = TRUE), .groups = "drop")


# === Prepare Stroke Data by Age Group ===
slsr_age_grouped <- slsr_clean %>%
  mutate(
    age_group = case_when(
      age >= 18 & age < 20 ~ "18 - 19",
      age >= 20 & age < 25 ~ "20 - 24",
      age >= 25 & age < 30 ~ "25 - 29",
      age >= 30 & age < 35 ~ "30 - 34",
      age >= 35 & age < 40 ~ "35 - 39",
      age >= 40 & age < 45 ~ "40 - 44",
      age >= 45 & age < 50 ~ "45 - 49",
      age >= 50 & age < 55 ~ "50 - 54",
      age >= 55 & age < 60 ~ "55 - 59",
      age >= 60 & age < 65 ~ "60 - 64",
      age >= 65 & age < 70 ~ "65 - 69",
      age >= 70 & age < 75 ~ "70 - 74",
      age >= 75 & age < 80 ~ "75 - 79",
      age >= 80 & age < 85 ~ "80 - 84",
      age >= 85 ~ "85+",
      TRUE ~ NA_character_
    ),
    year = year(dtstrk)
  ) %>%
  filter(!is.na(age_group))

age_specific_incidence <- slsr_age_grouped %>%
  count(year, age_group, name = "cases")

# === European Standard Population (2013 version) ===
esp <- tibble::tibble(
  age_group = c(
    "18 - 19", "20 - 24", "25 - 29", "30 - 34", "35 - 39",
    "40 - 44", "45 - 49", "50 - 54", "55 - 59", "60 - 64",
    "65 - 69", "70 - 74", "75 - 79", "80 - 84", "85+"
  ),
  std_pop = c(
    5500, 10500, 10000, 9500, 9500,
    9000, 8000, 7000, 6000, 5000,
    4000, 3000, 2000, 1000, 1000
  )
)

# === ESP-Standardised Incidence Calculation ===
standardised_data <- age_specific_incidence %>%
  left_join(population_age_year, by = c("year", "age_group")) %>%
  left_join(esp, by = "age_group")

esp_total <- sum(esp$std_pop)

european_std_incidence <- standardised_data %>%
  filter(
    !is.na(cases),
    !is.na(population),
    population > 0,
    !age_group %in% c("0 - 17", "18 - 19")
  ) %>%
  group_by(year) %>%
  summarise(
    std_rate = sum((cases / population) * std_pop / esp_total) * 100000,
    se = sqrt(sum(((std_pop / esp_total)^2) * (cases / (population^2)))) * 100000,
    .groups = "drop"
  ) %>%
  mutate(
    lower_ci = std_rate - 1.96 * se,
    upper_ci = std_rate + 1.96 * se
  )

# === Final Table with Crude and ESP Incidence ===
comparison_table <- stroke_yearly %>%
  left_join(crude_incidence, by = "year") %>%
  left_join(european_std_incidence, by = "year") %>%
  mutate(
    `Crude IR (local)` = glue::glue("{round(incidence_per_100k, 2)} (95% CI {round(lower_ci_crude, 2)}–{round(upper_ci_crude, 2)})"),
    `Adjusted IR (Europe)` = glue::glue("{round(std_rate, 2)} (95% CI {round(lower_ci_esp, 2)}–{round(upper_ci_esp, 2)})")
  ) %>%
  select(year, `Adjusted IR (Europe)`, `Crude IR (local)`)


# === Export to Excel with 4 tabs ===
write_xlsx(
  list(
    "Stroke Counts" = stroke_yearly,
    "Crude Incidence" = crude_incidence,
    "ESP Incidence" = european_std_incidence,
    "Rendered Table" = comparison_table
  ),
  path = "~/Library/Mobile Documents/com~apple~CloudDocs/Documents/R/stroke_summary_final.xlsx"
)

# -----------------------------------------------
# Crude and ESP-standardised rates: 5- and 10-year intervals
# -----------------------------------------------

# ==== Add Year Groupings to Crude and ESP ====

# Update the intervals to include 2024
crude_incidence <- crude_incidence %>%
  mutate(
    group_5yr = case_when(
      year %in% 1995:1999 ~ "1995–1999",
      year %in% 2000:2004 ~ "2000–2004",
      year %in% 2005:2009 ~ "2005–2009",
      year %in% 2010:2014 ~ "2010–2014",
      year %in% 2015:2019 ~ "2015–2019",
      year %in% 2020:2024 ~ "2020–2024"
    ),
    group_10yr = case_when(
      year %in% 1995:2004 ~ "1995–2004",
      year %in% 2005:2014 ~ "2005–2014",
      year %in% 2015:2024 ~ "2015–2024"
    )
  )

european_std_incidence <- european_std_incidence %>%
  mutate(
    group_5yr = case_when(
      year %in% 1995:1999 ~ "1995–1999",
      year %in% 2000:2004 ~ "2000–2004",
      year %in% 2005:2009 ~ "2005–2009",
      year %in% 2010:2014 ~ "2010–2014",
      year %in% 2015:2019 ~ "2015–2019",
      year %in% 2020:2024 ~ "2020–2024"
    ),
    group_10yr = case_when(
      year %in% 1995:2004 ~ "1995–2004",
      year %in% 2005:2014 ~ "2005–2014",
      year %in% 2015:2024 ~ "2015–2024"
    )
  )

# ==== Crude Aggregated Rates ====

crude_5yr <- crude_incidence %>%
  filter(!is.na(group_5yr), !is.na(cases), !is.na(population)) %>%
  group_by(group_5yr) %>%
  summarise(
    cases = sum(cases),
    population = sum(population),
    mean_incidence = (cases / population) * 100000,
    se = sqrt(cases) / population * 100000,
    lower_ci = mean_incidence - 1.96 * se,
    upper_ci = mean_incidence + 1.96 * se,
    .groups = "drop"
  )

crude_10yr <- crude_incidence %>%
  filter(!is.na(group_10yr), !is.na(cases), !is.na(population)) %>%
  group_by(group_10yr) %>%
  summarise(
    cases = sum(cases),
    population = sum(population),
    mean_incidence = (cases / population) * 100000,
    se = sqrt(cases) / population * 100000,
    lower_ci = mean_incidence - 1.96 * se,
    upper_ci = mean_incidence + 1.96 * se,
    .groups = "drop"
  )

# ==== ESP-Standardised Aggregated Rates ====

esp_5yr <- european_std_incidence %>%
  filter(!is.na(group_5yr)) %>%
  group_by(group_5yr) %>%
  summarise(
    mean_std_rate = mean(std_rate),
    se = sqrt(sum(se^2)) / n(),
    lower_ci = mean_std_rate - 1.96 * se,
    upper_ci = mean_std_rate + 1.96 * se,
    .groups = "drop"
  )

esp_10yr <- european_std_incidence %>%
  filter(!is.na(group_10yr)) %>%
  group_by(group_10yr) %>%
  summarise(
    mean_std_rate = mean(std_rate),
    se = sqrt(sum(se^2)) / n(),
    lower_ci = mean_std_rate - 1.96 * se,
    upper_ci = mean_std_rate + 1.96 * se,
    .groups = "drop"
  )

# ==== Rendered Summary Tables ====
library(glue)
rendered_5yr <- crude_5yr %>%
  left_join(esp_5yr, by = "group_5yr") %>%
  mutate(
    `Crude IR (local)` = glue("{round(mean_incidence, 2)} (95% CI {round(lower_ci.x, 2)}–{round(upper_ci.x, 2)})"),
    `Adjusted IR (Europe)` = glue("{round(mean_std_rate, 2)} (95% CI {round(lower_ci.y, 2)}–{round(upper_ci.y, 2)})")
  ) %>%
  select(group_5yr, `Crude IR (local)`, `Adjusted IR (Europe)`) %>%
  rename(`5-year interval` = group_5yr)

rendered_10yr <- crude_10yr %>%
  left_join(esp_10yr, by = "group_10yr") %>%
  mutate(
    `Crude IR (local)` = glue("{round(mean_incidence, 2)} (95% CI {round(lower_ci.x, 2)}–{round(upper_ci.x, 2)})"),
    `Adjusted IR (Europe)` = glue("{round(mean_std_rate, 2)} (95% CI {round(lower_ci.y, 2)}–{round(upper_ci.y, 2)})")
  ) %>%
  select(group_10yr, `Crude IR (local)`, `Adjusted IR (Europe)`) %>%
  rename(`10-year interval` = group_10yr)

# ==== Export all to Excel ====

write_xlsx(
  list(
    "5-year Crude" = crude_5yr,
    "5-year ESP" = esp_5yr,
    "5-year Rendered" = rendered_5yr,
    "10-year Crude" = crude_10yr,
    "10-year ESP" = esp_10yr,
    "10-year Rendered" = rendered_10yr
  ),
  path = "~/Library/Mobile Documents/com~apple~CloudDocs/Documents/R/stroke_summary_5_10yr.xlsx"
)

# -----------------------------------------------
# Plotting the yearly crude + standariswed with the 95% CI
# -----------------------------------------------

plot_data <- bind_rows(
  crude_incidence %>%
    select(year, incidence = incidence_per_100k, lower = lower_ci_crude, upper = upper_ci_crude) %>%
    mutate(label = "Crude incidence"),
  european_std_incidence %>%
    select(year, incidence = std_rate, lower = lower_ci_esp, upper = upper_ci_esp) %>%
    mutate(label = "ESP-standardised incidence")
)

plot_data_filtered <- plot_data %>%
  filter(year <= 2024)  # Exclude 2025

ggplot(plot_data_filtered, aes(x = year, y = incidence)) +
  geom_point(aes(color = label), size = 1.8) +
  geom_line(aes(color = label), size = 0.7) +
  geom_errorbar(aes(ymin = lower, ymax = upper, color = label), width = 0.4, size = 0.6) +
  facet_wrap(~ label, ncol = 1, scales = "free_y") +
  scale_x_continuous(breaks = seq(1995, 2024, by = 5)) +
  scale_color_manual(values = c(
    "Crude incidence" = "purple",
    "ESP-standardised incidence" = "deeppink"
  )) +
  labs(
    title = "Annual Stroke Incidence per 100,000 (1995–2024)",
    subtitle = "Crude and ESP-standardised estimates with 95% Confidence Intervals",
    x = "Year",
    y = "Incidence Rate",
    color = "Rate Type"
  ) +
  theme_minimal(base_size = 14) +
  theme(
    legend.position = "none",
    strip.text = element_text(face = "bold", size = 13),
    panel.grid.minor = element_blank()
  )

ggsave(
  filename = "~/Library/Mobile Documents/com~apple~CloudDocs/Documents/R/stroke_incidence_faceted.png",
  width = 8,
  height = 6,
  dpi = 300
)

#--------------------------------------------------
# All Stroke totals crude and ESP incidence Sex- especific
#--------------------------------------------------

# Filter the dataset by sex
stroke_yearly_sex <- slsr_clean %>%
  filter(sex %in% c(1, 2)) %>%  # Correct based on codebook
  mutate(sex_label = ifelse(sex == 1, "Male", "Female")) %>%
  group_by(year, sex_label) %>%
  summarise(cases = n(), .groups = "drop")

# Path to population file
file_path <- "~/Library/Mobile Documents/com~apple~CloudDocs/Documents/PhD/Incidence 30 years/Totals/Totals/Modified_Population_Summary_Interpolated_and_Projected_1991_2025_FINAL.xlsx"

# Read and tidy male population
pop_males <- readxl::read_excel(file_path, sheet = "Males_yearly") %>%
  pivot_longer(-Age, names_to = "year", values_to = "population") %>%
  filter(Age == "Total", year != "Total") %>%
  mutate(
    sex_label = "Male",
    year = as.integer(year),
    population = as.numeric(population)
  )

# Read and tidy female population
pop_females <- readxl::read_excel(file_path, sheet = "Females_yearly") %>%
  pivot_longer(-Age, names_to = "year", values_to = "population") %>%
  filter(Age == "Total", year != "Total") %>%
  mutate(
    sex_label = "Female",
    year = as.integer(year),
    population = as.numeric(population)
  )

# Combine
population_sex_totals <- dplyr::bind_rows(pop_males, pop_females)

# Calculate crude incidence
crude_incidence_sex <- stroke_yearly_sex %>%
  left_join(population_sex_totals, by = c("year", "sex_label")) %>%
  mutate(
    incidence_per_100k = (cases / population) * 100000,
    se = sqrt(cases) / population * 100000,
    lower_ci = incidence_per_100k - 1.96 * se,
    upper_ci = incidence_per_100k + 1.96 * se
  )

crude_incidence_female <- crude_incidence_sex %>%
  filter(sex_label == "Female") %>%
  select(year, cases, population, incidence_per_100k, lower_ci, upper_ci)

crude_incidence_male <- crude_incidence_sex %>%
  filter(sex_label == "Male") %>%
  select(year, cases, population, incidence_per_100k, lower_ci, upper_ci)

# === ESP sex ====

# Prepare SLSR data
slsr_age_sex <- slsr_clean %>%
  filter(age >= 20) %>%
  mutate(
    age_group = case_when(
      age >= 20 & age < 25 ~ "20-24",
      age >= 25 & age < 30 ~ "25-29",
      age >= 30 & age < 35 ~ "30-34",
      age >= 35 & age < 40 ~ "35-39",
      age >= 40 & age < 45 ~ "40-44",
      age >= 45 & age < 50 ~ "45-49",
      age >= 50 & age < 55 ~ "50-54",
      age >= 55 & age < 60 ~ "55-59",
      age >= 60 & age < 65 ~ "60-64",
      age >= 65 & age < 70 ~ "65-69",
      age >= 70 & age < 75 ~ "70-74",
      age >= 75 & age < 80 ~ "75-79",
      age >= 80 & age < 85 ~ "80-84",
      age >= 85 ~ "85+",
      TRUE ~ NA_character_
    ),
    sex_label = case_when(
      sex == 1 ~ "Male",
      sex == 2 ~ "Female",
      TRUE ~ NA_character_
    ),
    year = lubridate::year(dtstrk)
  ) %>%
  filter(!is.na(age_group), !is.na(sex_label))

# Count cases by sex and age
stroke_counts_age_sex <- slsr_age_sex %>%
  count(year, sex_label, age_group, name = "cases")

# Add population data females and male
file_path <- "~/Library/Mobile Documents/com~apple~CloudDocs/Documents/PhD/Incidence 30 years/Totals/Totals/Modified_Population_Summary_Interpolated_and_Projected_1991_2025_FINAL.xlsx"

# Load male population
pop_male_age <- readxl::read_excel(file_path, sheet = "Males_yearly") %>%
  pivot_longer(-Age, names_to = "year", values_to = "population") %>%
  mutate(
    sex_label = "Male",
    year = as.integer(year),
    age_group = gsub(" - ", "-", Age)
  ) %>%
  select(year, sex_label, age_group, population)

# Load female population
pop_female_age <- readxl::read_excel(file_path, sheet = "Females_yearly") %>%
  pivot_longer(-Age, names_to = "year", values_to = "population") %>%
  mutate(
    sex_label = "Female",
    year = as.integer(year),
    age_group = gsub(" - ", "-", Age)
  ) %>%
  select(year, sex_label, age_group, population)

# Combine into final dataset
population_age_sex_grouped <- bind_rows(pop_male_age, pop_female_age)

# Create the ESP sex-specific vectors
esp_male <- tibble::tibble(
  age_group = c(
    "0-4", "5-9", "10-14", "15-19", "20-24", "25-29", "30-34",
    "35-39", "40-44", "45-49", "50-54", "55-59", "60-64",
    "65-69", "70-74", "75-79", "80-84", "85+"
  ),
  std_pop = c(
    5000, 5500, 5500, 5500, 6000, 6000, 6500,
    7000, 7000, 7000, 7000, 6000, 5000,
    4000, 3000, 2000, 1000, 1000
  )
)

esp_female <- tibble::tibble(
  age_group = c(
    "0-4", "5-9", "10-14", "15-19", "20-24", "25-29", "30-34",
    "35-39", "40-44", "45-49", "50-54", "55-59", "60-64",
    "65-69", "70-74", "75-79", "80-84", "85+"
  ),
  std_pop = c(
    5000, 5500, 5500, 5500, 6000, 6000, 6500,
    7000, 7000, 7000, 7000, 6000, 5000,
    4000, 3000, 2000, 1000, 1000
  )
)

# Clean age group in std_data and population
std_data <- std_data %>%
  mutate(age_group = gsub(" - ", "-", age_group))

population_age_sex_grouped <- population_age_sex_grouped %>%
  mutate(age_group = gsub(" - ", "-", age_group))

std_data <- stroke_counts_age_sex %>%
  left_join(population_age_sex_grouped, by = c("year", "sex_label", "age_group"))

population_age_sex_grouped <- population_age_sex_grouped %>%
  mutate(
    sex_label = trimws(sex_label),
    age_group = gsub(" - ", "-", age_group)
  )

std_data <- std_data %>%
  mutate(
    sex_label = trimws(sex_label),
    age_group = gsub(" - ", "-", age_group)
  )

# Population is not merging 
# Fixing years
population_age_sex_grouped <- population_age_sex_grouped %>%
  mutate(age_group = gsub("Age ", "", age_group))

#Reloading population
# Reload from males_yearly and females_yearly
pop_male_age <- readxl::read_excel(file_path, sheet = "Males_yearly") %>%
  pivot_longer(-Age, names_to = "year", values_to = "population") %>%
  mutate(
    sex_label = "Male",
    year = as.integer(year),
    age_group = gsub("Age ", "", Age)
  ) %>%
  filter(!is.na(year), year >= 1995) %>%
  select(year, sex_label, age_group, population)

pop_female_age <- readxl::read_excel(file_path, sheet = "Females_yearly") %>%
  pivot_longer(-Age, names_to = "year", values_to = "population") %>%
  mutate(
    sex_label = "Female",
    year = as.integer(year),
    age_group = gsub("Age ", "", Age)
  ) %>%
  filter(!is.na(year), year >= 1995) %>%
  select(year, sex_label, age_group, population)


# Combine both
population_age_sex_grouped <- bind_rows(pop_male_age, pop_female_age)

# Combine stroke cases + population
std_data <- stroke_counts_age_sex %>%
  left_join(population_age_sex_grouped, by = c("year", "sex_label", "age_group"))

#Check age and sex match
setdiff(unique(std_data$age_group), esp_male$age_group)  # Should return character(0)
unique(std_data$sex_label)  # Should show "Male" and "Female"

# Male
std_results_male <- std_data %>%
  filter(sex_label == "Male", age_group %in% esp_male$age_group) %>%
  left_join(esp_male, by = "age_group") %>%
  group_by(year) %>%
  summarise(
    sex_label = "Male",
    std_rate = sum((cases / population) * std_pop) / sum(std_pop) * 100000,
    se = sqrt(sum((std_pop^2) * (cases / (population^2)))) / sum(std_pop) * 100000,
    .groups = "drop"
  ) %>%
  mutate(
    lower_ci = std_rate - 1.96 * se,
    upper_ci = std_rate + 1.96 * se
  )

# Female
std_results_female <- std_data %>%
  filter(sex_label == "Female", age_group %in% esp_female$age_group) %>%
  left_join(esp_female, by = "age_group") %>%
  group_by(year) %>%
  summarise(
    sex_label = "Female",
    std_rate = sum((cases / population) * std_pop) / sum(std_pop) * 100000,
    se = sqrt(sum((std_pop^2) * (cases / (population^2)))) / sum(std_pop) * 100000,
    .groups = "drop"
  ) %>%
  mutate(
    lower_ci = std_rate - 1.96 * se,
    upper_ci = std_rate + 1.96 * se
  )

# Combine
esp_sex_standardised <- bind_rows(std_results_male, std_results_female)

# == Rendering the tables ==
# Rename CIs to avoid overlap
crude_formatted <- crude_incidence_sex %>%
  rename(
    lower_ci_crude = lower_ci,
    upper_ci_crude = upper_ci
  )

esp_formatted <- esp_sex_standardised %>%
  rename(
    lower_ci_esp = lower_ci,
    upper_ci_esp = upper_ci
  )

# Merge them
comparison_sex <- crude_formatted %>%
  left_join(esp_formatted, by = c("year", "sex_label")) %>%
  mutate(
    `Crude IR` = glue::glue("{round(incidence_per_100k, 1)} (95% CI {round(lower_ci_crude, 1)}–{round(upper_ci_crude, 1)})"),
    `ESP IR` = glue::glue("{round(std_rate, 1)} (95% CI {round(lower_ci_esp, 1)}–{round(upper_ci_esp, 1)})")
  ) %>%
  select(year, sex_label, `Crude IR`, `ESP IR`)

# Female table
female_table <- comparison_sex %>%
  filter(sex_label == "Female") %>%
  select(-sex_label)

# Male table
male_table <- comparison_sex %>%
  filter(sex_label == "Male") %>%
  select(-sex_label)

# === 5 and 10 year tables ===
crude_5yr <- crude_incidence_sex %>%
  filter(!is.na(group_5yr)) %>%
  group_by(sex_label, group_5yr) %>%
  summarise(
    cases = sum(cases),
    population = sum(population),
    crude_rate = (cases / population) * 100000,
    se = sqrt(cases) / population * 100000,
    lower_ci = crude_rate - 1.96 * se,
    upper_ci = crude_rate + 1.96 * se,
    .groups = "drop"
  )

crude_10yr <- crude_incidence_sex %>%
  filter(!is.na(group_10yr)) %>%
  group_by(sex_label, group_10yr) %>%
  summarise(
    cases = sum(cases),
    population = sum(population),
    crude_rate = (cases / population) * 100000,
    se = sqrt(cases) / population * 100000,
    lower_ci = crude_rate - 1.96 * se,
    upper_ci = crude_rate + 1.96 * se,
    .groups = "drop"
  )
esp_5yr <- esp_sex_standardised %>%
  filter(!is.na(group_5yr)) %>%
  group_by(sex_label, group_5yr) %>%
  summarise(
    mean_std_rate = mean(std_rate, na.rm = TRUE),
    se = sqrt(sum(se^2, na.rm = TRUE)) / n(),
    lower_ci = mean_std_rate - 1.96 * se,
    upper_ci = mean_std_rate + 1.96 * se,
    .groups = "drop"
  )

esp_10yr <- esp_sex_standardised %>%
  filter(!is.na(group_10yr)) %>%
  group_by(sex_label, group_10yr) %>%
  summarise(
    mean_std_rate = mean(std_rate, na.rm = TRUE),
    se = sqrt(sum(se^2, na.rm = TRUE)) / n(),
    lower_ci = mean_std_rate - 1.96 * se,
    upper_ci = mean_std_rate + 1.96 * se,
    .groups = "drop"
  )

# == Rendering ==
library(dplyr)
library(glue)

# Female: 5-Year 
female_rendered_5yr <- crude_5yr %>%
  filter(sex_label == "Female") %>%
  left_join(esp_5yr %>% filter(sex_label == "Female"), by = "group_5yr") %>%
  mutate(
    `Crude IR (local)` = glue("{round(crude_rate, 2)} (95% CI {round(lower_ci.x, 2)}–{round(upper_ci.x, 2)})"),
    `Adjusted IR (Europe)` = glue("{round(mean_std_rate, 2)} (95% CI {round(lower_ci.y, 2)}–{round(upper_ci.y, 2)})")
  ) %>%
  select(`5-Year Interval` = group_5yr, `Crude IR (local)`, `Adjusted IR (Europe)`)

# Male: 5-Year 
male_rendered_5yr <- crude_5yr %>%
  filter(sex_label == "Male") %>%
  left_join(esp_5yr %>% filter(sex_label == "Male"), by = "group_5yr") %>%
  mutate(
    `Crude IR (local)` = glue("{round(crude_rate, 2)} (95% CI {round(lower_ci.x, 2)}–{round(upper_ci.x, 2)})"),
    `Adjusted IR (Europe)` = glue("{round(mean_std_rate, 2)} (95% CI {round(lower_ci.y, 2)}–{round(upper_ci.y, 2)})")
  ) %>%
  select(`5-Year Interval` = group_5yr, `Crude IR (local)`, `Adjusted IR (Europe)`)

# Female: 10-Year
female_rendered_10yr <- crude_10yr %>%
  filter(sex_label == "Female") %>%
  left_join(esp_10yr %>% filter(sex_label == "Female"), by = "group_10yr") %>%
  mutate(
    `Crude IR (local)` = glue("{round(crude_rate, 2)} (95% CI {round(lower_ci.x, 2)}–{round(upper_ci.x, 2)})"),
    `Adjusted IR (Europe)` = glue("{round(mean_std_rate, 2)} (95% CI {round(lower_ci.y, 2)}–{round(upper_ci.y, 2)})")
  ) %>%
  select(`10-Year Interval` = group_10yr, `Crude IR (local)`, `Adjusted IR (Europe)`)

# Male: 10-Year
male_rendered_10yr <- crude_10yr %>%
  filter(sex_label == "Male") %>%
  left_join(esp_10yr %>% filter(sex_label == "Male"), by = "group_10yr") %>%
  mutate(
    `Crude IR (local)` = glue("{round(crude_rate, 2)} (95% CI {round(lower_ci.x, 2)}–{round(upper_ci.x, 2)})"),
    `Adjusted IR (Europe)` = glue("{round(mean_std_rate, 2)} (95% CI {round(lower_ci.y, 2)}–{round(upper_ci.y, 2)})")
  ) %>%
  select(`10-Year Interval` = group_10yr, `Crude IR (local)`, `Adjusted IR (Europe)`)

library(writexl)

write_xlsx(
  list(
    "Crude_Female_Yearly" = crude_incidence_female,
    "Crude_Male_Yearly" = crude_incidence_male,
    "ESP_Female_Yearly" = std_results_female,
    "ESP_Male_Yearly" = std_results_male,
    "Rendered_Female_Yearly" = female_table,
    "Rendered_Male_Yearly" = male_table,
    "Rendered_Female_5yr" = female_rendered_5yr,
    "Rendered_Male_5yr" = male_rendered_5yr,
    "Rendered_Female_10yr" = female_rendered_10yr,
    "Rendered_Male_10yr" = male_rendered_10yr
  ),
  path = "stroke_incidence_sex_specific_summary.xlsx"
)

# === Plotting ===

# ==First plot ==

library(dplyr)

# Combine crude and ESP into one plotting dataframe
plot_data_sex <- crude_formatted %>%
  select(year, sex_label, crude_rate = incidence_per_100k, lower_crude = lower_ci_crude, upper_crude = upper_ci_crude) %>%
  full_join(
    esp_formatted %>%
      select(year, sex_label, std_rate, lower_esp = lower_ci_esp, upper_esp = upper_ci_esp),
    by = c("year", "sex_label")
  ) %>%
  tidyr::pivot_longer(
    cols = c(crude_rate, std_rate),
    names_to = "measure",
    values_to = "incidence"
  ) %>%
  mutate(
    lower = ifelse(measure == "crude_rate", lower_crude, lower_esp),
    upper = ifelse(measure == "crude_rate", upper_crude, upper_esp),
    label = case_when(
      measure == "crude_rate" ~ "Crude incidence",
      measure == "std_rate" ~ "ESP-standardised incidence"
    )
  ) %>%
  filter(year < 2025)  # Optional: drop 2025

library(ggplot2)

ggplot(plot_data_sex, aes(x = year, y = incidence, color = label)) +
  geom_line(size = 0.8) +
  geom_point(size = 1.8) +
  geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.4, size = 0.6) +
  facet_wrap(~ sex_label, ncol = 1, scales = "free_y") +
  scale_color_manual(values = c(
    "Crude incidence" = "purple",
    "ESP-standardised incidence" = "deeppink"
  )) +
  labs(
    title = "Stroke Incidence per 100,000 by Sex (1995–2024)",
    subtitle = "Crude and ESP-standardised with 95% Confidence Intervals",
    x = "Year",
    y = "Incidence Rate",
    color = "Measure"
  ) +
  theme_minimal(base_size = 14) +
  theme(
    strip.text = element_text(size = 14, face = "bold"),
    legend.position = "top",
    panel.grid.minor = element_blank()
  )


# == Second plot ==
library(dplyr)
library(tidyr)

plot_data_compare <- crude_formatted %>%
  select(year, sex_label, crude_rate = incidence_per_100k, lower_crude = lower_ci_crude, upper_crude = upper_ci_crude) %>%
  full_join(
    esp_formatted %>%
      select(year, sex_label, std_rate, lower_esp = lower_ci_esp, upper_esp = upper_ci_esp),
    by = c("year", "sex_label")
  ) %>%
  pivot_longer(
    cols = c(crude_rate, std_rate),
    names_to = "measure",
    values_to = "incidence"
  ) %>%
  mutate(
    lower = ifelse(measure == "crude_rate", lower_crude, lower_esp),
    upper = ifelse(measure == "crude_rate", upper_crude, upper_esp),
    label = case_when(
      measure == "crude_rate" ~ "Crude incidence",
      measure == "std_rate" ~ "ESP-standardised incidence"
    )
  ) %>%
  filter(year < 2025)  # Optional: drop 2025
ggplot(plot_data_compare, aes(x = year, y = incidence, color = sex_label)) +
  geom_line(size = 0.9) +
  geom_point(size = 1.8) +
  geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.4, size = 0.6) +
  facet_wrap(~ label, ncol = 1, scales = "free_y") +
  scale_color_manual(values = c("Female" = "#de77ae", "Male" = "#7fbc41")) +
  labs(
    title = "Stroke Incidence per 100,000 (1995–2024)",
    subtitle = "Comparison by Sex: Crude and ESP-standardised Rates with 95% CI",
    x = "Year",
    y = "Incidence Rate",
    color = "Sex"
  ) +
  theme_minimal(base_size = 14) +
  theme(
    strip.text = element_text(size = 14, face = "bold"),
    panel.grid.minor = element_blank()
  )

#--------------------------------------------------
# Type of stroke crude and ESP
#--------------------------------------------------
# Categorise type of stroke
slsr_clean <- slsr_clean %>%
  mutate(
    stroke_type = case_when(
      subtype %in% c(1, 2, 3, 4, 5) ~ "Ischaemic",
      subtype == 6 ~ "Haemorrhagic",
      subtype == 7 ~ "Subarachnoid",
      TRUE ~ NA_character_
    )
  )
# Count cases by year
stroke_yearly_type <- slsr_clean %>%
  filter(!is.na(stroke_type)) %>%
  group_by(year, stroke_type) %>%
  summarise(cases = n(), .groups = "drop")

# Use total population (from earlier steps)
crude_incidence_type <- stroke_yearly_type %>%
  left_join(population_totals, by = "year") %>%
  mutate(
    incidence_per_100k = (cases / population) * 100000,
    se = sqrt(cases) / population * 100000,
    lower_ci = pmax(0, incidence_per_100k - 1.96 * se),
    upper_ci = incidence_per_100k + 1.96 * se
  )

# For ESP, prepare group, age and stroke type
stroke_counts_type <- slsr_clean %>%
  filter(age >= 20, !is.na(stroke_type)) %>%
  mutate(
    age_group = case_when(
      age >= 20 & age < 25 ~ "20-24",
      age >= 25 & age < 30 ~ "25-29",
      age >= 30 & age < 35 ~ "30-34",
      age >= 35 & age < 40 ~ "35-39",
      age >= 40 & age < 45 ~ "40-44",
      age >= 45 & age < 50 ~ "45-49",
      age >= 50 & age < 55 ~ "50-54",
      age >= 55 & age < 60 ~ "55-59",
      age >= 60 & age < 65 ~ "60-64",
      age >= 65 & age < 70 ~ "65-69",
      age >= 70 & age < 75 ~ "70-74",
      age >= 75 & age < 80 ~ "75-79",
      age >= 80 & age < 85 ~ "80-84",
      age >= 85 ~ "85+",
      TRUE ~ NA_character_
    ),
    year = lubridate::year(dtstrk)
  ) %>%
  filter(!is.na(age_group)) %>%
  count(year, stroke_type, age_group, name = "cases")

population_age_year <- population_age_year %>%
  mutate(age_group = gsub(" - ", "-", age_group))

# ESP standarisation
# European Standard Population (same as before, age 20+ only)
esp <- tibble::tibble(
  age_group = c(
    "20-24", "25-29", "30-34", "35-39", "40-44", "45-49", "50-54",
    "55-59", "60-64", "65-69", "70-74", "75-79", "80-84", "85+"
  ),
  std_pop = c(
    6000, 6000, 6500, 7000, 7000, 7000, 7000,
    6000, 5000, 4000, 3000, 2000, 1000, 1000
  )
)

esp_total <- sum(esp$std_pop)

# Merge stroke, population, and ESP
standardised_type <- stroke_counts_type %>%
  left_join(population_age_year, by = c("year", "age_group")) %>%
  left_join(esp, by = "age_group") %>%
  filter(!is.na(cases), !is.na(population), !is.na(std_pop), population > 0)

# Calculate ESP-standardised incidence
esp_std_type <- standardised_type %>%
  group_by(year, stroke_type) %>%
  summarise(
    std_rate = sum((cases / population) * std_pop) / esp_total * 100000,
    se = sqrt(sum((std_pop^2) * (cases / (population^2)))) / esp_total * 100000,
    .groups = "drop"
  ) %>%
  mutate(
    lower_ci = pmax(0, std_rate - 1.96 * se),
    upper_ci = std_rate + 1.96 * se
  )

# 5 years
crude_type_5yr <- crude_incidence_type_clean %>%
  filter(!is.na(year)) %>%
  mutate(
    group_5yr = case_when(
      year %in% 1995:1999 ~ "1995–1999",
      year %in% 2000:2004 ~ "2000–2004",
      year %in% 2005:2009 ~ "2005–2009",
      year %in% 2010:2014 ~ "2010–2014",
      year %in% 2015:2019 ~ "2015–2019",
      year %in% 2020:2024 ~ "2020–2024"
    )
  ) %>%
  filter(!is.na(group_5yr)) %>%
  group_by(stroke_type, group_5yr) %>%
  summarise(
    cases = sum(cases),
    population = sum(population),
    crude_rate = (cases / population) * 100000,
    se = sqrt(cases) / population * 100000,
    lower_ci = pmax(0, crude_rate - 1.96 * se),
    upper_ci = crude_rate + 1.96 * se,
    .groups = "drop"
  )
esp_type_5yr <- esp_std_type_clean %>%
  mutate(
    group_5yr = case_when(
      year %in% 1995:1999 ~ "1995–1999",
      year %in% 2000:2004 ~ "2000–2004",
      year %in% 2005:2009 ~ "2005–2009",
      year %in% 2010:2014 ~ "2010–2014",
      year %in% 2015:2019 ~ "2015–2019",
      year %in% 2020:2024 ~ "2020–2024"
    )
  ) %>%
  filter(!is.na(group_5yr)) %>%
  group_by(stroke_type, group_5yr) %>%
  summarise(
    std_rate = mean(std_rate, na.rm = TRUE),
    se = sqrt(sum(se^2, na.rm = TRUE)) / n(),
    lower_ci = pmax(0, std_rate - 1.96 * se),
    upper_ci = std_rate + 1.96 * se,
    .groups = "drop"
  )

# 10 years
crude_type_10yr <- crude_incidence_type_clean %>%
  mutate(
    group_10yr = case_when(
      year %in% 1995:2004 ~ "1995–2004",
      year %in% 2005:2014 ~ "2005–2014",
      year %in% 2015:2024 ~ "2015–2024"
    )
  ) %>%
  filter(!is.na(group_10yr)) %>%
  group_by(stroke_type, group_10yr) %>%
  summarise(
    cases = sum(cases),
    population = sum(population),
    crude_rate = (cases / population) * 100000,
    se = sqrt(cases) / population * 100000,
    lower_ci = pmax(0, crude_rate - 1.96 * se),
    upper_ci = crude_rate + 1.96 * se,
    .groups = "drop"
  )
esp_type_10yr <- esp_std_type_clean %>%
  mutate(
    group_10yr = case_when(
      year %in% 1995:2004 ~ "1995–2004",
      year %in% 2005:2014 ~ "2005–2014",
      year %in% 2015:2024 ~ "2015–2024"
    )
  ) %>%
  filter(!is.na(group_10yr)) %>%
  group_by(stroke_type, group_10yr) %>%
  summarise(
    std_rate = mean(std_rate, na.rm = TRUE),
    se = sqrt(sum(se^2, na.rm = TRUE)) / n(),
    lower_ci = pmax(0, std_rate - 1.96 * se),
    upper_ci = std_rate + 1.96 * se,
    .groups = "drop"
  )

# == Rendering ==
# Rename CIs to avoid conflict
crude_incidence_type_clean <- crude_incidence_type %>%
  rename(
    crude_rate = incidence_per_100k,
    lower_ci_crude = lower_ci,
    upper_ci_crude = upper_ci
  )

esp_std_type_clean <- esp_std_type %>%
  rename(
    lower_ci_esp = lower_ci,
    upper_ci_esp = upper_ci
  )

# Combine both
type_rendered_yearly <- crude_incidence_type_clean %>%
  left_join(esp_std_type_clean, by = c("year", "stroke_type")) %>%
  mutate(
    `Crude IR` = glue::glue("{round(crude_rate, 1)} (95% CI {round(lower_ci_crude, 1)}–{round(upper_ci_crude, 1)})"),
    `ESP IR` = glue::glue("{round(std_rate, 1)} (95% CI {round(lower_ci_esp, 1)}–{round(upper_ci_esp, 1)})")
  ) %>%
  select(year, stroke_type, `Crude IR`, `ESP IR`)

# Add 5 and 10 years
type_rendered_yearly <- type_rendered_yearly %>%
  mutate(
    group_5yr = case_when(
      year %in% 1995:1999 ~ "1995–1999",
      year %in% 2000:2004 ~ "2000–2004",
      year %in% 2005:2009 ~ "2005–2009",
      year %in% 2010:2014 ~ "2010–2014",
      year %in% 2015:2019 ~ "2015–2019",
      year %in% 2020:2024 ~ "2020–2024"
    ),
    group_10yr = case_when(
      year %in% 1995:2004 ~ "1995–2004",
      year %in% 2005:2014 ~ "2005–2014",
      year %in% 2015:2024 ~ "2015–2024"
    )
  )
# properly rendering
library(glue)
library(glue)

rendered_type_yearly <- crude_incidence_type_clean %>%
  left_join(esp_std_type_clean, by = c("year", "stroke_type")) %>%
  mutate(
    `Crude IR` = glue("{round(crude_rate, 1)} (95% CI {round(lower_ci_crude, 1)}–{round(upper_ci_crude, 1)})"),
    `ESP IR` = glue("{round(std_rate, 1)} (95% CI {round(lower_ci_esp, 1)}–{round(upper_ci_esp, 1)})")
  ) %>%
  select(year, stroke_type, `Crude IR`, `ESP IR`)

rendered_type_5yr <- crude_type_5yr %>%
  left_join(esp_type_5yr, by = c("stroke_type", "group_5yr" = "group_5yr")) %>%
  mutate(
    `Crude IR` = glue("{round(crude_rate, 1)} (95% CI {round(lower_ci.x, 1)}–{round(upper_ci.x, 1)})"),
    `ESP IR` = glue("{round(std_rate, 1)} (95% CI {round(lower_ci.y, 1)}–{round(upper_ci.y, 1)})")
  ) %>%
  select(`5-Year Interval` = group_5yr, stroke_type, `Crude IR`, `ESP IR`)
rendered_type_10yr <- crude_type_10yr %>%
  left_join(esp_type_10yr, by = c("stroke_type", "group_10yr" = "group_10yr")) %>%
  mutate(
    `Crude IR` = glue("{round(crude_rate, 1)} (95% CI {round(lower_ci.x, 1)}–{round(upper_ci.x, 1)})"),
    `ESP IR` = glue("{round(std_rate, 1)} (95% CI {round(lower_ci.y, 1)}–{round(upper_ci.y, 1)})")
  ) %>%
  select(`10-Year Interval` = group_10yr, stroke_type, `Crude IR`, `ESP IR`)

# == Creating separate tables for each of strokes subtypes ==

# Crude Yearly (already cleaned as `crude_incidence_type_clean`)
crude_ischaemic_yearly <- crude_incidence_type_clean %>%
  filter(stroke_type == "Ischaemic")

# Crude 5-Year
crude_ischaemic_5yr <- crude_type_5yr %>%
  filter(stroke_type == "Ischaemic")

# Crude 10-Year
crude_ischaemic_10yr <- crude_type_10yr %>%
  filter(stroke_type == "Ischaemic")

# ESP Yearly
esp_ischaemic_yearly <- esp_std_type_clean %>%
  filter(stroke_type == "Ischaemic")

# ESP 5-Year
esp_ischaemic_5yr <- esp_type_5yr %>%
  filter(stroke_type == "Ischaemic")

# ESP 10-Year
esp_ischaemic_10yr <- esp_type_10yr %>%
  filter(stroke_type == "Ischaemic")
library(writexl)

write_xlsx(
  list(
    "Ischaemic_Crude_Yearly"    = crude_ischaemic_yearly,
    "Ischaemic_ESP_Yearly"      = esp_ischaemic_yearly,
    "Ischaemic_Rendered_Yearly" = rendered_ischaemic_yearly,

    "Ischaemic_Crude_5yr"       = crude_ischaemic_5yr,
    "Ischaemic_ESP_5yr"         = esp_ischaemic_5yr,
    "Ischaemic_Rendered_5yr"    = rendered_ischaemic_5yr,

    "Ischaemic_Crude_10yr"      = crude_ischaemic_10yr,
    "Ischaemic_ESP_10yr"        = esp_ischaemic_10yr,
    "Ischaemic_Rendered_10yr"   = rendered_ischaemic_10yr
  ),
  path = "ischaemic_stroke_incidence.xlsx"
)

# --- Haemorrhagic ---
crude_haem_yearly   <- crude_incidence_type_clean %>% filter(stroke_type == "Haemorrhagic")
crude_haem_5yr      <- crude_type_5yr %>% filter(stroke_type == "Haemorrhagic")
crude_haem_10yr     <- crude_type_10yr %>% filter(stroke_type == "Haemorrhagic")

esp_haem_yearly     <- esp_std_type_clean %>% filter(stroke_type == "Haemorrhagic")
esp_haem_5yr        <- esp_type_5yr %>% filter(stroke_type == "Haemorrhagic")
esp_haem_10yr       <- esp_type_10yr %>% filter(stroke_type == "Haemorrhagic")

# --- Subarachnoid ---
crude_sah_yearly    <- crude_incidence_type_clean %>% filter(stroke_type == "Subarachnoid")
crude_sah_5yr       <- crude_type_5yr %>% filter(stroke_type == "Subarachnoid")
crude_sah_10yr      <- crude_type_10yr %>% filter(stroke_type == "Subarachnoid")

esp_sah_yearly      <- esp_std_type_clean %>% filter(stroke_type == "Subarachnoid")
esp_sah_5yr         <- esp_type_5yr %>% filter(stroke_type == "Subarachnoid")
esp_sah_10yr        <- esp_type_10yr %>% filter(stroke_type == "Subarachnoid")

library(glue)

# --- Haemorrhagic ---
rendered_haem_yearly <- crude_haem_yearly %>%
  left_join(esp_haem_yearly, by = c("year", "stroke_type")) %>%
  mutate(
    `Crude IR` = glue("{round(crude_rate, 1)} (95% CI {round(lower_ci_crude, 1)}–{round(upper_ci_crude, 1)})"),
    `ESP IR` = glue("{round(std_rate, 1)} (95% CI {round(lower_ci_esp, 1)}–{round(upper_ci_esp, 1)})")
  ) %>%
  select(year, `Crude IR`, `ESP IR`)

rendered_haem_5yr <- crude_haem_5yr %>%
  left_join(esp_haem_5yr, by = c("stroke_type", "group_5yr")) %>%
  mutate(
    `Crude IR` = glue("{round(crude_rate, 1)} (95% CI {round(lower_ci.x, 1)}–{round(upper_ci.x, 1)})"),
    `ESP IR` = glue("{round(std_rate, 1)} (95% CI {round(lower_ci.y, 1)}–{round(upper_ci.y, 1)})")
  ) %>%
  select(`5-Year Interval` = group_5yr, `Crude IR`, `ESP IR`)

rendered_haem_10yr <- crude_haem_10yr %>%
  left_join(esp_haem_10yr, by = c("stroke_type", "group_10yr")) %>%
  mutate(
    `Crude IR` = glue("{round(crude_rate, 1)} (95% CI {round(lower_ci.x, 1)}–{round(upper_ci.x, 1)})"),
    `ESP IR` = glue("{round(std_rate, 1)} (95% CI {round(lower_ci.y, 1)}–{round(upper_ci.y, 1)})")
  ) %>%
  select(`10-Year Interval` = group_10yr, `Crude IR`, `ESP IR`)

# --- Subarachnoid ---
rendered_sah_yearly <- crude_sah_yearly %>%
  left_join(esp_sah_yearly, by = c("year", "stroke_type")) %>%
  mutate(
    `Crude IR` = glue("{round(crude_rate, 1)} (95% CI {round(lower_ci_crude, 1)}–{round(upper_ci_crude, 1)})"),
    `ESP IR` = glue("{round(std_rate, 1)} (95% CI {round(lower_ci_esp, 1)}–{round(upper_ci_esp, 1)})")
  ) %>%
  select(year, `Crude IR`, `ESP IR`)

# -- Rendering ---
rendered_sah_5yr <- crude_sah_5yr %>%
  left_join(esp_sah_5yr, by = c("stroke_type", "group_5yr")) %>%
  mutate(
    `Crude IR` = glue("{round(crude_rate, 1)} (95% CI {round(lower_ci.x, 1)}–{round(upper_ci.x, 1)})"),
    `ESP IR` = glue("{round(std_rate, 1)} (95% CI {round(lower_ci.y, 1)}–{round(upper_ci.y, 1)})")
  ) %>%
  select(`5-Year Interval` = group_5yr, `Crude IR`, `ESP IR`)

rendered_sah_10yr <- crude_sah_10yr %>%
  left_join(esp_sah_10yr, by = c("stroke_type", "group_10yr")) %>%
  mutate(
    `Crude IR` = glue("{round(crude_rate, 1)} (95% CI {round(lower_ci.x, 1)}–{round(upper_ci.x, 1)})"),
    `ESP IR` = glue("{round(std_rate, 1)} (95% CI {round(lower_ci.y, 1)}–{round(upper_ci.y, 1)})")
  ) %>%
  select(`10-Year Interval` = group_10yr, `Crude IR`, `ESP IR`)

# Save it
write_xlsx(
  list(
    # Haemorrhagic
    "Haem_Crude_Yearly"    = crude_haem_yearly,
    "Haem_ESP_Yearly"      = esp_haem_yearly,
    "Haem_Rendered_Yearly" = rendered_haem_yearly,

    "Haem_Crude_5yr"       = crude_haem_5yr,
    "Haem_ESP_5yr"         = esp_haem_5yr,
    "Haem_Rendered_5yr"    = rendered_haem_5yr,

    "Haem_Crude_10yr"      = crude_haem_10yr,
    "Haem_ESP_10yr"        = esp_haem_10yr,
    "Haem_Rendered_10yr"   = rendered_haem_10yr,

    # Subarachnoid
    "SAH_Crude_Yearly"     = crude_sah_yearly,
    "SAH_ESP_Yearly"       = esp_sah_yearly,
    "SAH_Rendered_Yearly"  = rendered_sah_yearly,

    "SAH_Crude_5yr"        = crude_sah_5yr,
    "SAH_ESP_5yr"          = esp_sah_5yr,
    "SAH_Rendered_5yr"     = rendered_sah_5yr,

    "SAH_Crude_10yr"       = crude_sah_10yr,
    "SAH_ESP_10yr"         = esp_sah_10yr,
    "SAH_Rendered_10yr"    = rendered_sah_10yr
  ),
  path = "haemorrhagic_sah_incidence.xlsx"
)

# SAH is getting negative values
crude_sah_yearly <- crude_incidence_type_clean %>%
  filter(stroke_type == "Subarachnoid") %>%
  mutate(
    lower_ci_crude = pmax(0, lower_ci_crude)
  )
esp_sah_yearly <- esp_std_type_clean %>%
  filter(stroke_type == "Subarachnoid") %>%
  mutate(
    lower_ci_esp = pmax(0, lower_ci_esp)
  )
crude_sah_5yr <- crude_sah_5yr %>%
  mutate(lower_ci = pmax(0, lower_ci))

esp_sah_5yr <- esp_sah_5yr %>%
  mutate(lower_ci = pmax(0, lower_ci))
crude_sah_10yr <- crude_sah_10yr %>%
  mutate(lower_ci = pmax(0, lower_ci))

esp_sah_10yr <- esp_sah_10yr %>%
  mutate(lower_ci = pmax(0, lower_ci))
rendered_sah_yearly <- crude_sah_yearly %>%
  left_join(esp_sah_yearly, by = c("year", "stroke_type")) %>%
  mutate(
    `Crude IR` = glue("{round(crude_rate, 1)} (95% CI {round(pmax(0, lower_ci_crude), 1)}–{round(upper_ci_crude, 1)})"),
    `ESP IR`   = glue("{round(std_rate, 1)} (95% CI {round(pmax(0, lower_ci_esp), 1)}–{round(upper_ci_esp, 1)})")
  ) %>%
  select(year, `Crude IR`, `ESP IR`)
rendered_sah_5yr <- crude_sah_5yr %>%
  left_join(esp_sah_5yr, by = c("stroke_type", "group_5yr")) %>%
  mutate(
    `Crude IR` = glue("{round(crude_rate, 1)} (95% CI {round(pmax(0, lower_ci.x), 1)}–{round(upper_ci.x, 1)})"),
    `ESP IR`   = glue("{round(std_rate, 1)} (95% CI {round(pmax(0, lower_ci.y), 1)}–{round(upper_ci.y, 1)})")
  ) %>%
  select(`5-Year Interval` = group_5yr, `Crude IR`, `ESP IR`)
library(writexl)

write_xlsx(
  list(
    "SAH_Crude_Yearly"     = crude_sah_yearly,
    "SAH_ESP_Yearly"       = esp_sah_yearly,
    "SAH_Rendered_Yearly"  = rendered_sah_yearly,

    "SAH_Crude_5yr"        = crude_sah_5yr,
    "SAH_ESP_5yr"          = esp_sah_5yr,
    "SAH_Rendered_5yr"     = rendered_sah_5yr,

    "SAH_Crude_10yr"       = crude_sah_10yr,
    "SAH_ESP_10yr"         = esp_sah_10yr,
    "SAH_Rendered_10yr"    = rendered_sah_10yr
  ),
  path = "subarachnoid_stroke_incidence.xlsx"
)


# === Plot ====
library(dplyr)
library(ggplot2)

# --- Prepare Crude Data ---
plot_crude_type <- crude_incidence_type_clean %>%
  mutate(
    label = "Crude incidence",
    incidence = crude_rate,
    lower = lower_ci_crude,
    upper = upper_ci_crude
  ) %>%
  select(year, stroke_type, label, incidence, lower, upper)

# --- Prepare ESP-Standardised Data ---
plot_esp_type <- esp_std_type_clean %>%
  mutate(
    label = "ESP-standardised incidence",
    incidence = std_rate,
    lower = lower_ci_esp,
    upper = upper_ci_esp
  ) %>%
  select(year, stroke_type, label, incidence, lower, upper)

# --- Combine and Filter Out 2025 ---
plot_data_type <- bind_rows(plot_crude_type, plot_esp_type) %>%
  filter(year <= 2024)

# --- Plot ---
ggplot(plot_data_type, aes(x = year, y = incidence, color = stroke_type)) +
  geom_line(size = 1) +
  geom_point(size = 1.8) +
  geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.4, size = 0.5) +
  facet_wrap(~ label, ncol = 1, scales = "free_y") +
  scale_color_manual(values = c(
    "Subarachnoid" = "#1b9e77",
    "Haemorrhagic" = "#7570b3",
    "Ischaemic" = "#e7298a"
  )) +
  labs(
    title = "Stroke Incidence per 100,000 (1995–2024)",
    subtitle = "By Stroke Type: Crude and ESP-standardised with 95% Confidence Intervals",
    x = "Year",
    y = "Incidence Rate",
    color = "Stroke Type"
  ) +
  theme_minimal(base_size = 14) +
  theme(
    strip.text = element_text(size = 14, face = "bold"),
    panel.grid.minor = element_blank()
  )



